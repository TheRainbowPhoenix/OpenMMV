(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.TkoolmvNamagame = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * コンバータ機能を提供するクラス。
 */
var Converter = /** @class */ (function () {
    function Converter() {
    }
    /**
     * エンティティをホバー可能に変換する。
     */
    Converter.asHoverable = function (e, opts) {
        var hoverableE = e;
        hoverableE.hoverable = true;
        hoverableE.touchable = true;
        hoverableE.hovered = hoverableE.hovered || new g.Trigger();
        hoverableE.unhovered = hoverableE.unhovered || new g.Trigger();
        if (opts) {
            if (opts.cursor)
                hoverableE.cursor = opts.cursor;
        }
        return hoverableE;
    };
    /**
     * エンティティのホバーを解除する。
     */
    Converter.asUnhoverable = function (e) {
        var hoverableE = e;
        delete hoverableE.hoverable;
        if (hoverableE.hovered && !hoverableE.hovered.destroyed()) {
            hoverableE.hovered.destroy();
            delete hoverableE.hovered;
        }
        if (hoverableE.unhovered && !hoverableE.unhovered.destroyed()) {
            hoverableE.unhovered.fire();
            hoverableE.unhovered.destroy();
            delete hoverableE.unhovered;
        }
        return hoverableE;
    };
    return Converter;
}());
exports.Converter = Converter;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * ホバー機能を提供するプラグイン。
 */
var HoverPlugin = /** @class */ (function () {
    function HoverPlugin(game, viewInfo, option) {
        if (option === void 0) { option = {}; }
        this.game = game;
        this.view = viewInfo.view; // viewInfo が必ず渡ってくるため null にはならない
        this.beforeHover = null;
        this.operationTrigger = new g.Trigger();
        this._cursor = option.cursor || "pointer";
        this._showTooltip = !!option.showTooltip;
        this._latestHoveredPoint = null;
        this._getScale = viewInfo.getScale ? function () { return viewInfo.getScale(); } : null;
        this._onMouseMove_bound = this._onMouseMove.bind(this);
        this._onMouseOut_bound = this._onMouseOut.bind(this);
    }
    HoverPlugin.isSupported = function () {
        return (typeof document !== "undefined") && (typeof document.addEventListener === "function");
    };
    HoverPlugin.prototype.start = function () {
        this.view.addEventListener("mousemove", this._onMouseMove_bound, false);
        this.view.addEventListener("mouseout", this._onMouseOut_bound, false);
        return true;
    };
    HoverPlugin.prototype.stop = function () {
        this.view.removeEventListener("mousemove", this._onMouseMove_bound, false);
        this.view.removeEventListener("mouseout", this._onMouseOut_bound, false);
    };
    // 現在ホバーしている座標を返す。ホバーしていない時は null を返す。
    HoverPlugin.prototype.getLatestHoveredPoint = function () {
        return this._latestHoveredPoint;
    };
    HoverPlugin.prototype._onMouseMove = function (e) {
        var scene = this.game.scene();
        if (!scene)
            return;
        var rect = this.view.getBoundingClientRect();
        var positionX = rect.left + window.pageXOffset;
        var positionY = rect.top + window.pageYOffset;
        var offsetX = e.pageX - positionX;
        var offsetY = e.pageY - positionY;
        var scale = { x: 1, y: 1 };
        if (this._getScale) {
            scale = this._getScale();
        }
        var point = { x: offsetX / scale.x, y: offsetY / scale.y };
        var target = scene.findPointSourceByPoint(point).target;
        if (target && target.hoverable) {
            this._latestHoveredPoint = point;
            if (target !== this.beforeHover) {
                if (this.beforeHover && this.beforeHover.hoverable) {
                    this._onUnhovered(target);
                }
                this._onHovered(target);
            }
            this.beforeHover = target;
        }
        else if (this.beforeHover) {
            this._latestHoveredPoint = null;
            this._onUnhovered(this.beforeHover);
        }
    };
    HoverPlugin.prototype._onHovered = function (target) {
        if (target.hoverable) {
            this.view.style.cursor = target.cursor ? target.cursor : this._cursor;
            if (this._showTooltip && target.title) {
                this.view.setAttribute("title", target.title);
            }
            target.hovered.fire();
        }
    };
    HoverPlugin.prototype._onUnhovered = function (_target) {
        this.view.style.cursor = "auto";
        if (this.beforeHover && this.beforeHover.unhovered) {
            this.beforeHover.unhovered.fire();
            if (this._showTooltip) {
                this.view.removeAttribute("title");
            }
        }
        this.beforeHover = null;
    };
    HoverPlugin.prototype._onMouseOut = function () {
        if (this.beforeHover)
            this._onUnhovered(this.beforeHover);
    };
    return HoverPlugin;
}());
module.exports = HoverPlugin;

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Converter_1 = require("./Converter");
exports.Converter = Converter_1.Converter;
// HoverPlugin.ts で module.exports しているため、そのまま export すると使用側で型がおかしくなる。
// 後方互換性のため module.exports は残しここでキャストしている。
var plugin = require("./HoverPlugin");
// eslint-disable-next-line @typescript-eslint/naming-convention
var hoverPlugin = plugin;
exports.HoverPlugin = hoverPlugin;

},{"./Converter":1,"./HoverPlugin":2}],4:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = exports.PixiEntity = void 0;
var Utils_1 = require("../core/Utils");
var ObservablePoint_1 = require("./ObservablePoint");
var PixiEntity = /** @class */ (function (_super) {
    __extends(PixiEntity, _super);
    function PixiEntity(param) {
        var _this = _super.call(this, param) || this;
        _this.container = param.container;
        return _this;
    }
    // override
    PixiEntity.prototype.renderSelf = function (renderer, camera) {
        // if (
        // 	!this.container.hasOwnProperty("openness") ||
        // 	(this.container.hasOwnProperty("openness") && (this.container as any).openness > 0)
        // 	) {
        // 	return this.container.renderSelf(renderer, camera);
        // }
        return this.container.renderSelf(renderer, camera);
    };
    return PixiEntity;
}(g.E));
exports.PixiEntity = PixiEntity;
/**
 * PIXI.Container 相当品
 */
var Container = /** @class */ (function () {
    function Container() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.initialize.apply(this, args);
    }
    Object.defineProperty(Container.prototype, "scene", {
        get: function () {
            return this.pixiEntity.scene;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "x", {
        get: function () {
            return this.pixiEntity.x;
        },
        set: function (value) {
            this.pixiEntity.x = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "y", {
        get: function () {
            return this.pixiEntity.y;
        },
        set: function (value) {
            this.pixiEntity.y = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "scale", {
        get: function () {
            // `: Point` をつけてもコンパイルが通った。継承関係がなくてもインターフェースが一致しているから？
            return this._scale;
        },
        set: function (value) {
            this._scale.set(value.x, value.y);
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "pivot", {
        get: function () {
            return this._pivot;
        },
        set: function (value) {
            this._pivot.set(value.x, value.y);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "zIndex", {
        get: function () {
            return this._zIndex;
        },
        set: function (value) {
            this._zIndex = value;
            // TODO: sort
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "alpha", {
        get: function () {
            return this.pixiEntity.opacity;
        },
        set: function (value) {
            this.pixiEntity.opacity = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "rotation", {
        get: function () {
            return (this.pixiEntity.angle / 180) * Math.PI;
        },
        set: function (value) {
            this.pixiEntity.angle = (value / Math.PI) * 180;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "opacity", {
        get: function () {
            return this.pixiEntity.opacity * 255;
        },
        set: function (value) {
            value = Utils_1.Utils.clamp(value, 0, 255);
            this.pixiEntity.opacity = value / 255;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "visible", {
        get: function () {
            return this.pixiEntity.visible();
        },
        set: function (value) {
            if (value)
                this.pixiEntity.show();
            else
                this.pixiEntity.hide();
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "width", {
        get: function () {
            // return this.scale.x * this.getLocalBounds().width;
            // TODO: 以下のやり方はおそらく不正確なのでちゃんと
            return this.scale.x * this.pixiEntity.width;
        },
        set: function (value) {
            // const width = this.getLocalBounds().width;
            var width = this.pixiEntity.width;
            if (width !== 0) {
                this.scale.x = value / width;
            }
            else {
                this.scale.x = 1;
            }
            this._width = value;
            this.pixiEntity.width = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "height", {
        get: function () {
            // return this.scale.y * this.getLocalBounds().height;
            // TODO: 以下のやり方はおそらく不正確なのでちゃんと
            return this.scale.y * this.pixiEntity.height;
        },
        set: function (value) {
            // const height = this.getLocalBounds().height;
            var height = this.pixiEntity.height;
            if (height !== 0) {
                this.scale.y = value / height;
            }
            else {
                this.scale.y = 1;
            }
            this._height = value;
            this.pixiEntity.height = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    Container.prototype.initialize = function () {
        var _this = this;
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this.pixiEntity = new PixiEntity({
            scene: g.game.scene(),
            container: this
        });
        this.parent = null;
        this.children = [];
        this.alpha = 1.0;
        this.visible = true;
        this._zIndex = 0;
        this.z = 0;
        this._pivot = new ObservablePoint_1.ObservablePoint(function (subject) {
            _this.pixiEntity.x = -1 * subject.x;
            _this.pixiEntity.y = -1 * subject.y;
            _this.modified();
        }, 0, 0);
        this._scale = new ObservablePoint_1.ObservablePoint(function (subject) {
            _this.pixiEntity.scaleX = subject.x;
            _this.pixiEntity.scaleY = subject.y;
            _this.modified();
        }, 1, 1);
    };
    Container.prototype.onChildrenChange = function (_index) {
        // nothing to do.
    };
    Container.prototype.addChild = function (child) {
        if (child.parent) {
            child.parent.removeChild(child);
        }
        child.parent = this;
        this.children.push(child);
        this.pixiEntity.append(child.pixiEntity);
        return child;
    };
    Container.prototype.addChildAt = function (child, index) {
        if (child.parent) {
            child.parent.removeChild(child);
        }
        child.parent = this;
        this.children.splice(index, 0, child);
        this._addChildAt(this.pixiEntity, child.pixiEntity, index);
        return child;
    };
    Container.prototype.removeChild = function (child) {
        var index = this.children.indexOf(child);
        if (index === -1)
            return null;
        child.parent = null;
        // removeItems(this.children, index, 1);
        this.children.splice(index, 1);
        if (this.pixiEntity.children.indexOf(child.pixiEntity) >= 0) {
            this.pixiEntity.remove(child.pixiEntity);
        }
        else {
            console.warn("container's child is not entity's child, cancel removing");
        }
        return child;
    };
    Container.prototype.updateTransform = function () {
        if (!this.children) {
            return;
        }
        this.children.forEach(function (c) {
            var child = c;
            if (child.updateTransform) {
                child.updateTransform();
            }
        });
    };
    Container.prototype.update = function () {
        if (!this.children) {
            return;
        }
        this.children.forEach(function (c) {
            var child = c;
            if (child.update) {
                child.update();
            }
        });
    };
    Container.prototype.modified = function () {
        this.pixiEntity.modified();
    };
    Container.prototype.renderSelf = function (_renderer, _camera) {
        return true;
    };
    Container.prototype._addChildAt = function (self, child, index) {
        var target = index < self.children.length ? self.children[index] : null;
        if (target) {
            self.insertBefore(child, target);
        }
        else {
            self.append(child);
        }
        return self;
    };
    return Container;
}());
exports.Container = Container;

},{"../core/Utils":28,"./ObservablePoint":5}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservablePoint = void 0;
var ObservablePoint = /** @class */ (function () {
    function ObservablePoint(observer, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this._x = x;
        this._y = y;
        this._observer = observer;
    }
    ObservablePoint.prototype.set = function (x, y) {
        var _x = x || 0;
        var _y = y || (y !== 0 ? _x : 0);
        if (this._x !== _x || this._y !== _y) {
            this._x = _x;
            this._y = _y;
            this._observer(this);
        }
    };
    Object.defineProperty(ObservablePoint.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (value) {
            if (this._x !== value) {
                this._x = value;
                this._observer(this);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObservablePoint.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (value) {
            if (this._y !== value) {
                this._y = value;
                this._observer(this);
            }
        },
        enumerable: false,
        configurable: true
    });
    return ObservablePoint;
}());
exports.ObservablePoint = ObservablePoint;

},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Point = void 0;
var Point = /** @class */ (function () {
    function Point(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    Point.prototype.set = function (x, y) {
        this.x = x || 0;
        this.y = y || (y !== 0 ? this.x : 0);
    };
    return Point;
}());
exports.Point = Point;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rectangle = void 0;
var Rectangle = /** @class */ (function () {
    function Rectangle(x, y, width, height) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.type = 1; // SHAPES.RECT; // TODO: ちゃんと
    }
    Object.defineProperty(Rectangle.prototype, "left", {
        get: function () {
            return this.x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "right", {
        get: function () {
            return this.x + this.width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "top", {
        get: function () {
            return this.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle.prototype, "bottom", {
        get: function () {
            return this.y + this.height;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rectangle, "EMPTY", {
        get: function () {
            return new Rectangle(0, 0, 0, 0);
        },
        enumerable: false,
        configurable: true
    });
    Rectangle.prototype.clone = function () {
        return new Rectangle(this.x, this.y, this.width, this.height);
    };
    Rectangle.prototype.copy = function (rectangle) {
        this.x = rectangle.x;
        this.y = rectangle.y;
        this.width = rectangle.width;
        this.height = rectangle.height;
        return this;
    };
    Rectangle.prototype.contains = function (x, y) {
        if (this.width <= 0 || this.height <= 0) {
            return false;
        }
        if (x >= this.x && x < this.x + this.width) {
            if (y >= this.y && y < this.y + this.height) {
                return true;
            }
        }
        return false;
    };
    Rectangle.prototype.pad = function (paddingX, paddingY) {
        paddingX = paddingX || 0;
        paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);
        this.x -= paddingX;
        this.y -= paddingY;
        this.width += paddingX * 2;
        this.height += paddingY * 2;
    };
    Rectangle.prototype.fit = function (rectangle) {
        if (this.x < rectangle.x) {
            this.width += this.x;
            if (this.width < 0) {
                this.width = 0;
            }
            this.x = rectangle.x;
        }
        if (this.y < rectangle.y) {
            this.height += this.y;
            if (this.height < 0) {
                this.height = 0;
            }
            this.y = rectangle.y;
        }
        if (this.x + this.width > rectangle.x + rectangle.width) {
            this.width = rectangle.width - this.x;
            if (this.width < 0) {
                this.width = 0;
            }
        }
        if (this.y + this.height > rectangle.y + rectangle.height) {
            this.height = rectangle.height - this.y;
            if (this.height < 0) {
                this.height = 0;
            }
        }
    };
    Rectangle.prototype.enlarge = function (rectangle) {
        var x1 = Math.min(this.x, rectangle.x);
        var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);
        var y1 = Math.min(this.y, rectangle.y);
        var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);
        this.x = x1;
        this.width = x2 - x1;
        this.y = y1;
        this.height = y2 - y1;
    };
    Rectangle.emptyRectangle = new Rectangle();
    return Rectangle;
}());
exports.Rectangle = Rectangle;

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = void 0;
var Rectangle_1 = require("./Rectangle");
var Texture = /** @class */ (function () {
    function Texture() {
        this.frame = new Rectangle_1.Rectangle(0, 0, 1, 1);
        this.baseTexture = { width: 0, height: 0 };
    }
    return Texture;
}());
exports.Texture = Texture;

},{"./Rectangle":7}],9:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorMatrixFilter = void 0;
var Filter_1 = require("./Filter");
// PIXIの当該機能のインターフェースだけ持ってきたもの。空振りする。
// see: http://pixijs.download/dev/docs/packages_filters_filter-color-matrix_src_ColorMatrixFilter.js.html
var ColorMatrixFilter = /** @class */ (function (_super) {
    __extends(ColorMatrixFilter, _super);
    function ColorMatrixFilter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorMatrixFilter.prototype.hue = function (_value, _b) {
        //
    };
    ColorMatrixFilter.prototype.saturate = function (_value, _b) {
        //
    };
    ColorMatrixFilter.prototype.reset = function () {
        //
    };
    ColorMatrixFilter.prototype._loadMatrix = function (_matrix, _b) {
        //
    };
    return ColorMatrixFilter;
}(Filter_1.Filter));
exports.ColorMatrixFilter = ColorMatrixFilter;

},{"./Filter":10}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Filter = void 0;
// Pixiのfilterクラスの空実装。シェーダをスプライトに適用する仕組み、の模様
// http://pixijs.download/dev/docs/packages_core_src_filters_Filter.js.html
var Filter = /** @class */ (function () {
    function Filter() {
    }
    return Filter;
}());
exports.Filter = Filter;

},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorMatrixFilter = exports.Filter = void 0;
var Filter_1 = require("./Filter");
Object.defineProperty(exports, "Filter", { enumerable: true, get: function () { return Filter_1.Filter; } });
var ColorMatrixFilter_1 = require("./ColorMatrixFilter");
Object.defineProperty(exports, "ColorMatrixFilter", { enumerable: true, get: function () { return ColorMatrixFilter_1.ColorMatrixFilter; } });

},{"./ColorMatrixFilter":9,"./Filter":10}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filters = exports.ObservablePoint = exports.Point = exports.Texture = exports.Rectangle = exports.PixiEntity = exports.Container = void 0;
var Container_1 = require("./Container");
Object.defineProperty(exports, "Container", { enumerable: true, get: function () { return Container_1.Container; } });
Object.defineProperty(exports, "PixiEntity", { enumerable: true, get: function () { return Container_1.PixiEntity; } });
var Rectangle_1 = require("./Rectangle");
Object.defineProperty(exports, "Rectangle", { enumerable: true, get: function () { return Rectangle_1.Rectangle; } });
var Texture_1 = require("./Texture");
Object.defineProperty(exports, "Texture", { enumerable: true, get: function () { return Texture_1.Texture; } });
var Point_1 = require("./Point");
Object.defineProperty(exports, "Point", { enumerable: true, get: function () { return Point_1.Point; } });
var ObservablePoint_1 = require("./ObservablePoint");
Object.defineProperty(exports, "ObservablePoint", { enumerable: true, get: function () { return ObservablePoint_1.ObservablePoint; } });
var filters = require("./filters");
exports.filters = filters;

},{"./Container":4,"./ObservablePoint":5,"./Point":6,"./Rectangle":7,"./Texture":8,"./filters":11}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bitmap = exports.MAX_PAINT_OPACITY = void 0;
var Graphics_1 = require("./Graphics");
var Utils_1 = require("./Utils");
var fontMap = [];
function registerFont(fontSize, fontColor, strokeColor) {
    var font = new g.DynamicFont({
        game: g.game,
        fontFamily: "sans-serif",
        size: fontSize,
        fontColor: fontColor,
        strokeWidth: 4,
        strokeColor: strokeColor
    });
    fontMap.push(font);
    return font;
}
// NOTE: フォントサイズが指定値以上、かつ最も小さい Font を返します。
function getFont(fontSize, fontColor, strokeColor) {
    if (fontColor === void 0) { fontColor = "#ffffff"; }
    if (strokeColor === void 0) { strokeColor = "rgba(0, 0, 0, 0.5)"; }
    var font = fontMap.find(function (e) { return e.size >= fontSize && e.fontColor === fontColor && e.strokeColor === strokeColor; });
    return font !== null && font !== void 0 ? font : registerFont(fontSize, fontColor, strokeColor);
}
registerFont(24, "#ffffff", "rgba(0, 0, 0, 0.5)");
registerFont(32, "#ffffff", "rgba(0, 0, 0, 0.5)");
registerFont(72, "#ffffff", "rgba(0, 0, 0, 0.5)");
// let sharedFont: g.Font;
exports.MAX_PAINT_OPACITY = 255;
var Bitmap = /** @class */ (function () {
    function Bitmap(widthOrUrl, height) {
        if (typeof widthOrUrl === "number") {
            this.initialize(widthOrUrl, height);
        }
        else {
            this._defer = true;
            this.initialize();
            // 一旦メモ
            this._url = widthOrUrl;
        }
    }
    /**
     * Loads a image file and returns a new bitmap object.
     *
     * @static
     * @method load
     * @param {String} url The image url of the texture
     * @return Bitmap
     */
    Bitmap.load = function (url) {
        var bitmap = new Bitmap(url);
        bitmap._defer = true;
        bitmap.initialize();
        bitmap._decodeAfterRequest = true;
        bitmap._requestImage(url);
        return bitmap;
    };
    /**
     * Takes a snapshot of the game screen and returns a new bitmap object.
     *
     * @static
     * @method snap
     * @param {Stage} stage The stage object
     * @return Bitmap
     */
    Bitmap.snap = function (stage) {
        // var width = Graphics.width;
        // var height = Graphics.height;
        // var bitmap = new Bitmap(width, height);
        // var context = bitmap._context;
        // var renderTexture = PIXI.RenderTexture.create(width, height);
        // if (stage) {
        // 	Graphics._renderer.render(stage, renderTexture);
        // 	stage.worldTransform.identity();
        // 	var canvas = null;
        // 	if (Graphics.isWebGL()) {
        // 		canvas = Graphics._renderer.extract.canvas(renderTexture);
        // 	} else {
        // 		canvas = renderTexture.baseTexture._canvasRenderTarget.canvas;
        // 	}
        // 	context.drawImage(canvas, 0, 0);
        // } else {
        // 	//
        // }
        // renderTexture.destroy({ destroyBase: true });
        // bitmap._setDirty();
        // return bitmap;
        var width = Graphics_1.Graphics.width;
        var height = Graphics_1.Graphics.height;
        var bitmap = new Bitmap(width, height);
        var surface = bitmap._surface;
        if (stage) {
            var renderer = surface.renderer();
            renderer.begin();
            renderer.save();
            var children = stage.children;
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                child.render(renderer);
            }
            renderer.restore();
            renderer.end();
        }
        return bitmap;
    };
    Bitmap.request = function (url) {
        var bitmap = new Bitmap(url);
        bitmap._defer = true;
        bitmap.initialize();
        bitmap._url = url;
        bitmap._loadingState = "pending";
        return bitmap;
    };
    Bitmap.prototype.initialize = function (width, height) {
        if (!this._defer) {
            this._createCanvas(width, height);
        }
        this._image = null;
        this._url = "";
        this._paintOpacity = exports.MAX_PAINT_OPACITY;
        this._smooth = false;
        this._loadListeners = [];
        this._loadingState = "none";
        this._decodeAfterRequest = false;
        this._textAlign = null;
        /**
         * Cache entry, for images. In all cases _url is the same as cacheEntry.key
         * @type CacheEntry
         */
        this.cacheEntry = null;
        /**
         * The face name of the font.
         *
         * @property fontFace
         * @type String
         */
        this.fontFace = "GameFont";
        /**
         * The size of the font in pixels.
         *
         * @property fontSize
         * @type Number
         */
        this.fontSize = 28;
        /**
         * Whether the font is italic.
         *
         * @property fontItalic
         * @type Boolean
         */
        this.fontItalic = false;
        /**
         * The color of the text in CSS format.
         *
         * @property textColor
         * @type String
         */
        this.textColor = "#ffffff";
        /**
         * The color of the outline of the text in CSS format.
         *
         * @property outlineColor
         * @type String
         */
        this.outlineColor = "rgba(0, 0, 0, 0.5)";
        /**
         * The width of the outline of the text.
         *
         * @property outlineWidth
         * @type Number
         */
        this.outlineWidth = 4;
    };
    /**
     * Checks whether the bitmap is ready to render.
     *
     * @method isReady
     * @return {Boolean} True if the bitmap is ready to render
     */
    Bitmap.prototype.isReady = function () {
        return this._loadingState === "loaded" || this._loadingState === "none";
    };
    /**
     * Checks whether a loading error has occurred.
     *
     * @method isError
     * @return {Boolean} True if a loading error has occurred
     */
    Bitmap.prototype.isError = function () {
        return this._loadingState === "error";
    };
    /**
     * touch the resource
     * @method touch
     */
    Bitmap.prototype.touch = function () {
        // if (this.cacheEntry) {
        // 	this.cacheEntry.touch();
        // }
    };
    Object.defineProperty(Bitmap.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "baseTexture", {
        get: function () {
            if (!this._baseTexture) {
                this._createBaseTexture(this._surface);
            }
            return this._baseTexture;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "canvas", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "context", {
        get: function () {
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "width", {
        get: function () {
            if (this.isReady()) {
                return this._image ? this._image.width : this._surface.width;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "height", {
        get: function () {
            if (this.isReady()) {
                return this._image ? this._image.height : this._surface.height;
            }
            return 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "rect", {
        get: function () {
            return {
                x: 0,
                y: 0,
                width: this.width,
                height: this.height
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "smooth", {
        get: function () {
            return true;
        },
        set: function (value) {
            //
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "paintOpacity", {
        get: function () {
            return this._paintOpacity;
        },
        set: function (value) {
            if (this._paintOpacity !== value) {
                this._paintOpacity = value;
                // this._context.globalAlpha = this._paintOpacity / MAX_PAINT_OPACITY;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Bitmap.prototype, "surface", {
        get: function () {
            return this._surface;
        },
        enumerable: false,
        configurable: true
    });
    Bitmap.prototype.resize = function (width, height) {
        width = Math.max(width || 0, 1);
        height = Math.max(height || 0, 1);
        // this._canvas.width = width;
        // this._canvas.height = height;
        // this._baseTexture.width = width;
        // this._baseTexture.height = height;
        // TODO: 以前の内容をコピーする必要がある？
        this.__surface = g.game.resourceFactory.createSurface(width, height);
    };
    /**
     * Performs a block transfer.
     *
     * @method blt
     * @param {Bitmap} source The bitmap to draw
     * @param {Number} sx The x coordinate in the source
     * @param {Number} sy The y coordinate in the source
     * @param {Number} sw The width of the source image
     * @param {Number} sh The height of the source image
     * @param {Number} dx The x coordinate in the destination
     * @param {Number} dy The y coordinate in the destination
     * @param {Number} [dw=sw] The width to draw the image in the destination
     * @param {Number} [dh=sh] The height to draw the image in the destination
     */
    Bitmap.prototype.blt = function (source, sx, sy, sw, sh, dx, dy, dw, dh) {
        // dw = dw || sw;
        // dh = dh || sh;
        // if (sx >= 0 && sy >= 0 && sw > 0 && sh > 0 && dw > 0 && dh > 0 &&
        // 	sx + sw <= source.width && sy + sh <= source.height) {
        // 	this._context.globalCompositeOperation = "source-over";
        // 	this._context.drawImage(source._canvas, sx, sy, sw, sh, dx, dy, dw, dh);
        // 	this._setDirty();
        // }
        dw = dw || sw;
        dh = dh || sh;
        if (sx >= 0 && sy >= 0 && sw > 0 && sh > 0 && dw > 0 && dh > 0 && sx + sw <= source.width && sy + sh <= source.height) {
            var renderer = this._surface.renderer();
            renderer.begin();
            renderer.save();
            renderer.setTransform([dw / sw, 0, 0, dh / sh, dx, dy]);
            renderer.drawImage(source._surface, sx, sy, sw, sh, 0, 0);
            renderer.restore();
            renderer.end();
            this._setDirty();
        }
    };
    /**
     * Performs a block transfer, using assumption that original image was not modified (no hue)
     *
     * @method blt
     * @param {Bitmap} source The bitmap to draw
     * @param {Number} sx The x coordinate in the source
     * @param {Number} sy The y coordinate in the source
     * @param {Number} sw The width of the source image
     * @param {Number} sh The height of the source image
     * @param {Number} dx The x coordinate in the destination
     * @param {Number} dy The y coordinate in the destination
     * @param {Number} [dw=sw] The width to draw the image in the destination
     * @param {Number} [dh=sh] The height to draw the image in the destination
     */
    Bitmap.prototype.bltImage = function (source, sx, sy, sw, sh, dx, dy, dw, dh) {
        // こちらは blt() と比較して source._image を用いているところが異なる
        // たぶん
        // source._image が原画像
        // source.canvas が加工された画像
        // dw = dw || sw;
        // dh = dh || sh;
        // if (sx >= 0 && sy >= 0 && sw > 0 && sh > 0 && dw > 0 && dh > 0 &&
        // 	sx + sw <= source.width && sy + sh <= source.height) {
        // 	this._context.globalCompositeOperation = "source-over";
        // 	this._context.drawImage(source._image, sx, sy, sw, sh, dx, dy, dw, dh);
        // 	this._setDirty();
        // }
        dw = dw || sw;
        dh = dh || sh;
        if (sx >= 0 && sy >= 0 && sw > 0 && sh > 0 && dw > 0 && dh > 0 && sx + sw <= source.width && sy + sh <= source.height) {
            var renderer = this._surface.renderer();
            renderer.begin();
            renderer.save();
            renderer.setTransform([dw / sw, 0, 0, dh / sh, dx, dy]);
            renderer.drawImage(source._image.asSurface(), sx, sy, sw, sh, 0, 0);
            renderer.restore();
            renderer.end();
            this._setDirty();
        }
    };
    /**
     * Returns pixel color at the specified point.
     *
     * @method getPixel
     * @param {Number} x The x coordinate of the pixel in the bitmap
     * @param {Number} y The y coordinate of the pixel in the bitmap
     * @return {String} The pixel color (hex format)
     */
    Bitmap.prototype.getPixel = function (x, y) {
        // var data = this._context.getImageData(x, y, 1, 1).data;
        // var result = "#";
        // for (var i = 0; i < 3; i++) {
        // 	result += data[i].toString(16).padZero(2);
        // }
        // return result;
        var _a, _b;
        if (this.__surface === this._image.asSurface()) {
            this._createCanvas();
        }
        var renderer = this._surface.renderer();
        renderer.begin();
        // 色情報が取得できない環境では決め打ちで白のデータを返すように
        var data = (_b = (_a = renderer._getImageData(x, y, 1, 1)) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : [255, 255, 255];
        renderer.end();
        var result = "#";
        for (var i = 0; i < 3; i++) {
            result += Utils_1.Utils.padZero(data[i].toString(16), 2);
        }
        return result;
    };
    /**
     * Returns alpha pixel value at the specified point.
     *
     * @method getAlphaPixel
     * @param {Number} _x The x coordinate of the pixel in the bitmap
     * @param {Number} _y The y coordinate of the pixel in the bitmap
     * @return {String} The alpha value
     */
    Bitmap.prototype.getAlphaPixel = function (_x, _y) {
        // var data = this._context.getImageData(x, y, 1, 1).data;
        // return data[3];
        // TODO: 必要そうならちゃんと
        return 128;
    };
    /**
     * Clears the specified rectangle.
     *
     * @method clearRect
     * @param {Number} x The x coordinate for the upper-left corner
     * @param {Number} y The y coordinate for the upper-left corner
     * @param {Number} width The width of the rectangle to clear
     * @param {Number} height The height of the rectangle to clear
     */
    Bitmap.prototype.clearRect = function (x, y, width, height) {
        // this._context.clearRect(x, y, width, height);
        // this._setDirty();
        var renderer = this._surface.renderer();
        renderer.begin();
        renderer.save();
        // clearRect を正しく実装しないと、バトル中のステータスウィンドウの文字が
        // 徐々に濃くなる。これは、文字を重ね書きしているため。
        // clear できれば解消できる。
        // これで CanvasRenderingContext2D.clearRect() 相当のつもり
        // ! なぜかフィールドが白くなる
        // renderer.setOpacity(1.0);
        // renderer.setCompositeOperation(g.CompositeOperation.Copy);
        // renderer.fillRect(x, y, width, height, Utils.rgbaToCssColor(0, 0, 0, 0));
        // ↑これがよくわからないので分解したもの。
        // が、わかったことは　fillRectを呼び出すとフィールドが白くなることだけ
        // renderer.setOpacity(1.0);
        // renderer.setCompositeOperation(g.CompositeOperation.Copy);
        // const fillStyle = Utils.rgbaToCssColor(0, 0, 0, 0);
        // const that = renderer as any;
        // const _fillStyle = that.context.fillStyle;
        // that.context.fillStyle = fillStyle;
        // that.context.fillRect(x, y, width, height);
        // that.context.fillStyle = _fillStyle;
        // 仕方がないので CanvasRenderingContext2D を直接操作する
        // 解決した。
        // TODO: akashic で clearRect を公開してもらう
        var that = renderer;
        if (that.context) {
            that.context.clearRect(x, y, width, height);
        }
        // debug: 色を付けてみる
        // renderer.setOpacity(1.0);
        // renderer.setCompositeOperation(g.CompositeOperation.SourceOver);
        // renderer.fillRect(x, y, width, height, Utils.rgbaToCssColor(255, 128, 0, 192));
        renderer.restore();
        renderer.end();
    };
    /**
     * Clears the entire bitmap.
     *
     * @method clear
     */
    Bitmap.prototype.clear = function () {
        this.clearRect(0, 0, this.width, this.height);
    };
    /**
     * Fills the specified rectangle.
     *
     * @method fillRect
     * @param {Number} x The x coordinate for the upper-left corner
     * @param {Number} y The y coordinate for the upper-left corner
     * @param {Number} width The width of the rectangle to fill
     * @param {Number} height The height of the rectangle to fill
     * @param {String} color The color of the rectangle in CSS format
     */
    Bitmap.prototype.fillRect = function (x, y, width, height, color) {
        // var context = this._context;
        // context.save();
        // context.fillStyle = color;
        // context.fillRect(x, y, width, height);
        // context.restore();
        // this._setDirty();
        var renderer = this._surface.renderer();
        renderer.begin();
        renderer.save();
        renderer.opacity(this.paintOpacity / exports.MAX_PAINT_OPACITY);
        renderer.fillRect(x, y, width, height, color);
        renderer.restore();
        renderer.end();
    };
    /**
     * Fills the entire bitmap.
     *
     * @method fillAll
     * @param {String} color The color of the rectangle in CSS format
     */
    Bitmap.prototype.fillAll = function (color) {
        this.fillRect(0, 0, this.width, this.height, color);
    };
    /**
     * Draws the rectangle with a gradation.
     *
     * @method gradientFillRect
     * @param {Number} x The x coordinate for the upper-left corner
     * @param {Number} y The y coordinate for the upper-left corner
     * @param {Number} width The width of the rectangle to fill
     * @param {Number} height The height of the rectangle to fill
     * @param {String} color1 The gradient starting color
     * @param {String} color2 The gradient ending color
     * @param {Boolean} vertical Wether the gradient should be draw as vertical or not
     */
    Bitmap.prototype.gradientFillRect = function (x, y, width, height, color1, color2, vertical) {
        // var context = this._context;
        // var grad;
        // if (vertical) {
        // 	grad = context.createLinearGradient(x, y, x, y + height);
        // } else {
        // 	grad = context.createLinearGradient(x, y, x + width, y);
        // }
        // grad.addColorStop(0, color1);
        // grad.addColorStop(1, color2);
        // context.save();
        // context.fillStyle = grad;
        // context.fillRect(x, y, width, height);
        // context.restore();
        // this._setDirty();
        var renderer = this._surface.renderer();
        renderer.begin();
        renderer.save();
        // おかしなデータが来ない前提
        var rgba1 = Utils_1.Utils.cssToRGBColor(color1);
        var rgba2 = Utils_1.Utils.cssToRGBColor(color2);
        if (vertical) {
            for (var i = 0; i < height; i++) {
                var t = i / (height - 1);
                var r = rgba1[0] * (1 - t) + rgba2[0] * t;
                var g_1 = rgba1[1] * (1 - t) + rgba2[1] * t;
                var b = rgba1[2] * (1 - t) + rgba2[2] * t;
                var a = rgba1[3] * (1 - t) + rgba2[3] * t;
                renderer.fillRect(x, y + i, width, 1, Utils_1.Utils.rgbaToCssColor(r, g_1, b, a));
            }
        }
        else {
            for (var i = 0; i < width; i++) {
                var t = i / (width - 1);
                var r = rgba1[0] * (1 - t) + rgba2[0] * t;
                var g_2 = rgba1[1] * (1 - t) + rgba2[1] * t;
                var b = rgba1[2] * (1 - t) + rgba2[2] * t;
                var a = rgba1[3] * (1 - t) + rgba2[3] * t;
                renderer.fillRect(x + i, y, 1, height, Utils_1.Utils.rgbaToCssColor(r, g_2, b, a));
            }
        }
        renderer.restore();
        renderer.end();
    };
    /**
     * Draw a bitmap in the shape of a circle
     *
     * @method drawCircle
     * @param {Number} x The x coordinate based on the circle center
     * @param {Number} y The y coordinate based on the circle center
     * @param {Number} radius The radius of the circle
     * @param {String} color The color of the circle in CSS format
     */
    Bitmap.prototype.drawCircle = function (x, y, radius, color) {
        // var context = this._context;
        // context.save();
        // context.fillStyle = color;
        // context.beginPath();
        // context.arc(x, y, radius, 0, Math.PI * 2, false);
        // context.fill();
        // context.restore();
        // this._setDirty();
        // NOTE: circleを描く手段がないので代替する
        this.fillRect(x, y, radius, radius, color);
    };
    /**
     * Draws the outline text to the bitmap.
     *
     * @method drawText
     * @param {String} text The text that will be drawn
     * @param {Number} x The x coordinate for the left of the text
     * @param {Number} y The y coordinate for the top of the text
     * @param {Number} maxWidth The maximum allowed width of the text
     * @param {Number} lineHeight The height of the text line
     * @param {String} align The alignment of the text
     */
    Bitmap.prototype.drawText = function (_text, x, y, maxWidth, lineHeight, align) {
        // Note: Firefox has a bug with textBaseline: Bug 737852
        //       So we use "alphabetic" here.
        // if (text !== undefined) {
        // 	var tx = x;
        // 	var ty = y + lineHeight - (lineHeight - this.fontSize * 0.7) / 2;
        // 	var context = this._context;
        // 	var alpha = context.globalAlpha;
        // 	maxWidth = maxWidth || 0xffffffff;
        // 	if (align === "center") {
        // 		tx += maxWidth / 2;
        // 	}
        // 	if (align === "right") {
        // 		tx += maxWidth;
        // 	}
        // 	context.save();
        // 	context.font = this._makeFontNameText();
        // 	context.textAlign = align;
        // 	context.textBaseline = "alphabetic";
        // 	context.globalAlpha = 1;
        // 	this._drawTextOutline(text, tx, ty, maxWidth);
        // 	context.globalAlpha = alpha;
        // 	this._drawTextBody(text, tx, ty, maxWidth);
        // 	context.restore();
        // 	this._setDirty();
        // }
        if (_text !== undefined) {
            var text = _text + "";
            var tx = x;
            var ty = y + lineHeight - (lineHeight - this.fontSize * 0.7) / 2;
            maxWidth = maxWidth || 0xffffffff;
            if (align === "center") {
                tx += maxWidth / 2;
            }
            if (align === "right") {
                tx += maxWidth;
            }
            var renderer = this._surface.renderer();
            renderer.begin();
            renderer.save();
            // context.textAlign = align
            this._textAlign = align !== null && align !== void 0 ? align : null;
            this._drawTextBody(text, tx, ty, maxWidth);
            this._textAlign = null; // _textAlignはテキスト描画時にしか利用しないので、テキスト描画終了時に初期値に戻しておく
            renderer.restore();
            renderer.end();
            this._setDirty();
        }
    };
    /**
     * Returns the width of the specified text.
     *
     * @method measureTextWidth
     * @param {String} text The text to be measured
     * @return {Number} The width of the text in pixels
     */
    Bitmap.prototype.measureTextWidth = function (text) {
        // var context = this._context;
        // context.save();
        // context.font = this._makeFontNameText();
        // var width = context.measureText(text).width;
        // context.restore();
        // return width;
        var font = getFont(this.fontSize);
        var width = 0;
        var glyphScale = this.fontSize / font.size;
        for (var i = 0; i < text.length; i++) {
            var code = g.Util.charCodeAt(text, i);
            var glyph = font.glyphForCharacter(code);
            var glyphWidth = glyph.advanceWidth * glyphScale;
            if (!glyph.isSurfaceValid) {
                continue;
            }
            width += glyphWidth;
        }
        return width;
    };
    /**
     * Changes the color tone of the entire bitmap.
     *
     * @method adjustTone
     * @param {Number} r The red strength in the range (-255, 255)
     * @param {Number} g The green strength in the range (-255, 255)
     * @param {Number} b The blue strength in the range (-255, 255)
     */
    Bitmap.prototype.adjustTone = function (r, g, b) {
        var _a;
        if ((r || g || b) && this.width > 0 && this.height > 0) {
            if (this.__surface === ((_a = this._image) === null || _a === void 0 ? void 0 : _a.asSurface()))
                this._createCanvas();
            var renderer = this._surface.renderer();
            var imageData = renderer._getImageData(0, 0, this.width, this.height);
            if (imageData) {
                var pixels = imageData.data;
                for (var i = 0; i < pixels.length; i += 4) {
                    pixels[i + 0] += r;
                    pixels[i + 1] += g;
                    pixels[i + 2] += b;
                }
                renderer._putImageData(imageData, 0, 0);
            }
            this._setDirty();
        }
    };
    /**
     * Rotates the hue of the entire bitmap.
     *
     * @method rotateHue
     * @param {Number} offset The hue offset in 360 degrees
     */
    Bitmap.prototype.rotateHue = function (offset) {
        var _a;
        function rgbToHsl(r, g, b) {
            var cmin = Math.min(r, g, b);
            var cmax = Math.max(r, g, b);
            var h = 0;
            var s = 0;
            var l = (cmin + cmax) / 2;
            var delta = cmax - cmin;
            if (delta > 0) {
                if (r === cmax) {
                    h = 60 * (((g - b) / delta + 6) % 6);
                }
                else if (g === cmax) {
                    h = 60 * ((b - r) / delta + 2);
                }
                else {
                    h = 60 * ((r - g) / delta + 4);
                }
                s = delta / (255 - Math.abs(2 * l - 255));
            }
            return [h, s, l];
        }
        function hslToRgb(h, s, l) {
            var c = (255 - Math.abs(2 * l - 255)) * s;
            var x = c * (1 - Math.abs(((h / 60) % 2) - 1));
            var m = l - c / 2;
            var cm = c + m;
            var xm = x + m;
            if (h < 60) {
                return [cm, xm, m];
            }
            else if (h < 120) {
                return [xm, cm, m];
            }
            else if (h < 180) {
                return [m, cm, xm];
            }
            else if (h < 240) {
                return [m, xm, cm];
            }
            else if (h < 300) {
                return [xm, m, cm];
            }
            else {
                return [cm, m, xm];
            }
        }
        if (offset && this.width > 0 && this.height > 0) {
            offset = ((offset % 360) + 360) % 360;
            if (this.__surface === ((_a = this._image) === null || _a === void 0 ? void 0 : _a.asSurface()))
                this._createCanvas();
            var surface = this._surface;
            var renderer = surface.renderer();
            var imageData = renderer._getImageData(0, 0, this.width, this.height);
            if (imageData) {
                var pixels = imageData.data;
                for (var i = 0; i < pixels.length; i += 4) {
                    var hsl = rgbToHsl(pixels[i + 0], pixels[i + 1], pixels[i + 2]);
                    var h = (hsl[0] + offset) % 360;
                    var s = hsl[1];
                    var l = hsl[2];
                    var rgb = hslToRgb(h, s, l);
                    pixels[i + 0] = rgb[0];
                    pixels[i + 1] = rgb[1];
                    pixels[i + 2] = rgb[2];
                }
                renderer._putImageData(imageData, 0, 0);
            }
            this._setDirty();
        }
    };
    /**
     * Applies a blur effect to the bitmap.
     *
     * @method blur
     */
    Bitmap.prototype.blur = function () {
        // for (var i = 0; i < 2; i++) {
        // 	var w = this.width;
        // 	var h = this.height;
        // 	var canvas = this._canvas;
        // 	var context = this._context;
        // 	var tempCanvas = document.createElement("canvas");
        // 	var tempContext = tempCanvas.getContext("2d");
        // 	tempCanvas.width = w + 2;
        // 	tempCanvas.height = h + 2;
        // 	tempContext.drawImage(canvas, 0, 0, w, h, 1, 1, w, h);
        // 	tempContext.drawImage(canvas, 0, 0, w, 1, 1, 0, w, 1);
        // 	tempContext.drawImage(canvas, 0, 0, 1, h, 0, 1, 1, h);
        // 	tempContext.drawImage(canvas, 0, h - 1, w, 1, 1, h + 1, w, 1);
        // 	tempContext.drawImage(canvas, w - 1, 0, 1, h, w + 1, 1, 1, h);
        // 	context.save();
        // 	context.fillStyle = "black";
        // 	context.fillRect(0, 0, w, h);
        // 	context.globalCompositeOperation = "lighter";
        // 	context.globalAlpha = 1 / 9;
        // 	for (var y = 0; y < 3; y++) {
        // 		for (var x = 0; x < 3; x++) {
        // 			context.drawImage(tempCanvas, x, y, w, h, 0, 0, w, h);
        // 		}
        // 	}
        // 	context.restore();
        // }
        // this._setDirty();
        var _a;
        var w = this.width;
        var h = this.height;
        var tempSurface = g.game.resourceFactory.createSurface(w, h);
        var tempRenderer = tempSurface.renderer();
        // 元コードと異なり上下左右 1px ずつ拡張していない。
        // 四辺 1px の明るさが 2/3 になっているが、体感目につかないので無視している。
        tempRenderer.begin();
        tempRenderer.drawImage(this._surface, 0, 0, w, h, 0, 0);
        tempRenderer.end();
        if (this.__surface === ((_a = this._image) === null || _a === void 0 ? void 0 : _a.asSurface()))
            this._createCanvas();
        var renderer = this._surface.renderer();
        renderer.save();
        renderer.fillRect(0, 0, w, h, "black");
        renderer.setCompositeOperation("lighter");
        renderer.setOpacity(1 / 9);
        for (var y = -1; y < 2; y++) {
            for (var x = -1; x < 2; x++) {
                renderer.drawImage(tempSurface, 0, 0, w, h, x, y);
            }
        }
        renderer.restore();
        this._setDirty();
    };
    /**
     * Add a callback function that will be called when the bitmap is loaded.
     *
     * @method addLoadListener
     * @param {Function} listner The callback function
     */
    Bitmap.prototype.addLoadListener = function (listner) {
        if (!this.isReady()) {
            this._loadListeners.push(listner);
        }
        else {
            listner(this);
        }
    };
    Bitmap.prototype.decode = function () {
        switch (this._loadingState) {
            case "requestCompleted":
            case "decryptCompleted":
                this._loadingState = "loaded";
                if (!this._surface)
                    this._createBaseTexture(this._image);
                this._setDirty();
                this._callLoadListeners();
                break;
            case "requesting":
            case "decrypting":
                this._decodeAfterRequest = true;
                // if (!this._loader) {
                // 	this._loader = ResourceHandler.createLoader(this._url, this._requestImage.bind(this, this._url), this._onError.bind(this));
                // 	this._image.removeEventListener("error", this._errorListener);
                // 	this._image.addEventListener("error", this._errorListener = this._loader);
                // }
                break;
            case "pending":
            case "purged":
            case "error":
                this._decodeAfterRequest = true;
                this._requestImage(this._url);
                break;
        }
    };
    Bitmap.prototype.checkDirty = function () {
        // if (this._dirty) {
        // 	this._baseTexture.update();
        // 	this._dirty = false;
        // }
    };
    Bitmap.prototype.isRequestReady = function () {
        return this._loadingState !== "pending" && this._loadingState !== "requesting" && this._loadingState !== "decrypting";
    };
    Bitmap.prototype.startRequest = function () {
        if (this._loadingState === "pending") {
            this._decodeAfterRequest = false;
            this._requestImage(this._url);
        }
    };
    Bitmap.prototype.isRequestOnly = function () {
        return !(this._decodeAfterRequest || this.isReady());
    };
    // eslint-disable-next-line @typescript-eslint/naming-convention
    Bitmap.prototype._akashic_destroy = function () {
        var _a;
        (_a = this.__surface) === null || _a === void 0 ? void 0 : _a.destroy();
        this.__surface = null;
        // NOTE 解放できない。Bitmap のライフタイムは ImageCache と ImageCache#_mustBeHeld() が握っているが、
        // これによる破棄は単に参照をクリアするだけで、解放は GC 任せになっている。(このメソッドが独自拡張であることからも読み取れるとおり)
        // 逆に言えば他の箇所から参照されていても問題ない。他方 Akashic Engine のアセットは明示的に解放するので、
        // 他の箇所からの参照が残っているとクラッシュする。FinalizationRegistry が (互換性の問題なく) 利用可能になるか、
        // 自力で全部の参照を数えない限り ImageAsset は解放できない。
        //
        // if (this._image) {
        // 	g.game._assetManager.unrefAsset(this._image);
        // 	this._image = null;
        // }
    };
    Bitmap.prototype._makeFontNameText = function () {
        return (this.fontItalic ? "Italic " : "") + this.fontSize + "px " + this.fontFace;
    };
    Bitmap.prototype._drawTextOutline = function (_text, _tx, _ty, _maxWidth) {
        // var context = this._context;
        // context.strokeStyle = this.outlineColor;
        // context.lineWidth = this.outlineWidth;
        // context.lineJoin = "round";
        // context.strokeText(text, tx, ty, maxWidth);
    };
    Bitmap.prototype._drawTextBody = function (text, tx, ty, maxWidth) {
        // var context = this._context;
        // context.fillStyle = this.textColor;
        // context.fillText(text, tx, ty, maxWidth);
        var width = this.measureTextWidth(text);
        var fontWidth = this.fontSize;
        // 文字が画面からはみ出している場合は文字とフォントの幅調整
        if (width > maxWidth) {
            fontWidth *= maxWidth / width;
            width = maxWidth;
        }
        var offset = this._textAlign === "right" ? -width : this._textAlign === "center" ? -width / 2 : 0;
        var textX = tx + offset;
        var font = getFont(this.fontSize, this.textColor, this.outlineColor);
        var renderer = this._surface.renderer();
        var glyphScaleX = fontWidth / font.size;
        var glyphScaleY = this.fontSize / font.size;
        for (var i = 0; i < text.length; i++) {
            var code = g.Util.charCodeAt(text, i);
            var glyph = font.glyphForCharacter(code);
            var glyphWidth = glyph.advanceWidth * glyphScaleX;
            if (!glyph.isSurfaceValid) {
                continue;
            }
            if (glyph.surface) {
                // 非空白文字
                renderer.save();
                renderer.opacity(this.paintOpacity / exports.MAX_PAINT_OPACITY);
                renderer.transform([
                    glyphScaleX,
                    0,
                    0,
                    glyphScaleY,
                    textX,
                    ty - this.fontSize // tyがベースライン基準なのでここで位置合わせ
                ]);
                renderer.drawImage(glyph.surface, glyph.x, glyph.y, glyph.width, glyph.height, glyph.offsetX, glyph.offsetY);
                renderer.restore();
            }
            renderer.translate(glyphWidth, 0);
        }
    };
    Bitmap.prototype._onLoad = function () {
        // this._image.removeEventListener("load", this._loadListener);
        // this._image.removeEventListener("error", this._errorListener);
        this._renewCanvas();
        switch (this._loadingState) {
            case "requesting":
                this._loadingState = "requestCompleted";
                if (this._decodeAfterRequest) {
                    this.decode();
                }
                else {
                    this._loadingState = "purged";
                    this._clearImgInstance();
                }
                break;
            case "decrypting": // 現時点で非サポート。ここにくるパスを想定しない。
                // window.URL.revokeObjectURL(this._image.src);
                this._loadingState = "decryptCompleted";
                if (this._decodeAfterRequest) {
                    this.decode();
                }
                else {
                    this._loadingState = "purged";
                    this._clearImgInstance();
                }
                break;
        }
    };
    Bitmap.prototype._requestImage = function (url) {
        // if (Bitmap._reuseImages.length !== 0) {
        // 	this._image = Bitmap._reuseImages.pop();
        // } else {
        // 	this._image = new Image();
        // }
        var _this = this;
        // if (this._decodeAfterRequest && !this._loader) {
        // 	this._loader = ResourceHandler.createLoader(url, this._requestImage.bind(this, url), this._onError.bind(this));
        // }
        // this._image = new Image();
        // this._url = url;
        // this._loadingState = "requesting";
        // if (!Decrypter.checkImgIgnore(url) && Decrypter.hasEncryptedImages) {
        // 	this._loadingState = "decrypting";
        // 	Decrypter.decryptImg(url, this);
        // } else {
        // 	this._image.src = url;
        // 	this._image.addEventListener("load", this._loadListener = Bitmap.prototype._onLoad.bind(this));
        // 	this._image.addEventListener("error", this._errorListener = this._loader || Bitmap.prototype._onError.bind(this));
        // }
        this._url = url;
        this._loadingState = "requesting";
        var aid = g.game._assetManager.resolvePatternsToAssetIds(["/assets/".concat(url)])[0];
        // ここでハンドリングしないと requestAssets メソッドの呼び出し時に例外が飛ぶ、且つ例外が飛ぶとオリジナルのコードの addEventListener("error", ...) にあたる処理と異なる動作になってしまう
        if (aid === undefined) {
            console.error("Bitmap#_requestImage(): ".concat(url, " is not found"));
            this._onError();
            return;
        }
        g.game._assetManager.requestAssets([aid], {
            _onAssetError: function (asset, error, retryCallback) {
                if (error.retriable) {
                    retryCallback(asset);
                    return;
                }
                _this._onError();
            },
            _onAssetLoad: function (asset) {
                _this._image = asset;
                _this.__surface = _this._image.asSurface();
                _this._onLoad();
            }
        });
    };
    Bitmap.prototype._createCanvas = function (width, height) {
        // this.__canvas = this.__canvas || document.createElement('canvas');
        // this.__context = this.__canvas.getContext('2d');
        var _a;
        // this.__canvas.width = Math.max(width || 0, 1);
        // this.__canvas.height = Math.max(height || 0, 1);
        // if (this._image) {
        // 	var w = Math.max(this._image.width || 0, 1);
        // 	var h = Math.max(this._image.height || 0, 1);
        // 	this.__canvas.width = w;
        // 	this.__canvas.height = h;
        // 	this._createBaseTexture(this._canvas);
        // 	this.__context.drawImage(this._image, 0, 0);
        // }
        // this._setDirty();
        (_a = this.__surface) === null || _a === void 0 ? void 0 : _a.destroy();
        if (this._image) {
            var w = Math.max(this._image.width || 0, 1);
            var h = Math.max(this._image.height || 0, 1);
            this.__surface = g.game.resourceFactory.createSurface(w, h);
            var r = this._surface.renderer();
            r.begin();
            r.drawImage(this._image.asSurface(), 0, 0, this._image.width, this._image.height, 0, 0);
            r.end();
            this._createBaseTexture(this._surface);
        }
        else {
            // NOTE canvas と異なり g.Surface はリサイズできない。すなわち元コードのように
            // g.Surface 先に生成して後から width/height を弄るわけにいかない。
            // ここでは if/else の両側で、サイズが確定してから createSurface() する。
            var w = Math.max(width || 0, 1);
            var h = Math.max(height || 0, 1);
            this.__surface = g.game.resourceFactory.createSurface(w, h);
        }
    };
    Bitmap.prototype._createBaseTexture = function (source) {
        // this.__baseTexture = new PIXI.BaseTexture(source);
        // this.__baseTexture.mipmap = false;
        // this.__baseTexture.width = source.width;
        // this.__baseTexture.height = source.height;
        // if (this._smooth) {
        // 	this._baseTexture.scaleMode = PIXI.SCALE_MODES.LINEAR;
        // } else {
        // 	this._baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;
        // }
        this._baseTexture = { width: source.width, height: source.height };
    };
    Bitmap.prototype._clearImgInstance = function () {
        // this._image.src = "";
        // this._image.onload = null;
        // this._image.onerror = null;
        // this._errorListener = null;
        // this._loadListener = null;
        // Bitmap._reuseImages.push(this._image);
        // this._image = null;
    };
    Object.defineProperty(Bitmap.prototype, "_surface", {
        //
        // We don't want to waste memory, so creating canvas is deferred.
        //
        // Object.defineProperties(Bitmap.prototype, {
        // 	_canvas: {
        // 		get: function(){
        // 			if (!this.__canvas) this._createCanvas();
        // 			return this.__canvas;
        // 		}
        // 	},
        // 	_context: {
        // 		get: function() {
        // 			if (!this.__context) this._createCanvas();
        // 			return this.__context;
        // 		}
        // 	},
        get: function () {
            if (!this.__surface)
                this._createCanvas();
            return this.__surface;
        },
        enumerable: false,
        configurable: true
    });
    // 	_baseTexture: {
    // 		get: function() {
    // 			if (!this.__baseTexture) this._createBaseTexture(this._image || this.__canvas);
    // 			return this.__baseTexture;
    // 		}
    // 	}
    // });
    Bitmap.prototype._renewCanvas = function () {
        var newImage = this._image;
        // if (newImage && this.__canvas && (this.__canvas.width < newImage.width || this.__canvas.height < newImage.height)) {
        // 	this._createCanvas();
        // }
        if (newImage && this.__surface && (this.__surface.width < this._image.width || this.__surface.height < this._image.height)) {
            this._createCanvas();
        }
    };
    Bitmap.prototype._callLoadListeners = function () {
        while (this._loadListeners.length > 0) {
            var listener = this._loadListeners.shift();
            listener(this);
        }
    };
    Bitmap.prototype._onError = function () {
        // this._image.removeEventListener("load", this._loadListener);
        // this._image.removeEventListener("error", this._errorListener);
        this._loadingState = "error";
    };
    Bitmap.prototype._setDirty = function () {
        // this._dirty = true;
    };
    return Bitmap;
}());
exports.Bitmap = Bitmap;

},{"./Graphics":14,"./Utils":28}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graphics = void 0;
var Graphics = /** @class */ (function () {
    function Graphics() {
    }
    Graphics.initialize = function (width, height, type) {
        this._width = width || 800;
        this._height = height || 600;
        this._rendererType = type || "auto";
        this._boxWidth = this._width;
        this._boxHeight = this._height;
        this._scale = 1;
        this._realScale = 1;
        this._errorShowed = false;
        this._errorPrinter = null;
        this._canvas = null;
        this._video = null;
        this._videoUnlocked = false;
        this._videoLoading = false;
        this._upperCanvas = null;
        this._renderer = null;
        this._fpsMeter = null;
        this._modeBox = null;
        this._skipCount = 0;
        this._maxSkip = 3;
        this._rendered = false;
        this._loadingImage = null;
        this._loadingCount = 0;
        this._fpsMeterToggled = false;
        this._stretchEnabled = this._defaultStretchMode();
        this._canUseDifferenceBlend = false;
        this._canUseSaturationBlend = false;
        this._hiddenCanvas = null;
        this._testCanvasBlendModes();
        this._modifyExistingElements();
        this._updateRealScale();
        this._createAllElements();
        this._disableTextSelection();
        this._disableContextMenu();
        this._setupEventHandlers();
        this._setupCssFontLoading();
    };
    Graphics._setupCssFontLoading = function () {
        // if(Graphics._cssFontLoading){
        // 	document.fonts.ready.then(function(fonts){
        // 		static _fontLoaded = fonts;
        // 	}).catch(function(error){
        // 		SceneManager.onError(error);
        // 	});
        // }
    };
    Graphics.canUseCssFontLoading = function () {
        return !!this._cssFontLoading;
    };
    Graphics.tickStart = function () {
        if (this._fpsMeter) {
            this._fpsMeter.tickStart();
        }
    };
    Graphics.tickEnd = function () {
        if (this._fpsMeter && this._rendered) {
            this._fpsMeter.tick();
        }
    };
    Graphics.render = function (_stage) {
        // キットではこのメソッドで描画処理を行わないが、不必要に並列処理のイベントをフリーズさせないためにフリーズ判定用変数の更新のみ行う
        // if (this._skipCount === 0) {
        // 	const startTime = Date.now();
        // 	if (stage) {
        // 		this._renderer.render(stage);
        // 		if (this._renderer.gl && this._renderer.gl.flush) {
        // 			this._renderer.gl.flush();
        // 		}
        // 	}
        // 	const endTime = Date.now();
        // 	const elapsed = endTime - startTime;
        // 	this._skipCount = Math.min(Math.floor(elapsed / 15), this._maxSkip);
        // 	this._rendered = true;
        // } else {
        // 	this._skipCount--;
        // 	this._rendered = false;
        // }
        this.frameCount++;
    };
    Graphics.isWebGL = function () {
        // return this._renderer && this._renderer.type === PIXI.RENDERER_TYPE.WEBGL;
        return false;
    };
    Graphics.hasWebGL = function () {
        // try {
        // 	var canvas = document.createElement('canvas');
        // 	return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
        // } catch (e) {
        // 	return false;
        // }
        return true;
    };
    Graphics.canUseDifferenceBlend = function () {
        return this._canUseDifferenceBlend;
    };
    Graphics.canUseSaturationBlend = function () {
        return this._canUseSaturationBlend;
    };
    Graphics.setLoadingImage = function (_src) {
        // this._loadingImage = new Image();
        // this._loadingImage.src = src;
    };
    Graphics.startLoading = function () {
        this._loadingCount = 0;
    };
    Graphics.updateLoading = function () {
        this._loadingCount++;
        this._paintUpperCanvas();
        // this._upperCanvas.style.opacity = 1;
    };
    Graphics.endLoading = function () {
        this._clearUpperCanvas();
        // this._upperCanvas.style.opacity = 0;
    };
    Graphics.printLoadingError = function (url) {
        if (this._errorPrinter && !this._errorShowed) {
            // this._errorPrinter.innerHTML = this._makeErrorHtml('Loading Error', 'Failed to load: ' + url);
            // var button = document.createElement('button');
            // button.innerHTML = 'Retry';
            // button.style.fontSize = '24px';
            // button.style.color = '#ffffff';
            // button.style.backgroundColor = '#000000';
            // button.onmousedown = button.ontouchstart(event) {
            // 	ResourceHandler.retry();
            // 	event.stopPropagation();
            // }
            // this._errorPrinter.appendChild(button);
            this._loadingCount = -Infinity;
            console.error("failed to load: " + url);
        }
    };
    Graphics.eraseLoadingError = function () {
        if (this._errorPrinter && !this._errorShowed) {
            this._errorPrinter.innerHTML = "";
            this.startLoading();
        }
    };
    Graphics.printError = function (name, message) {
        this._errorShowed = true;
        // if (this._errorPrinter) {
        // 	this._errorPrinter.innerHTML = this._makeErrorHtml(name, message);
        // }
        this._applyCanvasFilter();
        this._clearUpperCanvas();
        console.error("error: " + name + ", " + message);
    };
    Graphics.showFps = function () {
        if (this._fpsMeter) {
            this._fpsMeter.show();
            this._modeBox.style.opacity = 1;
        }
    };
    Graphics.hideFps = function () {
        if (this._fpsMeter) {
            this._fpsMeter.hide();
            this._modeBox.style.opacity = 0;
        }
    };
    Graphics.loadFont = function (name, _url) {
        // var style = document.createElement('style');
        // var head = document.getElementsByTagName('head');
        // var rule = '@font-face { font-family: "' + name + '"; src: url("' + url + '"); }';
        // style.type = 'text/css';
        // head.item(0).appendChild(style);
        // style.sheet.insertRule(rule, 0);
        this._createFontLoader(name);
    };
    Graphics.isFontLoaded = function (_name) {
        // if (Graphics._cssFontLoading) {
        // 	if(Graphics._fontLoaded){
        // 		return Graphics._fontLoaded.check('10px "'+name+'"');
        // 	}
        // 	return false;
        // } else {
        // 	if (!this._hiddenCanvas) {
        // 		this._hiddenCanvas = document.createElement('canvas');
        // 	}
        // 	var context = this._hiddenCanvas.getContext('2d');
        // 	var text = 'abcdefghijklmnopqrstuvwxyz';
        // 	var width1, width2;
        // 	context.font = '40px ' + name + ', sans-serif';
        // 	width1 = context.measureText(text).width;
        // 	context.font = '40px sans-serif';
        // 	width2 = context.measureText(text).width;
        // 	return width1 !== width2;
        // }
        return true;
    };
    Graphics.playVideo = function (src) {
        // this._videoLoader = ResourceHandler.createLoader(null, this._playVideo.bind(this, src), this._onVideoError.bind(this));
        this._playVideo(src);
    };
    Graphics._playVideo = function (_src) {
        // this._video.src = src;
        // this._video.onloadeddata = this._onVideoLoad.bind(this);
        // this._video.onerror = this._videoLoader;
        // this._video.onended = this._onVideoEnd.bind(this);
        // this._video.load();
        // this._videoLoading = true;
        this._videoLoading = false;
    };
    Graphics.isVideoPlaying = function () {
        return this._videoLoading || this._isVideoVisible();
    };
    Graphics.canPlayVideoType = function (type) {
        return this._video && this._video.canPlayType(type);
    };
    Graphics.setVideoVolume = function (value) {
        this._videoVolume = value;
        if (this._video) {
            this._video.volume = this._videoVolume;
        }
    };
    Graphics.pageToCanvasX = function (x) {
        // if (this._canvas) {
        // 	// const left = this._canvas.offsetLeft;
        // 	const left = 0;
        // 	return Math.round((x - left) / this._realScale);
        // } else {
        // 	return 0;
        // }
        return x;
    };
    Graphics.pageToCanvasY = function (y) {
        // if (this._canvas) {
        // 	// const top = this._canvas.offsetTop;
        // 	const top = 0;
        // 	return Math.round((y - top) / this._realScale);
        // } else {
        // 	return 0;
        // }
        return y;
    };
    Graphics.isInsideCanvas = function (x, y) {
        return x >= 0 && x < this._width && y >= 0 && y < this._height;
    };
    Graphics.callGC = function () {
        // if (Graphics.isWebGL()) {
        // 	static _renderer.textureGC.run();
        // }
    };
    Object.defineProperty(Graphics, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            if (this._width !== value) {
                this._width = value;
                this._updateAllElements();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            if (this._height !== value) {
                this._height = value;
                this._updateAllElements();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics, "boxWidth", {
        get: function () {
            return this._boxWidth;
        },
        set: function (value) {
            this._boxWidth = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics, "boxHeight", {
        get: function () {
            return this._boxHeight;
        },
        set: function (value) {
            this._boxHeight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Graphics, "scale", {
        get: function () {
            return this._scale;
        },
        set: function (value) {
            if (this._scale !== value) {
                this._scale = value;
                this._updateAllElements();
            }
        },
        enumerable: false,
        configurable: true
    });
    Graphics._createAllElements = function () {
        this._createErrorPrinter();
        this._createCanvas();
        this._createVideo();
        this._createUpperCanvas();
        this._createRenderer();
        this._createFPSMeter();
        this._createModeBox();
        this._createGameFontLoader();
    };
    Graphics._updateAllElements = function () {
        this._updateRealScale();
        this._updateErrorPrinter();
        this._updateCanvas();
        this._updateVideo();
        this._updateUpperCanvas();
        this._updateRenderer();
        this._paintUpperCanvas();
    };
    Graphics._updateRealScale = function () {
        if (this._stretchEnabled) {
            // let h = window.innerWidth / this._width;
            // let v = window.innerHeight / this._height;
            // if (h >= 1 && h - 0.01 <= 1) h = 1;
            // if (v >= 1 && v - 0.01 <= 1) v = 1;
            var h = 1;
            var v = 1;
            this._realScale = Math.min(h, v);
        }
        else {
            this._realScale = this._scale;
        }
    };
    Graphics._makeErrorHtml = function (name, message) {
        return '<font color="yellow"><b>' + name + "</b></font><br>" + '<font color="white">' + message + "</font><br>";
    };
    Graphics._defaultStretchMode = function () {
        // return Utils.isNwjs() || Utils.isMobileDevice();
        return false;
    };
    Graphics._testCanvasBlendModes = function () {
        // var canvas, context, imageData1, imageData2;
        // canvas = document.createElement('canvas');
        // canvas.width = 1;
        // canvas.height = 1;
        // context = canvas.getContext('2d');
        // context.globalCompositeOperation = 'source-over';
        // context.fillStyle = 'white';
        // context.fillRect(0, 0, 1, 1);
        // context.globalCompositeOperation = 'difference';
        // context.fillStyle = 'white';
        // context.fillRect(0, 0, 1, 1);
        // imageData1 = context.getImageData(0, 0, 1, 1);
        // context.globalCompositeOperation = 'source-over';
        // context.fillStyle = 'black';
        // context.fillRect(0, 0, 1, 1);
        // context.globalCompositeOperation = 'saturation';
        // context.fillStyle = 'white';
        // context.fillRect(0, 0, 1, 1);
        // imageData2 = context.getImageData(0, 0, 1, 1);
        // this._canUseDifferenceBlend = imageData1.data[0] === 0;
        // this._canUseSaturationBlend = imageData2.data[0] === 0;
        this._canUseDifferenceBlend = true;
        this._canUseSaturationBlend = true;
    };
    Graphics._modifyExistingElements = function () {
        // var elements = document.getElementsByTagName('*');
        // for (var i = 0; i < elements.length; i++) {
        // 	if (elements[i].style.zIndex > 0) {
        // 		elements[i].style.zIndex = 0;
        // 	}
        // }
    };
    /**
     * @static
     * @method _createErrorPrinter
     * @private
     */
    Graphics._createErrorPrinter = function () {
        // this._errorPrinter = document.createElement('p');
        // this._errorPrinter.id = 'ErrorPrinter';
        // this._updateErrorPrinter();
        // document.body.appendChild(this._errorPrinter);
    };
    /**
     * @static
     * @method _updateErrorPrinter
     * @private
     */
    Graphics._updateErrorPrinter = function () {
        // this._errorPrinter.width = this._width * 0.9;
        // this._errorPrinter.height = 40;
        // this._errorPrinter.style.textAlign = 'center';
        // this._errorPrinter.style.textShadow = '1px 1px 3px #000';
        // this._errorPrinter.style.fontSize = '20px';
        // this._errorPrinter.style.zIndex = 99;
        // this._centerElement(this._errorPrinter);
    };
    Graphics._createCanvas = function () {
        // this._canvas = document.createElement('canvas');
        // this._canvas.id = 'GameCanvas';
        // this._updateCanvas();
        // document.body.appendChild(this._canvas);
    };
    Graphics._updateCanvas = function () {
        // this._canvas.width = this._width;
        // this._canvas.height = this._height;
        // this._canvas.style.zIndex = 1;
        // this._centerElement(this._canvas);
    };
    Graphics._createVideo = function () {
        // this._video = document.createElement('video');
        // this._video.id = 'GameVideo';
        // this._video.style.opacity = 0;
        // this._video.setAttribute('playsinline', '');
        // this._video.volume = this._videoVolume;
        // this._updateVideo();
        // makeVideoPlayableInline(this._video);
        // document.body.appendChild(this._video);
    };
    /**
     * @static
     * @method _updateVideo
     * @private
     */
    Graphics._updateVideo = function () {
        this._video.width = this._width;
        this._video.height = this._height;
        this._video.style.zIndex = 2;
        this._centerElement(this._video);
    };
    Graphics._createUpperCanvas = function () {
        // this._upperCanvas = document.createElement('canvas');
        // this._upperCanvas.id = 'UpperCanvas';
        // this._updateUpperCanvas();
        // document.body.appendChild(this._upperCanvas);
    };
    Graphics._updateUpperCanvas = function () {
        // this._upperCanvas.width = this._width;
        // this._upperCanvas.height = this._height;
        // this._upperCanvas.style.zIndex = 3;
        // this._centerElement(this._upperCanvas);
    };
    Graphics._clearUpperCanvas = function () {
        // var context = this._upperCanvas.getContext('2d');
        // context.clearRect(0, 0, this._width, this._height);
    };
    /**
     * @static
     * @method _paintUpperCanvas
     * @private
     */
    Graphics._paintUpperCanvas = function () {
        // this._clearUpperCanvas();
        // if (this._loadingImage && this._loadingCount >= 20) {
        // 	var context = this._upperCanvas.getContext('2d');
        // 	var dx = (this._width - this._loadingImage.width) / 2;
        // 	var dy = (this._height - this._loadingImage.height) / 2;
        // 	var alpha = ((this._loadingCount - 20) / 30).clamp(0, 1);
        // 	context.save();
        // 	context.globalAlpha = alpha;
        // 	context.drawImage(this._loadingImage, dx, dy);
        // 	context.restore();
        // }
    };
    Graphics._createRenderer = function () {
        // PIXI.dontSayHello = true;
        // var width = this._width;
        // var height = this._height;
        // var options = { view: this._canvas };
        // try {
        // 	switch (this._rendererType) {
        // 	case 'canvas':
        // 		this._renderer = new PIXI.CanvasRenderer(width, height, options);
        // 		break;
        // 	case 'webgl':
        // 		this._renderer = new PIXI.WebGLRenderer(width, height, options);
        // 		break;
        // 	default:
        // 		this._renderer = PIXI.autoDetectRenderer(width, height, options);
        // 		break;
        // 	}
        // 	if(this._renderer && this._renderer.textureGC)
        // 		this._renderer.textureGC.maxIdle = 1;
        // } catch (e) {
        // 	this._renderer = null;
        // }
    };
    Graphics._updateRenderer = function () {
        // if (this._renderer) {
        // 	this._renderer.resize(this._width, this._height);
        // }
    };
    Graphics._createFPSMeter = function () {
        // var options = { graph: 1, decimals: 0, theme: 'transparent', toggleOn: null };
        // this._fpsMeter = new FPSMeter(options);
        // this._fpsMeter.hide();
    };
    Graphics._createModeBox = function () {
        // var box = document.createElement('div');
        // box.id = 'modeTextBack';
        // box.style.position = 'absolute';
        // box.style.left = '5px';
        // box.style.top = '5px';
        // box.style.width = '119px';
        // box.style.height = '58px';
        // box.style.background = 'rgba(0,0,0,0.2)';
        // box.style.zIndex = 9;
        // box.style.opacity = 0;
        // var text = document.createElement('div');
        // text.id = 'modeText';
        // text.style.position = 'absolute';
        // text.style.left = '0px';
        // text.style.top = '41px';
        // text.style.width = '119px';
        // text.style.fontSize = '12px';
        // text.style.fontFamily = 'monospace';
        // text.style.color = 'white';
        // text.style.textAlign = 'center';
        // text.style.textShadow = '1px 1px 0 rgba(0,0,0,0.5)';
        // text.innerHTML = this.isWebGL() ? 'WebGL mode' : 'Canvas mode';
        // document.body.appendChild(box);
        // box.appendChild(text);
        // this._modeBox = box;
    };
    /**
     * @static
     * @method _createGameFontLoader
     * @private
     */
    Graphics._createGameFontLoader = function () {
        // this._createFontLoader('GameFont');
    };
    Graphics._createFontLoader = function (_name) {
        // var div = document.createElement('div');
        // var text = document.createTextNode('.');
        // div.style.fontFamily = name;
        // div.style.fontSize = '0px';
        // div.style.color = 'transparent';
        // div.style.position = 'absolute';
        // div.style.margin = 'auto';
        // div.style.top = '0px';
        // div.style.left = '0px';
        // div.style.width = '1px';
        // div.style.height = '1px';
        // div.appendChild(text);
        // document.body.appendChild(div);
    };
    Graphics._centerElement = function (_element) {
        // var width = element.width * this._realScale;
        // var height = element.height * this._realScale;
        // element.style.position = 'absolute';
        // element.style.margin = 'auto';
        // element.style.top = 0;
        // element.style.left = 0;
        // element.style.right = 0;
        // element.style.bottom = 0;
        // element.style.width = width + 'px';
        // element.style.height = height + 'px';
    };
    Graphics._disableTextSelection = function () {
        // var body = document.body;
        // body.style.userSelect = 'none';
        // body.style.webkitUserSelect = 'none';
        // body.style.msUserSelect = 'none';
        // body.style.mozUserSelect = 'none';
    };
    Graphics._disableContextMenu = function () {
        // var elements = document.body.getElementsByTagName('*');
        // var oncontextmenu() { return false; };
        // for (var i = 0; i < elements.length; i++) {
        // 	elements[i].oncontextmenu = oncontextmenu;
        // }
    };
    Graphics._applyCanvasFilter = function () {
        // if (this._canvas) {
        // 	this._canvas.style.opacity = 0.5;
        // 	this._canvas.style.filter = 'blur(8px)';
        // 	this._canvas.style.webkitFilter = 'blur(8px)';
        // }
    };
    Graphics._onVideoLoad = function () {
        // this._video.play();
        // this._updateVisibility(true);
        // this._videoLoading = false;
    };
    Graphics._onVideoError = function () {
        // this._updateVisibility(false);
        // this._videoLoading = false;
    };
    Graphics._onVideoEnd = function () {
        // this._updateVisibility(false);
    };
    Graphics._updateVisibility = function (_videoVisible) {
        // this._video.style.opacity = videoVisible ? 1 : 0;
        // this._canvas.style.opacity = videoVisible ? 0 : 1;
    };
    /**
     * @static
     * @method _isVideoVisible
     * @return {Boolean}
     * @private
     */
    Graphics._isVideoVisible = function () {
        // return this._video.style.opacity > 0;
        return false;
    };
    /**
     * @static
     * @method _setupEventHandlers
     * @private
     */
    Graphics._setupEventHandlers = function () {
        // TODO: なんとかしてイベントハンドラを
        // window.addEventListener('resize', this._onWindowResize.bind(this));
        // document.addEventListener('keydown', this._onKeyDown.bind(this));
        // document.addEventListener('keydown', this._onTouchEnd.bind(this));
        // document.addEventListener('mousedown', this._onTouchEnd.bind(this));
        // document.addEventListener('touchend', this._onTouchEnd.bind(this));
    };
    Graphics._onWindowResize = function () {
        this._updateAllElements();
    };
    Graphics._onKeyDown = function (_event) {
        // if (!event.ctrlKey && !event.altKey) {
        // 	switch (event.keyCode) {
        // 	case 113:   // F2
        // 		event.preventDefault();
        // 		this._switchFPSMeter();
        // 		break;
        // 	case 114:   // F3
        // 		event.preventDefault();
        // 		this._switchStretchMode();
        // 		break;
        // 	case 115:   // F4
        // 		event.preventDefault();
        // 		this._switchFullScreen();
        // 		break;
        // 	}
        // }
    };
    Graphics._onTouchEnd = function (_event) {
        // if (!this._videoUnlocked) {
        // 	this._video.play();
        // 	this._videoUnlocked = true;
        // }
        // if (this._isVideoVisible() && this._video.paused) {
        // 	this._video.play();
        // }
    };
    Graphics._switchFPSMeter = function () {
        // if (this._fpsMeter.isPaused) {
        // 	this.showFps();
        // 	this._fpsMeter.showFps();
        // 	this._fpsMeterToggled = false;
        // } else if (!this._fpsMeterToggled) {
        // 	this._fpsMeter.showDuration();
        // 	this._fpsMeterToggled = true;
        // } else {
        // 	this.hideFps();
        // }
    };
    Graphics._switchStretchMode = function () {
        this._stretchEnabled = !this._stretchEnabled;
        this._updateAllElements();
    };
    Graphics._switchFullScreen = function () {
        if (this._isFullScreen()) {
            this._requestFullScreen();
        }
        else {
            this._cancelFullScreen();
        }
    };
    Graphics._isFullScreen = function () {
        // return ((document.fullScreenElement && document.fullScreenElement !== null) ||
        // 		(!document.mozFullScreen && !document.webkitFullscreenElement &&
        // 		!document.msFullscreenElement));
        return false;
    };
    Graphics._requestFullScreen = function () {
        // var element = document.body;
        // if (element.requestFullScreen) {
        // 	element.requestFullScreen();
        // } else if (element.mozRequestFullScreen) {
        // 	element.mozRequestFullScreen();
        // } else if (element.webkitRequestFullScreen) {
        // 	element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        // } else if (element.msRequestFullscreen) {
        // 	element.msRequestFullscreen();
        // }
    };
    Graphics._cancelFullScreen = function () {
        // if (document.cancelFullScreen) {
        // 	document.cancelFullScreen();
        // } else if (document.mozCancelFullScreen) {
        // 	document.mozCancelFullScreen();
        // } else if (document.webkitCancelFullScreen) {
        // 	document.webkitCancelFullScreen();
        // } else if (document.msExitFullscreen) {
        // 	document.msExitFullscreen();
        // }
    };
    Graphics._cssFontLoading = true; //  document.fonts && document.fonts.ready;
    Graphics._fontLoaded = null;
    Graphics._videoVolume = 1;
    Graphics._loadingCount = 0;
    Graphics.frameCount = 0;
    Graphics.BLEND_NORMAL = 0;
    Graphics.BLEND_ADD = 1;
    Graphics.BLEND_MULTIPLY = 2;
    Graphics.BLEND_SCREEN = 3;
    return Graphics;
}());
exports.Graphics = Graphics;

},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageCache = void 0;
var ImageCache = /** @class */ (function () {
    function ImageCache() {
        this.initialize.apply(this, arguments);
    }
    ImageCache.prototype.initialize = function () {
        this._items = {};
    };
    ImageCache.prototype.add = function (key, value) {
        this._items[key] = {
            bitmap: value,
            touch: Date.now(),
            key: key
        };
        this._truncateCache();
    };
    ImageCache.prototype.get = function (key) {
        if (this._items[key]) {
            var item = this._items[key];
            item.touch = Date.now();
            return item.bitmap;
        }
        return null;
    };
    ImageCache.prototype.reserve = function (key, value, reservationId) {
        if (!this._items[key]) {
            this._items[key] = {
                bitmap: value,
                touch: Date.now(),
                key: key
            };
        }
        this._items[key].reservationId = reservationId;
    };
    ImageCache.prototype.releaseReservation = function (reservationId) {
        var items = this._items;
        Object.keys(items)
            .map(function (key) {
            return items[key];
        })
            .forEach(function (item) {
            if (item.reservationId === reservationId) {
                delete item.reservationId;
            }
        });
    };
    ImageCache.prototype.isReady = function () {
        var items = this._items;
        return !Object.keys(items).some(function (key) {
            return !items[key].bitmap.isRequestOnly() && !items[key].bitmap.isReady();
        });
    };
    ImageCache.prototype.getErrorBitmap = function () {
        var items = this._items;
        var bitmap = null;
        if (Object.keys(items).some(function (key) {
            if (items[key].bitmap.isError()) {
                bitmap = items[key].bitmap;
                return true;
            }
            return false;
        })) {
            return bitmap;
        }
        return null;
    };
    ImageCache.prototype._truncateCache = function () {
        var items = this._items;
        var sizeLeft = ImageCache.limit;
        Object.keys(items)
            .map(function (key) {
            return items[key];
        })
            .sort(function (a, b) {
            return b.touch - a.touch;
        })
            .forEach(function (item) {
            if (sizeLeft > 0 || this._mustBeHeld(item)) {
                var bitmap = item.bitmap;
                sizeLeft -= bitmap.width * bitmap.height;
            }
            else {
                item.bitmap._akashic_destroy();
                delete items[item.key];
            }
        }.bind(this));
    };
    ImageCache.prototype._mustBeHeld = function (item) {
        // request only is weak so It's purgeable
        if (item.bitmap.isRequestOnly())
            return false;
        // reserved item must be held
        if (item.reservationId)
            return true;
        // not ready bitmap must be held (because of checking isReady())
        if (!item.bitmap.isReady())
            return true;
        // then the item may purgeable
        return false;
    };
    ImageCache.limit = 10 * 1000 * 1000;
    return ImageCache;
}());
exports.ImageCache = ImageCache;

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Input = void 0;
var Input = /** @class */ (function () {
    function Input() {
    }
    Object.defineProperty(Input, "dir4", {
        get: function () {
            return Input._dir4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input, "dir8", {
        get: function () {
            return Input._dir8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Input, "date", {
        get: function () {
            return Input._date;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Initializes the input system.
     *
     * @static
     * @method initialize
     */
    Input.initialize = function () {
        Input.clear();
        Input._wrapNwjsAlert();
        Input._setupEventHandlers();
    };
    /**
     * Clears all the input data.
     *
     * @static
     * @method clear
     */
    Input.clear = function () {
        Input._currentState = {};
        Input._previousState = {};
        Input._gamepadStates = [];
        Input._latestButton = null;
        Input._pressedTime = 0;
        Input._dir4 = 0;
        Input._dir8 = 0;
        Input._preferredAxis = "";
        Input._date = 0;
    };
    /**
     * Updates the input data.
     *
     * @static
     * @method update
     */
    Input.update = function () {
        Input._pollGamepads();
        if (Input._currentState[Input._latestButton]) {
            Input._pressedTime++;
        }
        else {
            Input._latestButton = null;
        }
        for (var _i = 0, _a = Input._currentState; _i < _a.length; _i++) {
            var name = _a[_i];
            if (Input._currentState[name] && !Input._previousState[name]) {
                Input._latestButton = name;
                Input._pressedTime = 0;
                Input._date = Date.now();
            }
            Input._previousState[name] = Input._currentState[name];
        }
        Input._updateDirection();
    };
    /**
     * Checks whether a key is currently pressed down.
     *
     * @static
     * @method isPressed
     * @param {String} keyName The mapped name of the key
     * @return {Boolean} True if the key is pressed
     */
    Input.isPressed = function (keyName) {
        if (Input._isEscapeCompatible(keyName) && Input.isPressed("escape")) {
            return true;
        }
        else {
            return !!Input._currentState[keyName];
        }
    };
    /**
     * Checks whether a key is just pressed.
     *
     * @static
     * @method isTriggered
     * @param {String} keyName The mapped name of the key
     * @return {Boolean} True if the key is triggered
     */
    Input.isTriggered = function (keyName) {
        if (Input._isEscapeCompatible(keyName) && Input.isTriggered("escape")) {
            return true;
        }
        else {
            return Input._latestButton === keyName && Input._pressedTime === 0;
        }
    };
    /**
     * Checks whether a key is just pressed or a key repeat occurred.
     *
     * @static
     * @method isRepeated
     * @param {String} keyName The mapped name of the key
     * @return {Boolean} True if the key is repeated
     */
    Input.isRepeated = function (keyName) {
        if (Input._isEscapeCompatible(keyName) && Input.isRepeated("escape")) {
            return true;
        }
        else {
            return (Input._latestButton === keyName &&
                (Input._pressedTime === 0 ||
                    (Input._pressedTime >= Input.keyRepeatWait && Input._pressedTime % Input.keyRepeatInterval === 0)));
        }
    };
    /**
     * Checks whether a key is kept depressed.
     *
     * @static
     * @method isLongPressed
     * @param {String} keyName The mapped name of the key
     * @return {Boolean} True if the key is long-pressed
     */
    Input.isLongPressed = function (keyName) {
        if (Input._isEscapeCompatible(keyName) && Input.isLongPressed("escape")) {
            return true;
        }
        else {
            return Input._latestButton === keyName && Input._pressedTime >= Input.keyRepeatWait;
        }
    };
    /**
     * @static
     * @method _wrapNwjsAlert
     * @private
     */
    Input._wrapNwjsAlert = function () {
        // if (Utils.isNwjs()) {
        //     var _alert = window.alert;
        //     window.alert = function() {
        //         var gui = require("nw.gui");
        //         var win = gui.Window.get();
        //         _alert.apply(this, arguments);
        //         win.focus();
        //         Input.clear();
        //     };
        // }
    };
    /**
     * @static
     * @method _setupEventHandlers
     * @private
     */
    Input._setupEventHandlers = function () {
        // document.addEventListener("keydown", Input._onKeyDown.bind(this));
        // document.addEventListener("keyup", Input._onKeyUp.bind(this));
        // window.addEventListener("blur", Input._onLostFocus.bind(this));
    };
    /**
     * @static
     * @method _onKeyDown
     * @param {KeyboardEvent} event
     * @private
     */
    Input._onKeyDown = function (_event) {
        // if (Input._shouldPreventDefault(event.keyCode)) {
        //     event.preventDefault();
        // }
        // if (event.keyCode === 144) {    // Numlock
        //     Input.clear();
        // }
        // var buttonName = Input.keyMapper[event.keyCode];
        // if (ResourceHandler.exists() && buttonName === "ok") {
        //     ResourceHandler.retry();
        // } else if (buttonName) {
        //     Input._currentState[buttonName] = true;
        // }
    };
    /**
     * @static
     * @method _shouldPreventDefault
     * @param {Number} keyCode
     * @private
     */
    Input._shouldPreventDefault = function (keyCode) {
        switch (keyCode) {
            case 8: // backspace
            case 33: // pageup
            case 34: // pagedown
            case 37: // left arrow
            case 38: // up arrow
            case 39: // right arrow
            case 40: // down arrow
                return true;
        }
        return false;
    };
    /**
     * @static
     * @method _onKeyUp
     * @param {KeyboardEvent} event
     * @private
     */
    Input._onKeyUp = function (event) {
        var buttonName = Input.keyMapper[event.keyCode];
        if (buttonName) {
            Input._currentState[buttonName] = false;
        }
        if (event.keyCode === 0) {
            // For QtWebEngine on OS X
            Input.clear();
        }
    };
    /**
     * @static
     * @method _onLostFocus
     * @private
     */
    Input._onLostFocus = function () {
        Input.clear();
    };
    /**
     * @static
     * @method _pollGamepads
     * @private
     */
    Input._pollGamepads = function () {
        // if (navigator.getGamepads) {
        //     var gamepads = navigator.getGamepads();
        //     if (gamepads) {
        //         for (var i = 0; i < gamepads.length; i++) {
        //             var gamepad = gamepads[i];
        //             if (gamepad && gamepad.connected) {
        //                 Input._updateGamepadState(gamepad);
        //             }
        //         }
        //     }
        // }
    };
    /**
     * @static
     * @method _updateGamepadState
     * @param {Gamepad} gamepad
     * @param {Number} index
     * @private
     */
    Input._updateGamepadState = function (gamepad) {
        var lastState = Input._gamepadStates[gamepad.index] || [];
        var newState = [];
        var buttons = gamepad.buttons;
        var axes = gamepad.axes;
        var threshold = 0.5;
        newState[12] = false;
        newState[13] = false;
        newState[14] = false;
        newState[15] = false;
        for (var i = 0; i < buttons.length; i++) {
            newState[i] = buttons[i].pressed;
        }
        if (axes[1] < -threshold) {
            newState[12] = true; // up
        }
        else if (axes[1] > threshold) {
            newState[13] = true; // down
        }
        if (axes[0] < -threshold) {
            newState[14] = true; // left
        }
        else if (axes[0] > threshold) {
            newState[15] = true; // right
        }
        for (var j = 0; j < newState.length; j++) {
            if (newState[j] !== lastState[j]) {
                var buttonName = Input.gamepadMapper[j];
                if (buttonName) {
                    Input._currentState[buttonName] = newState[j];
                }
            }
        }
        Input._gamepadStates[gamepad.index] = newState;
    };
    /**
     * @static
     * @method _updateDirection
     * @private
     */
    Input._updateDirection = function () {
        var x = Input._signX();
        var y = Input._signY();
        Input._dir8 = Input._makeNumpadDirection(x, y);
        if (x !== 0 && y !== 0) {
            if (Input._preferredAxis === "x") {
                y = 0;
            }
            else {
                x = 0;
            }
        }
        else if (x !== 0) {
            Input._preferredAxis = "y";
        }
        else if (y !== 0) {
            Input._preferredAxis = "x";
        }
        Input._dir4 = Input._makeNumpadDirection(x, y);
    };
    /**
     * @static
     * @method _signX
     * @private
     */
    Input._signX = function () {
        var x = 0;
        if (Input.isPressed("left")) {
            x--;
        }
        if (Input.isPressed("right")) {
            x++;
        }
        return x;
    };
    /**
     * @static
     * @method _signY
     * @private
     */
    Input._signY = function () {
        var y = 0;
        if (Input.isPressed("up")) {
            y--;
        }
        if (Input.isPressed("down")) {
            y++;
        }
        return y;
    };
    /**
     * @static
     * @method _makeNumpadDirection
     * @param {Number} x
     * @param {Number} y
     * @return {Number}
     * @private
     */
    Input._makeNumpadDirection = function (x, y) {
        if (x !== 0 || y !== 0) {
            return 5 - y * 3 + x;
        }
        return 0;
    };
    /**
     * @static
     * @method _isEscapeCompatible
     * @param {String} keyName
     * @return {Boolean}
     * @private
     */
    Input._isEscapeCompatible = function (keyName) {
        return keyName === "cancel" || keyName === "menu";
    };
    /**
     * The wait time of the key repeat in frames.
     *
     * @static
     * @property keyRepeatWait
     * @type Number
     */
    Input.keyRepeatWait = 24;
    /**
     * The interval of the key repeat in frames.
     *
     * @static
     * @property keyRepeatInterval
     * @type Number
     */
    Input.keyRepeatInterval = 6;
    /**
     * A hash table to convert from a virtual key code to a mapped key name.
     *
     * @static
     * @property keyMapper
     * @type Object
     */
    Input.keyMapper = {
        9: "tab",
        13: "ok",
        16: "shift",
        17: "control",
        18: "control",
        27: "escape",
        32: "ok",
        33: "pageup",
        34: "pagedown",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        45: "escape",
        81: "pageup",
        87: "pagedown",
        88: "escape",
        90: "ok",
        96: "escape",
        98: "down",
        100: "left",
        102: "right",
        104: "up",
        120: "debug" // F9
    };
    /**
     * A hash table to convert from a gamepad button to a mapped key name.
     *
     * @static
     * @property gamepadMapper
     * @type Object
     */
    Input.gamepadMapper = {
        0: "ok",
        1: "cancel",
        2: "shift",
        3: "menu",
        4: "pageup",
        5: "pagedown",
        12: "up",
        13: "down",
        14: "left",
        15: "right" // D-pad right
    };
    Input._currentState = {};
    Input._previousState = {};
    Input._gamepadStates = [];
    Input._latestButton = null;
    Input._pressedTime = 0;
    Input._dir4 = 0;
    Input._dir8 = 0;
    Input._preferredAxis = "";
    Input._date = 0;
    return Input;
}());
exports.Input = Input;

},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonEx = void 0;
/**
 * The static class that handles JSON with object information.
 *
 * @class JsonEx
 */
var JsonEx = /** @class */ (function () {
    function JsonEx() {
    }
    JsonEx._generateId = function () {
        return JsonEx._id++;
    };
    /**
     * Converts an object to a JSON string with object information.
     *
     * @static
     * @method stringify
     * @param {Object} object The object to be converted
     * @return {String} The JSON string
     */
    JsonEx.stringify = function (object) {
        var circular = [];
        JsonEx._id = 1;
        var json = JSON.stringify(JsonEx._encode(object, circular, 0));
        JsonEx._cleanMetadata(object);
        JsonEx._restoreCircularReference(circular);
        return json;
    };
    JsonEx._restoreCircularReference = function (circulars) {
        circulars.forEach(function (circular) {
            var key = circular[0];
            var value = circular[1];
            var content = circular[2];
            value[key] = content;
        });
    };
    /**
     * Parses a JSON string and reconstructs the corresponding object.
     *
     * @static
     * @method parse
     * @param {String} json The JSON string
     * @return {Object} The reconstructed object
     */
    JsonEx.parse = function (json) {
        var circular = [];
        var registry = {};
        var contents = JsonEx._decode(JSON.parse(json), circular, registry);
        JsonEx._cleanMetadata(contents);
        JsonEx._linkCircularReference(contents, circular, registry);
        return contents;
    };
    JsonEx._linkCircularReference = function (_contents, circulars, registry) {
        circulars.forEach(function (circular) {
            var key = circular[0];
            var value = circular[1];
            var id = circular[2];
            value[key] = registry[id];
        });
    };
    JsonEx._cleanMetadata = function (object) {
        if (!object)
            return;
        delete object["@"];
        delete object["@c"];
        if (typeof object === "object") {
            Object.keys(object).forEach(function (key) {
                var value = object[key];
                if (typeof value === "object") {
                    JsonEx._cleanMetadata(value);
                }
            });
        }
    };
    /**
     * Makes a deep copy of the specified object.
     *
     * @static
     * @method makeDeepCopy
     * @param {Object} object The object to be copied
     * @return {Object} The copied object
     */
    JsonEx.makeDeepCopy = function (object) {
        return JsonEx.parse(JsonEx.stringify(object));
    };
    /**
     * @static
     * @method _encode
     * @param {Object} value
     * @param {Array} circular
     * @param {Number} depth
     * @return {Object}
     * @private
     */
    JsonEx._encode = function (value, circular, depth) {
        depth = depth || 0;
        if (++depth >= JsonEx.maxDepth) {
            throw new Error("Object too deep");
        }
        var type = Object.prototype.toString.call(value);
        if (type === "[object Object]" || type === "[object Array]") {
            value["@c"] = JsonEx._generateId();
            var constructorName = JsonEx._getConstructorName(value);
            if (constructorName !== "Object" && constructorName !== "Array") {
                value["@"] = constructorName;
                JsonEx._akashicClassMap[constructorName] = value.constructor;
            }
            for (var key in value) {
                if (value.hasOwnProperty(key) && !key.match(/^@./)) {
                    if (value[key] && typeof value[key] === "object") {
                        if (value[key]["@c"]) {
                            circular.push([key, value, value[key]]);
                            value[key] = { "@r": value[key]["@c"] };
                        }
                        else {
                            value[key] = JsonEx._encode(value[key], circular, depth + 1);
                            if (Array.isArray(value[key])) {
                                // wrap array
                                circular.push([key, value, value[key]]);
                                value[key] = {
                                    "@c": value[key]["@c"],
                                    "@a": value[key]
                                };
                            }
                        }
                    }
                    else {
                        value[key] = JsonEx._encode(value[key], circular, depth + 1);
                    }
                }
            }
        }
        depth--;
        return value;
    };
    /**
     * @static
     * @method _decode
     * @param {Object} value
     * @param {Array} circular
     * @param {Object} registry
     * @return {Object}
     * @private
     */
    JsonEx._decode = function (value, circular, registry) {
        var type = Object.prototype.toString.call(value);
        if (type === "[object Object]" || type === "[object Array]") {
            registry[value["@c"]] = value;
            if (value["@"]) {
                var constructor = JsonEx._akashicClassMap[value["@"]];
                if (constructor) {
                    value = JsonEx._resetPrototype(value, constructor.prototype);
                }
            }
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    if (value[key] && value[key]["@a"]) {
                        // object is array wrapper
                        var body = value[key]["@a"];
                        body["@c"] = value[key]["@c"];
                        value[key] = body;
                    }
                    if (value[key] && value[key]["@r"]) {
                        // object is reference
                        circular.push([key, value, value[key]["@r"]]);
                    }
                    value[key] = JsonEx._decode(value[key], circular, registry);
                }
            }
        }
        return value;
    };
    /**
     * @static
     * @method _getConstructorName
     * @param {Object} value
     * @return {String}
     * @private
     */
    JsonEx._getConstructorName = function (value) {
        var name = value.constructor.name;
        if (name === undefined) {
            var func = /^\s*function\s*([A-Za-z0-9_$]*)/;
            name = func.exec(value.constructor)[1];
        }
        return name;
    };
    /**
     * @static
     * @method _resetPrototype
     * @param {Object} value
     * @param {Object} prototype
     * @return {Object}
     * @private
     */
    JsonEx._resetPrototype = function (value, prototype) {
        if (Object.setPrototypeOf !== undefined) {
            Object.setPrototypeOf(value, prototype);
        }
        else if ("__proto__" in value) {
            value.__proto__ = prototype;
        }
        else {
            var newValue = Object.create(prototype);
            for (var key in value) {
                if (value.hasOwnProperty(key)) {
                    newValue[key] = value[key];
                }
            }
            value = newValue;
        }
        return value;
    };
    /**
     * The maximum depth of objects.
     *
     * @static
     * @property maxDepth
     * @type Number
     * @default 100
     */
    JsonEx.maxDepth = 100;
    JsonEx._id = 1;
    // クラスの実体を管理するマップ。元ソースではwindowを使っていたが、ニコ生ゲームではwindowは基本使わないので
    JsonEx._akashicClassMap = {};
    return JsonEx;
}());
exports.JsonEx = JsonEx;

},{}],18:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rectangle = void 0;
var PIXI = require("../PIXI");
var Rectangle = /** @class */ (function (_super) {
    __extends(Rectangle, _super);
    function Rectangle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rectangle.emptyRectangle = new Rectangle(0, 0, 0, 0);
    return Rectangle;
}(PIXI.Rectangle));
exports.Rectangle = Rectangle;

},{"../PIXI":12}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestQueue = void 0;
var RequestQueue = /** @class */ (function () {
    function RequestQueue() {
        this.initialize();
    }
    RequestQueue.prototype.initialize = function () {
        this._queue = [];
    };
    RequestQueue.prototype.enqueue = function (key, value) {
        this._queue.push({ key: key, value: value });
    };
    RequestQueue.prototype.update = function () {
        if (this._queue.length === 0)
            return;
        var top = this._queue[0];
        if (top.value.isRequestReady()) {
            this._queue.shift();
            if (this._queue.length !== 0) {
                this._queue[0].value.startRequest();
            }
        }
        else {
            top.value.startRequest();
        }
    };
    RequestQueue.prototype.raisePriority = function (key) {
        for (var n = 0; n < this._queue.length; n++) {
            var item = this._queue[n];
            if (item.key === key) {
                this._queue.splice(n, 1);
                this._queue.unshift(item);
                break;
            }
        }
    };
    RequestQueue.prototype.clear = function () {
        this._queue.splice(0);
    };
    return RequestQueue;
}());
exports.RequestQueue = RequestQueue;

},{}],20:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenSprite = void 0;
var PIXI_1 = require("../PIXI");
var Graphics_1 = require("./Graphics");
var Utils_1 = require("./Utils");
var ScreenSprite = /** @class */ (function (_super) {
    __extends(ScreenSprite, _super);
    function ScreenSprite(blackOrWhite) {
        return _super.call(this, blackOrWhite) || this;
    }
    ScreenSprite.prototype.initialize = function (blackOrWhite) {
        _super.prototype.initialize.call(this);
        // PIXI.Container.call(this);
        // this._graphics = new PIXI.Graphics();
        // this.addChild(this._graphics);
        // ↑これは？
        // > Geometry to use, if omitted will create a new GraphicsGeometry instance
        // あとに出てくる描画処理で利用されている。
        this.opacity = 0;
        this._red = -1;
        this._green = -1;
        this._blue = -1;
        if (blackOrWhite === "black") {
            this.setBlack();
        }
        else {
            this.setWhite();
        }
        this.modified();
    };
    Object.defineProperty(ScreenSprite.prototype, "alpha", {
        get: function () {
            return this.opacity;
        },
        set: function (value) {
            this.opacity = value;
            this.modified();
        },
        enumerable: false,
        configurable: true
    });
    // ScreenSprite.YEPWarned = false;
    // ScreenSprite.warnYep = function () {
    // 	if (!ScreenSprite.YEPWarned) {
    // 		console.log("Deprecation warning. Please update YEP_CoreEngine. ScreenSprite is not a sprite, it has graphics inside.");
    // 		ScreenSprite.YEPWarned = true;
    // 	}
    // };
    // Object.defineProperty(ScreenSprite.prototype, 'anchor', {
    // 	get: function () {
    // 		ScreenSprite.warnYep();
    // 		this.scale.x = 1;
    // 		this.scale.y = 1;
    // 		return { x: 0, y: 0 };
    // 	},
    // 	set: function (value) {
    // 		this.alpha = value.clamp(0, 255) / 255;
    // 	},
    // 	configurable: true
    // });
    ScreenSprite.prototype.setBlack = function () {
        this.setColor(0, 0, 0);
    };
    ScreenSprite.prototype.setWhite = function () {
        this.setColor(255, 255, 255);
    };
    ScreenSprite.prototype.setColor = function (r, g, b) {
        if (this._red !== r || this._green !== g || this._blue !== b) {
            r = Math.min(255, Math.max(Math.round(r || 0), 0));
            g = Math.min(255, Math.max(Math.round(g || 0), 0));
            b = Math.min(255, Math.max(Math.round(b || 0), 0));
            this._red = r;
            this._green = g;
            this._blue = b;
            this._colorText = Utils_1.Utils.rgbToCssColor(r, g, b);
            // var graphics = this._graphics;
            // graphics.clear();
            // var intColor = (r << 16) | (g << 8) | b;
            // graphics.beginFill(intColor, 1);
            // //whole screen with zoom. BWAHAHAHAHA
            // graphics.drawRect(-Graphics.width * 5, -Graphics.height * 5, Graphics.width * 10, Graphics.height * 10);
            this.width = Graphics_1.Graphics.width;
            this.height = Graphics_1.Graphics.height;
            this.modified();
        }
    };
    ScreenSprite.prototype.renderSelf = function (renderer, _camera) {
        renderer.fillRect(0, 0, this.width, this.height, this._colorText);
        return true;
    };
    return ScreenSprite;
}(PIXI_1.Container));
exports.ScreenSprite = ScreenSprite;

},{"../PIXI":12,"./Graphics":14,"./Utils":28}],21:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite = void 0;
var PIXI = require("../PIXI");
var Rectangle_1 = require("./Rectangle");
var Utils_1 = require("./Utils");
// export interface SpriteParameterObject extends PIXI.ContainerParameterObject {
// 	bitmap?: Bitmap;
// }
var Sprite = /** @class */ (function (_super) {
    __extends(Sprite, _super);
    function Sprite() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // Spriteの初期化前はgetter/setterが処理をスキップするためのフラグ。
        // 親コンストラクタがgetter/setterにアクセスするため。
        // this._constructed = true;
        // 初期化処理は生成されるクラスが起動し、各クラスのinitializeが親クラスのinitializeを呼び出す。
        // そのためこのように自身が生成されたクラスそのものであるか確認する。
        // if (Object.getPrototypeOf(this) === Sprite.prototype) {
        // 	this.initialize(bitmap);
        // }
    }
    Object.defineProperty(Sprite.prototype, "anchor", {
        // _renderCanvas_PIXI = PIXI.Sprite.prototype._renderCanvas;
        // _renderWebGL_PIXI = PIXI.Sprite.prototype._renderWebGL;
        // see: http://pixijs.download/dev/docs/PIXI.Sprite.html#anchor
        get: function () {
            return this._anchor;
        },
        set: function (value) {
            this._anchor.set(value.x, value.y);
        },
        enumerable: false,
        configurable: true
    });
    // NOTE: 派生クラスの initialize() の引数がとても自由なのでこのようにする
    Sprite.prototype.initialize = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        _super.prototype.initialize.call(this, args);
        var bitmap = args[0];
        // var texture = new PIXI.Texture(new PIXI.BaseTexture());
        // PIXI.Sprite.call(this, texture);
        this.texture = new PIXI.Texture();
        this._bitmap = null;
        this._frame = new Rectangle_1.Rectangle();
        this._realFrame = new Rectangle_1.Rectangle();
        this._blendColor = [0, 0, 0, 0];
        this._colorTone = [0, 0, 0, 0];
        this._canvas = null;
        this._context = null;
        this._tintTexture = null;
        this._isPicture = false;
        this.spriteId = Sprite._counter++;
        this.opaque = false;
        this.bitmap = bitmap;
        this._anchor = new PIXI.ObservablePoint(function (subject) {
            _this.pixiEntity.anchorX = subject.x;
            _this.pixiEntity.anchorY = subject.y;
            _this.modified();
        });
        // pixiEntityに伝搬
        this.anchor.x = 0;
        this.anchor.y = 0;
    };
    Object.defineProperty(Sprite.prototype, "bitmap", {
        get: function () {
            return this._bitmap;
        },
        set: function (value) {
            if (this._bitmap !== value) {
                this._bitmap = value;
                if (value) {
                    this._refreshFrame = true;
                    value.addLoadListener(this._onBitmapLoad.bind(this));
                }
                else {
                    this._refreshFrame = false;
                    // TODO: 空の矩形を描画できるようにする
                    // this.texture.frame = Rectangle.emptyRectangle;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "width", {
        get: function () {
            this._frame = this._frame || new Rectangle_1.Rectangle();
            return this._frame.width;
        },
        set: function (value) {
            this._frame = this._frame || new Rectangle_1.Rectangle();
            this._frame.width = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "height", {
        get: function () {
            this._frame = this._frame || new Rectangle_1.Rectangle();
            return this._frame.height;
        },
        set: function (value) {
            this._frame = this._frame || new Rectangle_1.Rectangle();
            this._frame.height = value;
            this._refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Sprite.prototype, "surface", {
        get: function () {
            if (this._surface) {
                return this._surface;
            }
            else if (this.bitmap && this.bitmap.isReady()) {
                return this.bitmap.surface;
            }
            else {
                return null;
            }
        },
        enumerable: false,
        configurable: true
    });
    // TilingSprite が４つ引数を持つので
    // TilingSprite.prototype = Object.create(PIXI.extras.PictureTilingSprite.prototype);
    Sprite.prototype.move = function (x, y, _width, _height) {
        this.x = x;
        this.y = y;
        this.pixiEntity.modified();
    };
    Sprite.prototype.setFrame = function (x, y, width, height) {
        this._refreshFrame = false;
        var frame = this._frame;
        if (x !== frame.x || y !== frame.y || width !== frame.width || height !== frame.height) {
            frame.x = x;
            frame.y = y;
            frame.width = width;
            frame.height = height;
            this._refresh();
        }
    };
    Sprite.prototype.getBlendColor = function () {
        return JSON.parse(JSON.stringify(this._blendColor));
    };
    Sprite.prototype.setBlendColor = function (color) {
        if (!Array.isArray(color)) {
            throw new Error("Argument must be an array");
        }
        // if (!this._blendColor.equals(color)) {
        // 	this._blendColor = color.clone();
        // 	this._refresh();
        // }
        if (!Utils_1.Utils.isArrayEqual(this._blendColor, color)) {
            this._blendColor = __spreadArray([], color, true);
            this._refresh();
        }
    };
    Sprite.prototype.getColorTone = function () {
        return JSON.parse(JSON.stringify(this._colorTone));
    };
    Sprite.prototype.setColorTone = function (_tone) {
        // if (!(tone instanceof Array)) {
        // 	throw new Error('Argument must be an array');
        // }
        // if (!this._colorTone.equals(tone)) {
        // 	this._colorTone = tone.clone();
        // 	this._refresh();
        // }
    };
    Sprite.prototype._onBitmapLoad = function (bitmapLoaded) {
        if (bitmapLoaded === this._bitmap) {
            if (this._refreshFrame && this._bitmap) {
                this._refreshFrame = false;
                this._frame.width = this._bitmap.width;
                this._frame.height = this._bitmap.height;
            }
        }
        this._refresh();
    };
    Sprite.prototype._refresh = function () {
        // if (! this._constructed) {
        // 	return;
        // }
        // frame が bitmap の外にはみ出したりしたときのためにクリッピングする
        // クリッピングされた領域が realFrame となり、最終的に
        // this.texture.frame に格納される
        var frameX = Math.floor(this._frame.x);
        var frameY = Math.floor(this._frame.y);
        var frameW = Math.floor(this._frame.width);
        var frameH = Math.floor(this._frame.height);
        var bitmapW = this._bitmap ? this._bitmap.width : 0;
        var bitmapH = this._bitmap ? this._bitmap.height : 0;
        var realX = Utils_1.Utils.clamp(frameX, 0, bitmapW);
        var realY = Utils_1.Utils.clamp(frameY, 0, bitmapH);
        var realW = Utils_1.Utils.clamp(frameW - realX + frameX, 0, bitmapW - realX);
        var realH = Utils_1.Utils.clamp(frameH - realY + frameY, 0, bitmapH - realY);
        this._realFrame.x = realX;
        this._realFrame.y = realY;
        this._realFrame.width = realW;
        this._realFrame.height = realH;
        this.pivot.x = frameX - realX;
        this.pivot.y = frameY - realY;
        this._surface = null;
        if (realW > 0 && realH > 0) {
            if (this._needsTint()) {
                this._createTinter(realW, realH);
                this._executeTint(realX, realY, realW, realH);
                // 描画時に参照する surface を切り替える対応が `get surface()` で行われるため、`this.texture.baseTexture` の差し替えに対応する処理は不要
                // this._tintTexture.update();
                // this.texture.baseTexture = this._tintTexture;
                this.texture.frame = new Rectangle_1.Rectangle(0, 0, realW, realH);
            }
            else {
                // 描画時に参照する surface を切り替える対応が `get surface()` で行われるため、`this.texture.baseTexture` の差し替えに対応する処理は不要
                // if (this._bitmap) {
                // 	this.texture.baseTexture = this._bitmap.baseTexture;
                // }
                this.texture.frame = this._realFrame;
            }
        }
        else if (this._bitmap) {
            this.texture.frame = /* PIXI.Rectangle.emptyRectangle*/ Rectangle_1.Rectangle.emptyRectangle;
        }
        else {
            this.texture.baseTexture.width = Math.max(this.texture.baseTexture.width, this._frame.x + this._frame.width);
            this.texture.baseTexture.height = Math.max(this.texture.baseTexture.height, this._frame.y + this._frame.height);
            this.texture.frame = this._frame;
            // たぶんこの大きさにリサイズしたサーフェスを用意するべき？
            this._surface = g.game.resourceFactory.createSurface(this.texture.baseTexture.width, this.texture.baseTexture.height);
        }
        this.pixiEntity.width = realW;
        this.pixiEntity.height = realH;
        this.pixiEntity.modified();
        // this.texture._updateID++;
    };
    Sprite.prototype._isInBitmapRect = function (x, y, w, h) {
        return this._bitmap && x + w > 0 && y + h > 0 && x < this._bitmap.width && y < this._bitmap.height;
    };
    Sprite.prototype._needsTint = function () {
        var tone = this._colorTone;
        return !!(tone[0] || tone[1] || tone[2] || tone[3] || this._blendColor[3] > 0);
    };
    Sprite.prototype._createTinter = function (w, h) {
        // if (!this._canvas) {
        // 	this._canvas = document.createElement('canvas');
        // 	this._context = this._canvas.getContext('2d');
        // }
        // this._canvas.width = w;
        // this._canvas.height = h;
        // if (!this._tintTexture) {
        // 	this._tintTexture = new PIXI.BaseTexture(this._canvas);
        // }
        // this._tintTexture.width = w;
        // this._tintTexture.height = h;
        // this._tintTexture.scaleMode = this._bitmap.baseTexture.scaleMode;
        if (this._surface) {
            if (this._surface.width !== w || this._surface.height !== h) {
                this._surface.destroy();
                this._surface = g.game.resourceFactory.createSurface(w, h);
            }
        }
        else {
            this._surface = g.game.resourceFactory.createSurface(w, h);
        }
    };
    /**
     * @method _executeTint
     * @param {Number} x
     * @param {Number} y
     * @param {Number} w
     * @param {Number} h
     * @private
     */
    Sprite.prototype._executeTint = function (x, y, w, h) {
        // const context = this._context;
        // const tone = this._colorTone;
        // const color = this._blendColor;
        // context.globalCompositeOperation = "copy";
        // context.drawImage(this._bitmap.canvas, x, y, w, h, 0, 0, w, h);
        var renderer = this._surface.renderer();
        renderer.begin();
        renderer.save();
        var tone = this._colorTone;
        var color = this._blendColor;
        renderer.setCompositeOperation("copy");
        renderer.drawImage(this._bitmap.surface, x, y, w, h, 0, 0);
        // if (Graphics.canUseSaturationBlend()) {
        // 	const gray = Math.max(0, tone[3]);
        // 	context.globalCompositeOperation = "saturation";
        // 	context.fillStyle = "rgba(255,255,255," + gray / 255 + ")";
        // 	context.fillRect(0, 0, w, h);
        // }
        // const r1 = Math.max(0, tone[0]);
        // const g1 = Math.max(0, tone[1]);
        // const b1 = Math.max(0, tone[2]);
        // context.globalCompositeOperation = "lighter";
        // context.fillStyle = Utils.rgbToCssColor(r1, g1, b1);
        // context.fillRect(0, 0, w, h);
        var r1 = Math.max(0, tone[0]);
        var g1 = Math.max(0, tone[1]);
        var b1 = Math.max(0, tone[2]);
        renderer.setCompositeOperation("lighter");
        var cssColor = Utils_1.Utils.rgbToCssColor(r1, g1, b1);
        renderer.fillRect(0, 0, w, h, cssColor);
        // if (Graphics.canUseDifferenceBlend()) {
        // 	context.globalCompositeOperation = "difference";
        // 	context.fillStyle = "white";
        // 	context.fillRect(0, 0, w, h);
        // 	const r2 = Math.max(0, -tone[0]);
        // 	const g2 = Math.max(0, -tone[1]);
        // 	const b2 = Math.max(0, -tone[2]);
        // 	context.globalCompositeOperation = "lighter";
        // 	context.fillStyle = Utils.rgbToCssColor(r2, g2, b2);
        // 	context.fillRect(0, 0, w, h);
        // 	context.globalCompositeOperation = "difference";
        // 	context.fillStyle = "white";
        // 	context.fillRect(0, 0, w, h);
        // }
        // const r3 = Math.max(0, color[0]);
        // const g3 = Math.max(0, color[1]);
        // const b3 = Math.max(0, color[2]);
        // const a3 = Math.max(0, color[3]);
        // context.globalCompositeOperation = "source-atop";
        // context.fillStyle = Utils.rgbToCssColor(r3, g3, b3);
        // context.globalAlpha = a3 / 255;
        // context.fillRect(0, 0, w, h);
        // context.globalCompositeOperation = "destination-in";
        // context.globalAlpha = 1;
        // context.drawImage(this._bitmap.canvas, x, y, w, h, 0, 0, w, h);
        var r3 = Math.max(0, color[0]);
        var g3 = Math.max(0, color[1]);
        var b3 = Math.max(0, color[2]);
        var a3 = Math.max(0, color[3]);
        renderer.setCompositeOperation("source-atop");
        cssColor = Utils_1.Utils.rgbToCssColor(r3, g3, b3);
        renderer.setOpacity(a3 / 255);
        renderer.fillRect(0, 0, w, h, cssColor);
        renderer.setCompositeOperation("experimental-destination-in");
        renderer.setOpacity(1);
        renderer.drawImage(this.bitmap.surface, x, y, w, h, 0, 0);
        renderer.restore();
        renderer.end();
    };
    // _renderCanvas(renderer: any) {
    // 	if (this.bitmap) {
    // 		this.bitmap.touch();
    // 	}
    // 	if (this.bitmap && !this.bitmap.isReady()) {
    // 		return;
    // 	}
    // 	// 親クラスの実装を呼び出している
    // 	if (this.texture.frame.width > 0 && this.texture.frame.height > 0) {
    // 		this._renderCanvas_PIXI(renderer);
    // 	}
    // }
    Sprite.prototype.renderSelf = function (renderer, _camera) {
        if (this.surface) {
            // NOTE: 戦闘中の敵の頭上に現れるステータスアイコンのゴミ対策
            //
            // ステータス異常がないとき img_system_IconSet.png (0, 0, 32, 32) の領域が表示される。
            // これは完全に透明な領域だが、黒い縦線が表示されるケースが有る（スライム二匹で確認）。
            // これは隣接するアイコンの黒枠が表示されたものになる（着色して確認した）。
            // Akashicではスプライトシートでは隣接する画像との間に隙間を開けることを推奨している。
            //
            // 変換行列の一部成分を整数化するとゴミが消えることを見つけたので、ここではそのように
            // して対策している。ブラウザの機能を調節用いているので、本当はご法度である。今後の課題。
            //
            // TODO: ↑なんとかする
            // const ctx = (renderer as any).context;
            // const mtrx = ctx.getTransform();
            // mtrx.e = mtrx.e | 0;
            // mtrx.f = mtrx.f | 0;
            // ctx.setTransform(mtrx);
            if (this.texture.frame.width > 0 && this.texture.frame.height > 0) {
                renderer.drawImage(this.surface, this.texture.frame.x, this.texture.frame.y, this.texture.frame.width, this.texture.frame.height, 0, 0);
            }
        }
        return true;
    };
    Sprite.prototype._speedUpCustomBlendModes = function (_renderer) {
        // var picture = renderer.plugins.picture;
        // var blend = this.blendMode;
        // if (renderer.renderingToScreen && renderer._activeRenderTarget.root) {
        // 	if (picture.drawModes[blend]) {
        // 		var stage = renderer._lastObjectRendered;
        // 		var f = stage._filters;
        // 		if (!f || !f[0]) {
        // 			setTimeout(function () {
        // 				var f = stage._filters;
        // 				if (!f || !f[0]) {
        // 					stage.filters = [Sprite.voidFilter];
        // 					stage.filterArea = new PIXI.Rectangle(0, 0, Graphics.width, Graphics.height);
        // 				}
        // 			}, 0);
        // 		}
        // 	}
        // }
    };
    Sprite._counter = 0;
    return Sprite;
}(PIXI.Container));
exports.Sprite = Sprite;

},{"../PIXI":12,"./Rectangle":18,"./Utils":28}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stage = void 0;
var hover = require("@akashic-extension/akashic-hover-plugin");
var PIXI_1 = require("../PIXI");
var Graphics_1 = require("./Graphics");
var TouchInput_1 = require("./TouchInput");
var Utils_1 = require("./Utils");
var hoverPlugin = g.game.operationPluginManager.plugins[Utils_1.Utils._akashicHoverPluginId];
if (!hoverPlugin) {
    hoverPlugin = g.game.operationPluginManager.register(hover.HoverPlugin, Utils_1.Utils._akashicHoverPluginId);
    g.game.operationPluginManager.start(Utils_1.Utils._akashicHoverPluginId);
}
// MV では Stage は Container から派生している(Scene と Sprite などとの間に区別がない)。
var Stage = /** @class */ (function () {
    function Stage() {
        if (Object.getPrototypeOf(this) === Stage.prototype) {
            this.initialize();
        }
    }
    Stage.prototype.initialize = function () {
        this.scene = new g.Scene({ game: g.game, name: this.constructor.name });
        this._root = new PIXI_1.Container();
        this.touchEntity = new g.E({
            scene: this.scene,
            width: Graphics_1.Graphics.width,
            height: Graphics_1.Graphics.height,
            touchable: true
        });
        // 互換性を保つためカーソルの見た目は従来と同じ見た目(default)にする
        var hoverableE = hover.Converter.asHoverable(this.touchEntity, { cursor: "default" });
        var isHovered = false;
        var latestHoveredPoint = null;
        hoverableE.hovered.add(function () {
            isHovered = true;
        });
        hoverableE.unhovered.add(function () {
            isHovered = false;
        });
        hoverableE.onUpdate.add(function () {
            if (!isHovered) {
                return;
            }
            // HoverPlugin は OperationPlugin のサブクラスだがそれ自体の型が公開されていないので、独自のメソッドにアクセスするためにはanyにする必要がある
            // TODO: ここのanyをなくすために、HoverPlugin側で型を用意するなどの対応が必要
            var p = hoverPlugin.getLatestHoveredPoint();
            if (p && p.x !== (latestHoveredPoint === null || latestHoveredPoint === void 0 ? void 0 : latestHoveredPoint.x) && p.y !== (latestHoveredPoint === null || latestHoveredPoint === void 0 ? void 0 : latestHoveredPoint.y)) {
                TouchInput_1.TouchInput._onMove(p.x, p.y);
                latestHoveredPoint = p;
            }
        });
        this.scene.append(this.touchEntity);
    };
    Stage.prototype.addChild = function (child) {
        this._root.addChild(child);
        this.scene.insertBefore(child.pixiEntity, this.touchEntity);
    };
    Stage.prototype.removeChild = function (child) {
        return !!this._root.removeChild(child);
    };
    return Stage;
}());
exports.Stage = Stage;

},{"../PIXI":12,"./Graphics":14,"./TouchInput":27,"./Utils":28,"@akashic-extension/akashic-hover-plugin":3}],23:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tilemap = void 0;
var PIXI_1 = require("../PIXI");
var Bitmap_1 = require("./Bitmap");
var Graphics_1 = require("./Graphics");
var Sprite_1 = require("./Sprite");
var Utils_1 = require("./Utils");
var Tilemap = /** @class */ (function (_super) {
    __extends(Tilemap, _super);
    function Tilemap() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Tilemap.prototype) {
        // 	this.initialize();
        // }
    }
    Tilemap.isVisibleTile = function (tileId) {
        return tileId > 0 && tileId < this.TILE_ID_MAX;
    };
    Tilemap.isAutotile = function (tileId) {
        return tileId >= this.TILE_ID_A1;
    };
    Tilemap.getAutotileKind = function (tileId) {
        return Math.floor((tileId - this.TILE_ID_A1) / 48);
    };
    Tilemap.getAutotileShape = function (tileId) {
        return (tileId - this.TILE_ID_A1) % 48;
    };
    Tilemap.makeAutotileId = function (kind, shape) {
        return this.TILE_ID_A1 + kind * 48 + shape;
    };
    Tilemap.isSameKindTile = function (tileID1, tileID2) {
        if (this.isAutotile(tileID1) && this.isAutotile(tileID2)) {
            return this.getAutotileKind(tileID1) === this.getAutotileKind(tileID2);
        }
        else {
            return tileID1 === tileID2;
        }
    };
    Tilemap.isTileA1 = function (tileId) {
        return tileId >= this.TILE_ID_A1 && tileId < this.TILE_ID_A2;
    };
    Tilemap.isTileA2 = function (tileId) {
        return tileId >= this.TILE_ID_A2 && tileId < this.TILE_ID_A3;
    };
    Tilemap.isTileA3 = function (tileId) {
        return tileId >= this.TILE_ID_A3 && tileId < this.TILE_ID_A4;
    };
    Tilemap.isTileA4 = function (tileId) {
        return tileId >= this.TILE_ID_A4 && tileId < this.TILE_ID_MAX;
    };
    Tilemap.isTileA5 = function (tileId) {
        return tileId >= this.TILE_ID_A5 && tileId < this.TILE_ID_A1;
    };
    Tilemap.isWaterTile = function (tileId) {
        if (this.isTileA1(tileId)) {
            return !(tileId >= this.TILE_ID_A1 + 96 && tileId < this.TILE_ID_A1 + 192);
        }
        else {
            return false;
        }
    };
    Tilemap.isWaterfallTile = function (tileId) {
        if (tileId >= this.TILE_ID_A1 + 192 && tileId < this.TILE_ID_A2) {
            return this.getAutotileKind(tileId) % 2 === 1;
        }
        else {
            return false;
        }
    };
    Tilemap.isGroundTile = function (tileId) {
        return this.isTileA1(tileId) || this.isTileA2(tileId) || this.isTileA5(tileId);
    };
    Tilemap.isShadowingTile = function (tileId) {
        return this.isTileA3(tileId) || this.isTileA4(tileId);
    };
    Tilemap.isRoofTile = function (tileId) {
        return this.isTileA3(tileId) && this.getAutotileKind(tileId) % 16 < 8;
    };
    Tilemap.isWallTopTile = function (tileId) {
        return this.isTileA4(tileId) && this.getAutotileKind(tileId) % 16 < 8;
    };
    Tilemap.isWallSideTile = function (tileId) {
        return (this.isTileA3(tileId) || this.isTileA4(tileId)) && this.getAutotileKind(tileId) % 16 >= 8;
    };
    Tilemap.isWallTile = function (tileId) {
        return this.isWallTopTile(tileId) || this.isWallSideTile(tileId);
    };
    Tilemap.isFloorTypeAutotile = function (tileId) {
        return (this.isTileA1(tileId) && !this.isWaterfallTile(tileId)) || this.isTileA2(tileId) || this.isWallTopTile(tileId);
    };
    Tilemap.isWallTypeAutotile = function (tileId) {
        return this.isRoofTile(tileId) || this.isWallSideTile(tileId);
    };
    Tilemap.isWaterfallTypeAutotile = function (tileId) {
        return this.isWaterfallTile(tileId);
    };
    Tilemap.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._margin = 20;
        this._width = Graphics_1.Graphics.width + this._margin * 2;
        this._height = Graphics_1.Graphics.height + this._margin * 2;
        this._tileWidth = 48;
        this._tileHeight = 48;
        this._mapWidth = 0;
        this._mapHeight = 0;
        this._mapData = null;
        this._layerWidth = 0;
        this._layerHeight = 0;
        this._lastTiles = [];
        this.bitmaps = [];
        this.origin = new PIXI_1.Point();
        this.flags = [];
        this.animationCount = 0;
        this.horizontalWrap = false;
        this.verticalWrap = false;
        this._initialized = true;
        this._createLayers();
        this.refresh();
    };
    Object.defineProperty(Tilemap.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            if (this._width !== value) {
                this._width = value;
                this._createLayers();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tilemap.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            if (this._height !== value) {
                this._height = value;
                this._createLayers();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tilemap.prototype, "tileWidth", {
        get: function () {
            return this._tileWidth;
        },
        set: function (value) {
            if (this._tileWidth !== value) {
                this._tileWidth = value;
                this._createLayers();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tilemap.prototype, "tileHeight", {
        get: function () {
            return this._tileHeight;
        },
        set: function (value) {
            if (this._tileHeight !== value) {
                this._tileHeight = value;
                this._createLayers();
            }
        },
        enumerable: false,
        configurable: true
    });
    Tilemap.prototype.setData = function (width, height, data) {
        this._mapWidth = width;
        this._mapHeight = height;
        this._mapData = data;
    };
    Tilemap.prototype.isReady = function () {
        for (var i = 0; i < this.bitmaps.length; i++) {
            if (this.bitmaps[i] && !this.bitmaps[i].isReady()) {
                return false;
            }
        }
        return true;
    };
    Tilemap.prototype.update = function () {
        this.animationCount++;
        this.animationFrame = Math.floor(this.animationCount / 30);
        this.children.forEach(function (child) {
            if (child.update) {
                child.update();
            }
        });
        for (var i = 0; i < this.bitmaps.length; i++) {
            if (this.bitmaps[i]) {
                this.bitmaps[i].touch();
            }
        }
    };
    Tilemap.prototype.refresh = function () {
        if (!this._initialized) {
            return;
        }
        this._lastTiles.length = 0;
    };
    Tilemap.prototype.refreshTileset = function () {
        // noting to do.
    };
    Tilemap.prototype.updateTransform = function () {
        var ox = Math.floor(this.origin.x);
        var oy = Math.floor(this.origin.y);
        var startX = Math.floor((ox - this._margin) / this._tileWidth);
        var startY = Math.floor((oy - this._margin) / this._tileHeight);
        this._updateLayerPositions(startX, startY);
        if (this._needsRepaint ||
            this._lastAnimationFrame !== this.animationFrame ||
            this._lastStartX !== startX ||
            this._lastStartY !== startY) {
            this._frameUpdated = this._lastAnimationFrame !== this.animationFrame;
            this._lastAnimationFrame = this.animationFrame;
            this._lastStartX = startX;
            this._lastStartY = startY;
            this._paintAllTiles(startX, startY);
            this._needsRepaint = false;
        }
        this._sortChildren();
        _super.prototype.updateTransform.call(this);
    };
    /**
     * @method _createLayers
     * @private
     */
    Tilemap.prototype._createLayers = function () {
        if (!this._initialized) {
            return;
        }
        var width = this._width;
        var height = this._height;
        var margin = this._margin;
        var tileCols = Math.ceil(width / this._tileWidth) + 1;
        var tileRows = Math.ceil(height / this._tileHeight) + 1;
        var layerWidth = tileCols * this._tileWidth;
        var layerHeight = tileRows * this._tileHeight;
        this._lowerBitmap = new Bitmap_1.Bitmap(layerWidth, layerHeight);
        this._upperBitmap = new Bitmap_1.Bitmap(layerWidth, layerHeight);
        this._layerWidth = layerWidth;
        this._layerHeight = layerHeight;
        /*
         * Z coordinate:
         *
         * 0 : Lower tiles
         * 1 : Lower characters
         * 3 : Normal characters
         * 4 : Upper tiles
         * 5 : Upper characters
         * 6 : Airship shadow
         * 7 : Balloon
         * 8 : Animation
         * 9 : Destination
         */
        this._lowerLayer = new Sprite_1.Sprite();
        this._lowerLayer.move(-margin, -margin, width, height);
        this._lowerLayer.z = 0;
        this._upperLayer = new Sprite_1.Sprite();
        this._upperLayer.move(-margin, -margin, width, height);
        this._upperLayer.z = 4;
        for (var i = 0; i < 4; i++) {
            this._lowerLayer.addChild(new Sprite_1.Sprite(this._lowerBitmap));
            this._upperLayer.addChild(new Sprite_1.Sprite(this._upperBitmap));
        }
        this.addChild(this._lowerLayer);
        this.addChild(this._upperLayer);
    };
    Tilemap.prototype._updateLayerPositions = function (_startX, _startY) {
        var m = this._margin;
        var ox = Math.floor(this.origin.x);
        var oy = Math.floor(this.origin.y);
        var x2 = Utils_1.Utils.mod(ox - m, this._layerWidth);
        var y2 = Utils_1.Utils.mod(oy - m, this._layerHeight);
        var w1 = this._layerWidth - x2;
        var h1 = this._layerHeight - y2;
        var w2 = this._width - w1;
        var h2 = this._height - h1;
        for (var i = 0; i < 2; i++) {
            var children = void 0;
            if (i === 0) {
                children = this._lowerLayer.children; // Spriteであること前提に見える
            }
            else {
                children = this._upperLayer.children;
            }
            children[0].move(0, 0, w1, h1);
            children[0].setFrame(x2, y2, w1, h1);
            children[1].move(w1, 0, w2, h1);
            children[1].setFrame(0, y2, w2, h1);
            children[2].move(0, h1, w1, h2);
            children[2].setFrame(x2, 0, w1, h2);
            children[3].move(w1, h1, w2, h2);
            children[3].setFrame(0, 0, w2, h2);
        }
    };
    Tilemap.prototype._paintAllTiles = function (startX, startY) {
        var tileCols = Math.ceil(this._width / this._tileWidth) + 1;
        var tileRows = Math.ceil(this._height / this._tileHeight) + 1;
        for (var y = 0; y < tileRows; y++) {
            for (var x = 0; x < tileCols; x++) {
                this._paintTiles(startX, startY, x, y);
            }
        }
    };
    Tilemap.prototype._paintTiles = function (startX, startY, x, y) {
        var tableEdgeVirtualId = 10000;
        var mx = startX + x;
        var my = startY + y;
        var dx = Utils_1.Utils.mod(mx * this._tileWidth, this._layerWidth);
        var dy = Utils_1.Utils.mod(my * this._tileHeight, this._layerHeight);
        var lx = dx / this._tileWidth;
        var ly = dy / this._tileHeight;
        var tileId0 = this._readMapData(mx, my, 0);
        var tileId1 = this._readMapData(mx, my, 1);
        var tileId2 = this._readMapData(mx, my, 2);
        var tileId3 = this._readMapData(mx, my, 3);
        var shadowBits = this._readMapData(mx, my, 4);
        var upperTileId1 = this._readMapData(mx, my - 1, 1);
        var lowerTiles = [];
        var upperTiles = [];
        if (this._isHigherTile(tileId0)) {
            upperTiles.push(tileId0);
        }
        else {
            lowerTiles.push(tileId0);
        }
        if (this._isHigherTile(tileId1)) {
            upperTiles.push(tileId1);
        }
        else {
            lowerTiles.push(tileId1);
        }
        lowerTiles.push(-shadowBits);
        if (this._isTableTile(upperTileId1) && !this._isTableTile(tileId1)) {
            if (!Tilemap.isShadowingTile(tileId0)) {
                lowerTiles.push(tableEdgeVirtualId + upperTileId1);
            }
        }
        if (this._isOverpassPosition(mx, my)) {
            upperTiles.push(tileId2);
            upperTiles.push(tileId3);
        }
        else {
            if (this._isHigherTile(tileId2)) {
                upperTiles.push(tileId2);
            }
            else {
                lowerTiles.push(tileId2);
            }
            if (this._isHigherTile(tileId3)) {
                upperTiles.push(tileId3);
            }
            else {
                lowerTiles.push(tileId3);
            }
        }
        var lastLowerTiles = this._readLastTiles(0, lx, ly);
        if (!Utils_1.Utils.equals(lowerTiles, lastLowerTiles) || (Tilemap.isTileA1(tileId0) && this._frameUpdated)) {
            this._lowerBitmap.clearRect(dx, dy, this._tileWidth, this._tileHeight);
            for (var i = 0; i < lowerTiles.length; i++) {
                var lowerTileId = lowerTiles[i];
                if (lowerTileId < 0) {
                    this._drawShadow(this._lowerBitmap, shadowBits, dx, dy);
                }
                else if (lowerTileId >= tableEdgeVirtualId) {
                    this._drawTableEdge(this._lowerBitmap, upperTileId1, dx, dy);
                }
                else {
                    this._drawTile(this._lowerBitmap, lowerTileId, dx, dy);
                }
            }
            this._writeLastTiles(0, lx, ly, lowerTiles);
        }
        var lastUpperTiles = this._readLastTiles(1, lx, ly);
        if (!Utils_1.Utils.equals(upperTiles, lastUpperTiles)) {
            this._upperBitmap.clearRect(dx, dy, this._tileWidth, this._tileHeight);
            for (var j = 0; j < upperTiles.length; j++) {
                this._drawTile(this._upperBitmap, upperTiles[j], dx, dy);
            }
            this._writeLastTiles(1, lx, ly, upperTiles);
        }
    };
    Tilemap.prototype._readLastTiles = function (i, x, y) {
        var array1 = this._lastTiles[i];
        if (array1) {
            var array2 = array1[y];
            if (array2) {
                var tiles = array2[x];
                if (tiles) {
                    return tiles;
                }
            }
        }
        return [];
    };
    /**
     * @method _writeLastTiles
     * @param {Number} i
     * @param {Number} x
     * @param {Number} y
     * @param {Array} tiles
     * @private
     */
    Tilemap.prototype._writeLastTiles = function (i, x, y, tiles) {
        var array1 = this._lastTiles[i];
        if (!array1) {
            array1 = this._lastTiles[i] = [];
        }
        var array2 = array1[y];
        if (!array2) {
            array2 = array1[y] = [];
        }
        array2[x] = tiles;
    };
    Tilemap.prototype._drawTile = function (bitmap, tileId, dx, dy) {
        if (Tilemap.isVisibleTile(tileId)) {
            if (Tilemap.isAutotile(tileId)) {
                this._drawAutotile(bitmap, tileId, dx, dy);
            }
            else {
                this._drawNormalTile(bitmap, tileId, dx, dy);
            }
        }
    };
    Tilemap.prototype._drawNormalTile = function (bitmap, tileId, dx, dy) {
        var setNumber = 0;
        if (Tilemap.isTileA5(tileId)) {
            setNumber = 4;
        }
        else {
            setNumber = 5 + Math.floor(tileId / 256);
        }
        var w = this._tileWidth;
        var h = this._tileHeight;
        var sx = ((Math.floor(tileId / 128) % 2) * 8 + (tileId % 8)) * w;
        var sy = (Math.floor((tileId % 256) / 8) % 16) * h;
        var source = this.bitmaps[setNumber];
        if (source) {
            bitmap.bltImage(source, sx, sy, w, h, dx, dy, w, h);
        }
    };
    Tilemap.prototype._drawAutotile = function (bitmap, tileId, dx, dy) {
        var autotileTable = Tilemap.FLOOR_AUTOTILE_TABLE;
        var kind = Tilemap.getAutotileKind(tileId);
        var shape = Tilemap.getAutotileShape(tileId);
        var tx = kind % 8;
        var ty = Math.floor(kind / 8);
        var bx = 0;
        var by = 0;
        var setNumber = 0;
        var isTable = false;
        if (Tilemap.isTileA1(tileId)) {
            var waterSurfaceIndex = [0, 1, 2, 1][this.animationFrame % 4];
            setNumber = 0;
            if (kind === 0) {
                bx = waterSurfaceIndex * 2;
                by = 0;
            }
            else if (kind === 1) {
                bx = waterSurfaceIndex * 2;
                by = 3;
            }
            else if (kind === 2) {
                bx = 6;
                by = 0;
            }
            else if (kind === 3) {
                bx = 6;
                by = 3;
            }
            else {
                bx = Math.floor(tx / 4) * 8;
                by = ty * 6 + (Math.floor(tx / 2) % 2) * 3;
                if (kind % 2 === 0) {
                    bx += waterSurfaceIndex * 2;
                }
                else {
                    bx += 6;
                    autotileTable = Tilemap.WATERFALL_AUTOTILE_TABLE;
                    by += this.animationFrame % 3;
                }
            }
        }
        else if (Tilemap.isTileA2(tileId)) {
            setNumber = 1;
            bx = tx * 2;
            by = (ty - 2) * 3;
            isTable = this._isTableTile(tileId);
        }
        else if (Tilemap.isTileA3(tileId)) {
            setNumber = 2;
            bx = tx * 2;
            by = (ty - 6) * 2;
            autotileTable = Tilemap.WALL_AUTOTILE_TABLE;
        }
        else if (Tilemap.isTileA4(tileId)) {
            setNumber = 3;
            bx = tx * 2;
            by = Math.floor((ty - 10) * 2.5 + (ty % 2 === 1 ? 0.5 : 0));
            if (ty % 2 === 1) {
                autotileTable = Tilemap.WALL_AUTOTILE_TABLE;
            }
        }
        var table = autotileTable[shape];
        var source = this.bitmaps[setNumber];
        if (table && source) {
            var w1 = this._tileWidth / 2;
            var h1 = this._tileHeight / 2;
            for (var i = 0; i < 4; i++) {
                var qsx = table[i][0];
                var qsy = table[i][1];
                var sx1 = (bx * 2 + qsx) * w1;
                var sy1 = (by * 2 + qsy) * h1;
                var dx1 = dx + (i % 2) * w1;
                var dy1 = dy + Math.floor(i / 2) * h1;
                if (isTable && (qsy === 1 || qsy === 5)) {
                    var qsx2 = qsx;
                    var qsy2 = 3;
                    if (qsy === 1) {
                        qsx2 = [0, 3, 2, 1][qsx];
                    }
                    var sx2 = (bx * 2 + qsx2) * w1;
                    var sy2 = (by * 2 + qsy2) * h1;
                    bitmap.bltImage(source, sx2, sy2, w1, h1, dx1, dy1, w1, h1);
                    dy1 += h1 / 2;
                    bitmap.bltImage(source, sx1, sy1, w1, h1 / 2, dx1, dy1, w1, h1 / 2);
                }
                else {
                    bitmap.bltImage(source, sx1, sy1, w1, h1, dx1, dy1, w1, h1);
                }
            }
        }
    };
    Tilemap.prototype._drawTableEdge = function (bitmap, tileId, dx, dy) {
        if (Tilemap.isTileA2(tileId)) {
            var autotileTable = Tilemap.FLOOR_AUTOTILE_TABLE;
            var kind = Tilemap.getAutotileKind(tileId);
            var shape = Tilemap.getAutotileShape(tileId);
            var tx = kind % 8;
            var ty = Math.floor(kind / 8);
            var setNumber = 1;
            var bx = tx * 2;
            var by = (ty - 2) * 3;
            var table = autotileTable[shape];
            if (table) {
                var source = this.bitmaps[setNumber];
                var w1 = this._tileWidth / 2;
                var h1 = this._tileHeight / 2;
                for (var i = 0; i < 2; i++) {
                    var qsx = table[2 + i][0];
                    var qsy = table[2 + i][1];
                    var sx1 = (bx * 2 + qsx) * w1;
                    var sy1 = (by * 2 + qsy) * h1 + h1 / 2;
                    var dx1 = dx + (i % 2) * w1;
                    var dy1 = dy + Math.floor(i / 2) * h1;
                    bitmap.bltImage(source, sx1, sy1, w1, h1 / 2, dx1, dy1, w1, h1 / 2);
                }
            }
        }
    };
    Tilemap.prototype._drawShadow = function (bitmap, shadowBits, dx, dy) {
        if (shadowBits & 0x0f) {
            var w1 = this._tileWidth / 2;
            var h1 = this._tileHeight / 2;
            var color = "rgba(0,0,0,0.5)";
            for (var i = 0; i < 4; i++) {
                if (shadowBits & (1 << i)) {
                    var dx1 = dx + (i % 2) * w1;
                    var dy1 = dy + Math.floor(i / 2) * h1;
                    bitmap.fillRect(dx1, dy1, w1, h1, color);
                }
            }
        }
    };
    Tilemap.prototype._readMapData = function (x, y, z) {
        if (this._mapData) {
            var width = this._mapWidth;
            var height = this._mapHeight;
            if (this.horizontalWrap) {
                x = Utils_1.Utils.mod(x, width);
            }
            if (this.verticalWrap) {
                y = Utils_1.Utils.mod(y, height);
            }
            if (x >= 0 && x < width && y >= 0 && y < height) {
                return this._mapData[(z * height + y) * width + x] || 0;
            }
            else {
                return 0;
            }
        }
        else {
            return 0;
        }
    };
    Tilemap.prototype._isHigherTile = function (tileId) {
        return this.flags[tileId] & 0x10;
    };
    Tilemap.prototype._isTableTile = function (tileId) {
        return Tilemap.isTileA2(tileId) && !!(this.flags[tileId] & 0x80);
    };
    Tilemap.prototype._isOverpassPosition = function (_mx, _my) {
        return false;
    };
    Tilemap.prototype._sortChildren = function () {
        this.children.sort(this._compareChildOrder.bind(this));
        var parent = this.pixiEntity;
        this.children.forEach(function (child) {
            child.pixiEntity.remove();
        });
        this.children.forEach(function (child) {
            parent.append(child.pixiEntity);
        });
    };
    Tilemap.prototype._compareChildOrder = function (a, b) {
        if (a.z !== b.z) {
            return a.z - b.z;
        }
        else if (a.y !== b.y) {
            return a.y - b.y;
        }
        else {
            return a.spriteId - b.spriteId;
        }
    };
    Tilemap.TILE_ID_B = 0;
    Tilemap.TILE_ID_C = 256;
    Tilemap.TILE_ID_D = 512;
    Tilemap.TILE_ID_E = 768;
    Tilemap.TILE_ID_A5 = 1536;
    Tilemap.TILE_ID_A1 = 2048;
    Tilemap.TILE_ID_A2 = 2816;
    Tilemap.TILE_ID_A3 = 4352;
    Tilemap.TILE_ID_A4 = 5888;
    Tilemap.TILE_ID_MAX = 8192;
    // Autotile shape number to coordinates of tileset images
    Tilemap.FLOOR_AUTOTILE_TABLE = [
        [
            [2, 4],
            [1, 4],
            [2, 3],
            [1, 3]
        ],
        [
            [2, 0],
            [1, 4],
            [2, 3],
            [1, 3]
        ],
        [
            [2, 4],
            [3, 0],
            [2, 3],
            [1, 3]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 3],
            [1, 3]
        ],
        [
            [2, 4],
            [1, 4],
            [2, 3],
            [3, 1]
        ],
        [
            [2, 0],
            [1, 4],
            [2, 3],
            [3, 1]
        ],
        [
            [2, 4],
            [3, 0],
            [2, 3],
            [3, 1]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 3],
            [3, 1]
        ],
        [
            [2, 4],
            [1, 4],
            [2, 1],
            [1, 3]
        ],
        [
            [2, 0],
            [1, 4],
            [2, 1],
            [1, 3]
        ],
        [
            [2, 4],
            [3, 0],
            [2, 1],
            [1, 3]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 1],
            [1, 3]
        ],
        [
            [2, 4],
            [1, 4],
            [2, 1],
            [3, 1]
        ],
        [
            [2, 0],
            [1, 4],
            [2, 1],
            [3, 1]
        ],
        [
            [2, 4],
            [3, 0],
            [2, 1],
            [3, 1]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 1],
            [3, 1]
        ],
        [
            [0, 4],
            [1, 4],
            [0, 3],
            [1, 3]
        ],
        [
            [0, 4],
            [3, 0],
            [0, 3],
            [1, 3]
        ],
        [
            [0, 4],
            [1, 4],
            [0, 3],
            [3, 1]
        ],
        [
            [0, 4],
            [3, 0],
            [0, 3],
            [3, 1]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 3],
            [1, 3]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 3],
            [3, 1]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 1],
            [1, 3]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 1],
            [3, 1]
        ],
        [
            [2, 4],
            [3, 4],
            [2, 3],
            [3, 3]
        ],
        [
            [2, 4],
            [3, 4],
            [2, 1],
            [3, 3]
        ],
        [
            [2, 0],
            [3, 4],
            [2, 3],
            [3, 3]
        ],
        [
            [2, 0],
            [3, 4],
            [2, 1],
            [3, 3]
        ],
        [
            [2, 4],
            [1, 4],
            [2, 5],
            [1, 5]
        ],
        [
            [2, 0],
            [1, 4],
            [2, 5],
            [1, 5]
        ],
        [
            [2, 4],
            [3, 0],
            [2, 5],
            [1, 5]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 5],
            [1, 5]
        ],
        [
            [0, 4],
            [3, 4],
            [0, 3],
            [3, 3]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 5],
            [1, 5]
        ],
        [
            [0, 2],
            [1, 2],
            [0, 3],
            [1, 3]
        ],
        [
            [0, 2],
            [1, 2],
            [0, 3],
            [3, 1]
        ],
        [
            [2, 2],
            [3, 2],
            [2, 3],
            [3, 3]
        ],
        [
            [2, 2],
            [3, 2],
            [2, 1],
            [3, 3]
        ],
        [
            [2, 4],
            [3, 4],
            [2, 5],
            [3, 5]
        ],
        [
            [2, 0],
            [3, 4],
            [2, 5],
            [3, 5]
        ],
        [
            [0, 4],
            [1, 4],
            [0, 5],
            [1, 5]
        ],
        [
            [0, 4],
            [3, 0],
            [0, 5],
            [1, 5]
        ],
        [
            [0, 2],
            [3, 2],
            [0, 3],
            [3, 3]
        ],
        [
            [0, 2],
            [1, 2],
            [0, 5],
            [1, 5]
        ],
        [
            [0, 4],
            [3, 4],
            [0, 5],
            [3, 5]
        ],
        [
            [2, 2],
            [3, 2],
            [2, 5],
            [3, 5]
        ],
        [
            [0, 2],
            [3, 2],
            [0, 5],
            [3, 5]
        ],
        [
            [0, 0],
            [1, 0],
            [0, 1],
            [1, 1]
        ]
    ];
    Tilemap.WALL_AUTOTILE_TABLE = [
        [
            [2, 2],
            [1, 2],
            [2, 1],
            [1, 1]
        ],
        [
            [0, 2],
            [1, 2],
            [0, 1],
            [1, 1]
        ],
        [
            [2, 0],
            [1, 0],
            [2, 1],
            [1, 1]
        ],
        [
            [0, 0],
            [1, 0],
            [0, 1],
            [1, 1]
        ],
        [
            [2, 2],
            [3, 2],
            [2, 1],
            [3, 1]
        ],
        [
            [0, 2],
            [3, 2],
            [0, 1],
            [3, 1]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 1],
            [3, 1]
        ],
        [
            [0, 0],
            [3, 0],
            [0, 1],
            [3, 1]
        ],
        [
            [2, 2],
            [1, 2],
            [2, 3],
            [1, 3]
        ],
        [
            [0, 2],
            [1, 2],
            [0, 3],
            [1, 3]
        ],
        [
            [2, 0],
            [1, 0],
            [2, 3],
            [1, 3]
        ],
        [
            [0, 0],
            [1, 0],
            [0, 3],
            [1, 3]
        ],
        [
            [2, 2],
            [3, 2],
            [2, 3],
            [3, 3]
        ],
        [
            [0, 2],
            [3, 2],
            [0, 3],
            [3, 3]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 3],
            [3, 3]
        ],
        [
            [0, 0],
            [3, 0],
            [0, 3],
            [3, 3]
        ]
    ];
    Tilemap.WATERFALL_AUTOTILE_TABLE = [
        [
            [2, 0],
            [1, 0],
            [2, 1],
            [1, 1]
        ],
        [
            [0, 0],
            [1, 0],
            [0, 1],
            [1, 1]
        ],
        [
            [2, 0],
            [3, 0],
            [2, 1],
            [3, 1]
        ],
        [
            [0, 0],
            [3, 0],
            [0, 1],
            [3, 1]
        ]
    ];
    return Tilemap;
}(PIXI_1.Container));
exports.Tilemap = Tilemap;

},{"../PIXI":12,"./Bitmap":13,"./Graphics":14,"./Sprite":21,"./Utils":28}],24:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TilingSprite = void 0;
var PIXI_1 = require("../PIXI");
var Sprite_1 = require("./Sprite");
var Utils_1 = require("./Utils");
// TilingSprite は本来以下のように派生したクラス。
//   PIXI.Sprite <- PIXI.extras.TilingSprite <- PIXI.extras.PictureTilingSprite <- TilingSprite
// https://pixijs.download/v4.8.1/docs/PIXI.extras.TilingSprite.html
// PictureTilingSprite は pixi-picture.js に存在するが、プラグイン名を変更した以外 TilingSprite と変わらない。
// PIXI.extras.TilingSprite, PIXI.extras.PictureTilingSprite, TilingSprite をまとめて模倣する
// http://pixijs.download/release/docs/extras_TilingSprite.js.html
var TilingSprite = /** @class */ (function (_super) {
    __extends(TilingSprite, _super);
    function TilingSprite(bitmap) {
        return _super.call(this, bitmap) || this;
    }
    TilingSprite.prototype.initialize = function (bitmap) {
        // const texture = new Texture(new BaseTexture());
        _super.prototype.initialize.call(this, bitmap);
        this._bitmap = null;
        this._width = 0;
        this._height = 0;
        this._frame = new PIXI_1.Rectangle();
        this.spriteId = Sprite_1.Sprite._counter++;
        this.tilePosition = new PIXI_1.Point();
        this.origin = new PIXI_1.Point();
        this.bitmap = bitmap;
    };
    // pixi-picture.jsをみると `PictureTilingSprite` は `TilingSprite` そのままにみえる。
    // TilingSprite.prototype._renderCanvas_PIXI = PIXI.extras.PictureTilingSprite.prototype._renderCanvas;
    // TilingSprite.prototype._renderWebGL_PIXI = PIXI.extras.PictureTilingSprite.prototype._renderWebGL;
    // _renderCanvas(renderer) {
    // 	if (this._bitmap) {
    // 		this._bitmap.touch();
    // 	}
    // 	if (this.texture.frame.width > 0 && this.texture.frame.height > 0) {
    // 		this._renderCanvas_PIXI(renderer);
    // 	}
    // }
    TilingSprite.prototype.renderSelf = function (renderer, _camera) {
        if (this._bitmap) {
            this._bitmap.touch();
        }
        // 本来０との比較だが、1x1はテクスチャが与えられないときの仮のテクスチャのサイズなので無視してみる
        if (this.texture.frame.width > 1 && this.texture.frame.height > 1) {
            // ソースを読んでみて、
            //   http://pixijs.download/release/docs/extras_TilingSprite.js.html
            // 基本的挙動はこういうものだろう、というものを実装してみる。
            // パラメータはいくつか端折っているが、本質的にこのようなものっぽい。
            // NOTE: _frame は無視している。おそらく _frame で指定された領域が
            // baseTexture のサイズに広がっているかのような挙動が正しい
            renderer.save();
            // viewPosition: 視界の左上座標
            var viewPositin = { x: -this.tilePosition.x, y: -this.tilePosition.y };
            var iw = this.bitmap.surface.width;
            var ih = this.bitmap.surface.height;
            var sx = Math.floor(viewPositin.x / iw) * iw - viewPositin.x;
            var sy = Math.floor(viewPositin.y / ih) * ih - viewPositin.y;
            // let num: number = 0;
            for (var y = sy; y < this._height; y += ih) {
                for (var x = sx; x < this._width; x += iw) {
                    renderer.drawImage(this.bitmap.surface, 0, 0, iw, ih, x, y);
                    // num++;
                }
            }
            renderer.restore();
        }
        return true;
    };
    Object.defineProperty(TilingSprite.prototype, "bitmap", {
        // _renderWebGL(renderer) {
        // 	if (this._bitmap) {
        // 		this._bitmap.touch();
        // 	}
        // 	if (this.texture.frame.width > 0 && this.texture.frame.height > 0) {
        // 		if (this._bitmap) {
        // 			this._bitmap.checkDirty();
        // 		}
        // 		this._renderWebGL_PIXI(renderer);
        // 	}
        // }
        get: function () {
            return this._bitmap;
        },
        set: function (value) {
            if (this._bitmap !== value) {
                this._bitmap = value;
                if (this._bitmap) {
                    this._bitmap.addLoadListener(this._onBitmapLoad.bind(this));
                }
                else {
                    this.texture.frame = PIXI_1.Rectangle.emptyRectangle;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TilingSprite.prototype, "opacity", {
        get: function () {
            return this.alpha * 255;
        },
        set: function (value) {
            this.alpha = Utils_1.Utils.clamp(value, 0, 255) / 255;
        },
        enumerable: false,
        configurable: true
    });
    // Containerと変わらない実装なのでコメントアウト
    // update() {
    // 	this.children.forEach(function(child) {
    // 		if (child.update) {
    // 			child.update();
    // 		}
    // 	});
    // };
    TilingSprite.prototype.move = function (x, y, width, height) {
        this.x = x || 0;
        this.y = y || 0;
        this._width = width || 0;
        this._height = height || 0;
    };
    TilingSprite.prototype.setFrame = function (x, y, width, height) {
        this._frame.x = x;
        this._frame.y = y;
        this._frame.width = width;
        this._frame.height = height;
        this._refresh();
    };
    TilingSprite.prototype.updateTransform = function () {
        this.tilePosition.x = Math.round(-this.origin.x);
        this.tilePosition.y = Math.round(-this.origin.y);
        this.updateTransformTS();
    };
    // updateTransformTS = PIXI.extras.TilingSprite.prototype.updateTransform;
    TilingSprite.prototype.updateTransformTS = function () {
        // PIXI.extras.TilingSprite は PIXI.Container そのままのはず…
        PIXI_1.Container.prototype.updateTransform.call(this);
    };
    TilingSprite.prototype._onBitmapLoad = function () {
        this.texture.baseTexture = this._bitmap.baseTexture;
        this._refresh();
    };
    TilingSprite.prototype._refresh = function () {
        var frame = this._frame.clone();
        if (frame.width === 0 && frame.height === 0 && this._bitmap) {
            frame.width = this._bitmap.width;
            frame.height = this._bitmap.height;
        }
        this.texture.frame = frame;
        // this.texture._updateID++;
        this.tilingTexture = null;
    };
    return TilingSprite;
}(Sprite_1.Sprite));
exports.TilingSprite = TilingSprite;

},{"../PIXI":12,"./Sprite":21,"./Utils":28}],25:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToneFilter = void 0;
var PIXI = require("../PIXI");
var Utils_1 = require("./Utils");
var ToneFilter = /** @class */ (function (_super) {
    __extends(ToneFilter, _super);
    function ToneFilter() {
        return _super.call(this) || this;
    }
    ToneFilter.prototype.adjustHue = function (value) {
        this.hue(value, true);
    };
    ToneFilter.prototype.adjustSaturation = function (value) {
        value = Utils_1.Utils.clamp(value || 0, -255, 255) / 255;
        this.saturate(value, true);
    };
    ToneFilter.prototype.adjustTone = function (r, g, b) {
        r = Utils_1.Utils.clamp(r || 0, -255, 255) / 255;
        g = Utils_1.Utils.clamp(g || 0, -255, 255) / 255;
        b = Utils_1.Utils.clamp(b || 0, -255, 255) / 255;
        if (r !== 0 || g !== 0 || b !== 0) {
            var matrix = [1, 0, 0, r, 0, 0, 1, 0, g, 0, 0, 0, 1, b, 0, 0, 0, 0, 1, 0];
            this._loadMatrix(matrix, true);
        }
    };
    return ToneFilter;
}(PIXI.filters.ColorMatrixFilter));
exports.ToneFilter = ToneFilter;

},{"../PIXI":12,"./Utils":28}],26:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToneSprite = void 0;
var PIXI_1 = require("../PIXI");
var Graphics_1 = require("./Graphics");
var Utils_1 = require("./Utils");
// export interface ToneSpriteParameterObject extends ContainerParameterObject {
// }
var ToneSprite = /** @class */ (function (_super) {
    __extends(ToneSprite, _super);
    function ToneSprite() {
        return _super.call(this) || this;
        // this.initialize();
    }
    ToneSprite.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.clear();
    };
    ToneSprite.prototype.clear = function () {
        this._red = 0;
        this._green = 0;
        this._blue = 0;
        this._gray = 0;
    };
    ToneSprite.prototype.setTone = function (r, g, b, gray) {
        this._red = Utils_1.Utils.clamp(Math.round(r || 0), -255, 255);
        this._green = Utils_1.Utils.clamp(Math.round(g || 0), -255, 255);
        this._blue = Utils_1.Utils.clamp(Math.round(b || 0), -255, 255);
        this._gray = Utils_1.Utils.clamp(Math.round(gray || 0), 0, 255);
    };
    // ToneSprite.prototype._renderCanvas = function(renderer) {
    ToneSprite.prototype.renderSelf = function (renderer, _camera) {
        if (this.visible) {
            // const context = renderer.context;
            // const t = this.worldTransform;
            // const r = renderer.resolution;
            // const width = Graphics.width;
            // const height = Graphics.height;
            // context.save();
            var width = Graphics_1.Graphics.width;
            var height = Graphics_1.Graphics.height;
            renderer.save();
            // context.setTransform(t.a, t.b, t.c, t.d, t.tx * r, t.ty * r);
            // transformはAkashicによって設定済みのものそのままで良いと想定
            // if (Graphics.canUseSaturationBlend() && this._gray > 0) {
            // 	context.globalCompositeOperation = "saturation";
            // 	context.globalAlpha = this._gray / 255;
            // 	context.fillStyle = "#ffffff";
            // 	context.fillRect(0, 0, width, height);
            // }
            if (Graphics_1.Graphics.canUseSaturationBlend() && this._gray > 0) {
                renderer.setCompositeOperation("saturation");
                renderer.setOpacity(this._gray / 255);
                renderer.fillRect(0, 0, width, height, "white");
            }
            // context.globalAlpha = 1;
            renderer.setOpacity(1);
            var r1 = Math.max(0, this._red);
            var g1 = Math.max(0, this._green);
            var b1 = Math.max(0, this._blue);
            // if (r1 || g1 || b1) {
            // 	context.globalCompositeOperation = "lighter";
            // 	context.fillStyle = Utils.rgbToCssColor(r1, g1, b1);
            // 	context.fillRect(0, 0, width, height);
            // }
            if (r1 || g1 || b1) {
                renderer.setCompositeOperation("lighter");
                renderer.fillRect(0, 0, width, height, Utils_1.Utils.rgbToCssColor(r1, g1, b1));
            }
            if (Graphics_1.Graphics.canUseDifferenceBlend()) {
                var r2 = Math.max(0, -this._red);
                var g2 = Math.max(0, -this._green);
                var b2 = Math.max(0, -this._blue);
                if (r2 || g2 || b2) {
                    // context.globalCompositeOperation = "difference";
                    // context.fillStyle = "#ffffff";
                    // context.fillRect(0, 0, width, height);
                    // context.globalCompositeOperation = "lighter";
                    // context.fillStyle = Utils.rgbToCssColor(r2, g2, b2);
                    // context.fillRect(0, 0, width, height);
                    // context.globalCompositeOperation = "difference";
                    // context.fillStyle = "#ffffff";
                    // context.fillRect(0, 0, width, height);
                    renderer.setCompositeOperation("difference");
                    renderer.fillRect(0, 0, width, height, "white");
                    renderer.setCompositeOperation("lighter");
                    renderer.fillRect(0, 0, width, height, Utils_1.Utils.rgbToCssColor(r2, g2, b2));
                    renderer.setCompositeOperation("difference");
                    renderer.fillRect(0, 0, width, height, "white");
                }
            }
            // context.restore();
            renderer.restore();
        }
        return true;
    };
    return ToneSprite;
}(PIXI_1.Container));
exports.ToneSprite = ToneSprite;

},{"../PIXI":12,"./Graphics":14,"./Utils":28}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TouchInput = void 0;
var Graphics_1 = require("./Graphics");
var TouchInput = /** @class */ (function () {
    function TouchInput() {
    }
    TouchInput.initialize = function () {
        this.clear();
        this._setupEventHandlers();
    };
    TouchInput.clear = function () {
        this._mousePressed = false;
        this._screenPressed = false;
        this._pressedTime = 0;
        this._events = {
            triggered: false,
            cancelled: false,
            moved: false,
            released: false,
            wheelX: 0,
            wheelY: 0
        };
        this._triggered = false;
        this._cancelled = false;
        this._moved = false;
        this._released = false;
        this._wheelX = 0;
        this._wheelY = 0;
        this._x = 0;
        this._y = 0;
        this._date = 0;
    };
    TouchInput.update = function () {
        this._triggered = this._events.triggered;
        this._cancelled = this._events.cancelled;
        this._moved = this._events.moved;
        this._released = this._events.released;
        this._wheelX = this._events.wheelX;
        this._wheelY = this._events.wheelY;
        this._events.triggered = false;
        this._events.cancelled = false;
        this._events.moved = false;
        this._events.released = false;
        this._events.wheelX = 0;
        this._events.wheelY = 0;
        if (this.isPressed()) {
            this._pressedTime++;
        }
    };
    TouchInput.isPressed = function () {
        return this._mousePressed || this._screenPressed;
    };
    TouchInput.isTriggered = function () {
        return this._triggered;
    };
    TouchInput.isRepeated = function () {
        return (this.isPressed() &&
            (this._triggered || (this._pressedTime >= this.keyRepeatWait && this._pressedTime % this.keyRepeatInterval === 0)));
    };
    TouchInput.isLongPressed = function () {
        return this.isPressed() && this._pressedTime >= this.keyRepeatWait;
    };
    TouchInput.isCancelled = function () {
        return this._cancelled;
    };
    TouchInput.isMoved = function () {
        return this._moved;
    };
    TouchInput.isReleased = function () {
        return this._released;
    };
    Object.defineProperty(TouchInput, "wheelX", {
        get: function () {
            return this._wheelX;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchInput, "wheelY", {
        get: function () {
            return this._wheelY;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchInput, "x", {
        get: function () {
            return this._x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchInput, "y", {
        get: function () {
            return this._y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TouchInput, "date", {
        get: function () {
            return this._date;
        },
        enumerable: false,
        configurable: true
    });
    TouchInput._setupEventHandlers = function (scene) {
        var _this = this;
        if (!scene) {
            return;
        }
        // var isSupportPassive = Utils.isSupportPassiveEvent();
        // document.addEventListener('mousedown', this._onMouseDown.bind(this));
        // document.addEventListener('mousemove', this._onMouseMove.bind(this));
        // document.addEventListener('mouseup', this._onMouseUp.bind(this));
        // document.addEventListener('wheel', this._onWheel.bind(this));
        // document.addEventListener('touchstart', this._onTouchStart.bind(this), isSupportPassive ? { passive: false } : false);
        // document.addEventListener('touchmove', this._onTouchMove.bind(this), isSupportPassive ? { passive: false } : false);
        // document.addEventListener('touchend', this._onTouchEnd.bind(this));
        // document.addEventListener('touchcancel', this._onTouchCancel.bind(this));
        // document.addEventListener('pointerdown', this._onPointerDown.bind(this));
        scene.onPointDownCapture.add(function (e) {
            // 右クリックの場合、キャンセル動作
            if (e.button === 2) {
                _this._onRightButtonDown(e);
            }
            else if (e.button === 1) {
                _this._onMiddleButtonDown(e);
            }
            else {
                _this._onTouchStart(e);
            }
        });
        scene.onPointMoveCapture.add(function (e) {
            // 右クリックと真ん中クリックは左クリックとは別処理にしたいので、ここでは何もしない
            if (e.button === 2 || e.button === 1) {
                return;
            }
            _this._onTouchMove(e);
        });
        scene.onPointUpCapture.add(function (e) {
            // 右クリックと真ん中クリックは左クリックとは別処理にしたいので、ここでは何もしない
            if (e.button === 2 || e.button === 1) {
                return;
            }
            _this._onTouchEnd(e);
        });
    };
    TouchInput._onMouseDown = function (event) {
        if (event.button === 0) {
            this._onLeftButtonDown(event);
        }
        else if (event.button === 1) {
            this._onMiddleButtonDown(event);
        }
        else if (event.button === 2) {
            this._onRightButtonDown(event);
        }
    };
    TouchInput._onLeftButtonDown = function (event) {
        var x = Graphics_1.Graphics.pageToCanvasX(event.point.x);
        var y = Graphics_1.Graphics.pageToCanvasY(event.point.y);
        this._mousePressed = true;
        this._pressedTime = 0;
        this._onTrigger(x, y);
    };
    TouchInput._onMiddleButtonDown = function (_event) {
        //
    };
    TouchInput._onRightButtonDown = function (event) {
        var x = Graphics_1.Graphics.pageToCanvasX(event.point.x);
        var y = Graphics_1.Graphics.pageToCanvasY(event.point.y);
        this._onCancel(x, y);
    };
    TouchInput._onMouseMove = function (event) {
        if (this._mousePressed) {
            var x = Graphics_1.Graphics.pageToCanvasX(event.point.x + event.startDelta.x);
            var y = Graphics_1.Graphics.pageToCanvasY(event.point.y + event.startDelta.y);
            this._onMove(x, y);
        }
    };
    TouchInput._onMouseUp = function (event) {
        if (event.button === 0) {
            var x = Graphics_1.Graphics.pageToCanvasX(event.point.x + event.startDelta.x);
            var y = Graphics_1.Graphics.pageToCanvasY(event.point.y + event.startDelta.y);
            this._mousePressed = false;
            this._onRelease(x, y);
        }
    };
    TouchInput._onWheel = function (event) {
        this._events.wheelX += event.deltaX;
        this._events.wheelY += event.deltaY;
        event.preventDefault();
    };
    TouchInput._onTouchStart = function (event) {
        var point = event.point;
        this._currentTouchedPointers[event.pointerId] = point;
        var x = point.x;
        var y = point.y;
        this._screenPressed = true;
        this._pressedTime = 0;
        if (Object.keys(this._currentTouchedPointers).length >= 2) {
            this._onCancel(x, y);
        }
        else {
            this._onTrigger(x, y);
        }
    };
    TouchInput._onTouchMove = function (event) {
        var point = { x: event.point.x + event.startDelta.x, y: event.point.y + event.startDelta.y };
        this._currentTouchedPointers[event.pointerId] = point;
        this._onMove(point.x, point.y);
    };
    TouchInput._onTouchEnd = function (event) {
        this._screenPressed = false;
        this._onRelease(event.point.x + event.startDelta.x, event.point.y + event.startDelta.y);
        delete this._currentTouchedPointers[event.pointerId];
    };
    TouchInput._onTouchCancel = function (_event) {
        this._screenPressed = false;
    };
    TouchInput._onPointerDown = function (event) {
        if (event.pointerType === "touch" && !event.isPrimary) {
            var x = Graphics_1.Graphics.pageToCanvasX(event.point.x);
            var y = Graphics_1.Graphics.pageToCanvasY(event.point.y);
            // For Microsoft Edge
            this._onCancel(x, y);
            event.preventDefault();
        }
    };
    TouchInput._onTrigger = function (x, y) {
        this._events.triggered = true;
        this._x = x;
        this._y = y;
        this._date = Date.now();
    };
    TouchInput._onCancel = function (x, y) {
        this._events.cancelled = true;
        this._x = x;
        this._y = y;
    };
    TouchInput._onMove = function (x, y) {
        this._events.moved = true;
        this._x = x;
        this._y = y;
    };
    TouchInput._onRelease = function (x, y) {
        this._events.released = true;
        this._x = x;
        this._y = y;
    };
    TouchInput.keyRepeatWait = 24;
    TouchInput.keyRepeatInterval = 6;
    TouchInput._currentTouchedPointers = Object.create(null);
    return TouchInput;
}());
exports.TouchInput = TouchInput;

},{"./Graphics":14}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.generateRuntimeId = function () {
        return Utils._id++;
    };
    /**
     * rgbToCssColor
     * @param r [0, 255]
     * @param g [0, 255]
     * @param b [0, 255]
     */
    Utils.rgbToCssColor = function (r, g, b) {
        r = Math.round(r);
        g = Math.round(g);
        b = Math.round(b);
        return "rgb(" + r + "," + g + "," + b + ")";
    };
    /**
     * rgbaToCssColor
     * @param r [0, 255]
     * @param g [0, 255]
     * @param b [0, 255]
     * @param a [0, 1]
     */
    Utils.rgbaToCssColor = function (r, g, b, a) {
        r = Math.round(r);
        g = Math.round(g);
        b = Math.round(b);
        return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    };
    Utils.cssToRGBColor = function (cssColor) {
        if (cssColor[0] === "#") {
            var result = cssColor
                .match(/#(..)(..)(..)/)
                .splice(1, 3)
                .map(function (v) { return parseInt(v, 16); });
            result.push(255);
            return result;
        }
        else {
            return cssColor
                .match(/rgba\((.+),\s*(.+),\s*(.+),\s*(.+)\)/)
                .splice(1, 4)
                .map(function (v) { return parseFloat(v); });
        }
    };
    Utils.isOptionValid = function (_option) {
        return false;
    };
    Utils.clamp = function (value, min, max) {
        return Math.max(min, Math.min(max, value));
    };
    Utils.format = function (str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // "%3, %2, %1".replace(/%([0-9]+)/g, (s, n) => ["A", "B", "C"][Number(n) - 1]);
        // -> "C, B, A"
        return str.replace(/%([0-9]+)/g, function (_s, n) {
            return args[Number(n) - 1] + "";
        });
    };
    Utils.padZero = function (value, length) {
        var s = String(value);
        while (s.length < length) {
            s = "0" + s;
        }
        return s;
    };
    // ファイルパスをアセット名に変換する。
    Utils.flatten = function (str) {
        return str.replace(/[/\\\!\-]/g, "_").split(".")[0];
    };
    // RPGツクール用のパスをAkashic Engine用のパスにリネーム
    Utils.assetPathOfName = function (path) {
        return "/assets/".concat(path);
    };
    Utils.randomInt = function (max) {
        return Math.floor(max * g.game.vars.random.generate());
    };
    Utils.equals = function (self, array) {
        if (!self || !array || self.length !== array.length) {
            return false;
        }
        for (var i = 0; i < self.length; i++) {
            if (Array.isArray(self[i]) && Array.isArray(array[i])) {
                if (!this.equals(self[i], array[i])) {
                    return false;
                }
            }
            else if (self[i] !== array[i]) {
                return false;
            }
        }
        return true;
    };
    Utils.cloneArray = function (array) {
        return array.slice(0);
    };
    Utils.mod = function (self, n) {
        return ((self % n) + n) % n;
    };
    Utils.contains = function (arr, element) {
        return arr.indexOf(element) >= 0;
    };
    Utils.isMobileDevice = function () {
        return false;
    };
    Utils.isArrayEqual = function (array1, array2) {
        if (array1.length !== array2.length)
            return false;
        return array1.every(function (val, index) { return val === array2[index]; });
    };
    Utils._id = 1;
    // ホバープラグインの登録番号。他のakashicプラグインとの番号被りを発生しないようにするため、100という大きめの数値を付与している
    // TODO: game.jsonで定義できるようにすべき
    Utils._akashicHoverPluginId = 100;
    return Utils;
}());
exports.Utils = Utils;

},{}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Weather = void 0;
var PIXI_1 = require("../PIXI");
var Bitmap_1 = require("./Bitmap");
var Graphics_1 = require("./Graphics");
var ScreenSprite_1 = require("./ScreenSprite");
var Sprite_1 = require("./Sprite");
var Utils_1 = require("./Utils");
// export interface WeatherParameterObject extends ContainerParameterObject {
// }
var Weather = /** @class */ (function (_super) {
    __extends(Weather, _super);
    function Weather() {
        return _super.call(this) || this;
        // this.initialize();
    }
    Weather.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        // this._width = Graphics.width;
        // this._height = Graphics.height;
        // NOTE: PIXI.Container width, height を用意していない(g.Eそのまま)。うまくいかないかも
        this.width = Graphics_1.Graphics.width;
        this.height = Graphics_1.Graphics.height;
        this._sprites = [];
        this._createBitmaps();
        this._createDimmer();
        this.type = "none";
        this.power = 0;
        this.origin = new PIXI_1.Point();
    };
    Weather.prototype.update = function () {
        this._updateDimmer();
        this._updateAllSprites();
    };
    /**
     * @method _createBitmaps
     * @private
     */
    Weather.prototype._createBitmaps = function () {
        this._rainBitmap = new Bitmap_1.Bitmap(1, 60);
        this._rainBitmap.fillAll("white");
        this._stormBitmap = new Bitmap_1.Bitmap(2, 100);
        this._stormBitmap.fillAll("white");
        this._snowBitmap = new Bitmap_1.Bitmap(9, 9);
        this._snowBitmap.drawCircle(4, 4, 4, "white");
    };
    /**
     * @method _createDimmer
     * @private
     */
    Weather.prototype._createDimmer = function () {
        this._dimmerSprite = new ScreenSprite_1.ScreenSprite();
        this._dimmerSprite.setColor(80, 80, 80);
        this.addChild(this._dimmerSprite);
    };
    /**
     * @method _updateDimmer
     * @private
     */
    Weather.prototype._updateDimmer = function () {
        this._dimmerSprite.opacity = Math.floor(this.power * 6);
    };
    /**
     * @method _updateAllSprites
     * @private
     */
    Weather.prototype._updateAllSprites = function () {
        var _this = this;
        var maxSprites = Math.floor(this.power * 10);
        while (this._sprites.length < maxSprites) {
            this._addSprite();
        }
        while (this._sprites.length > maxSprites) {
            this._removeSprite();
        }
        this._sprites.forEach(function (sprite) {
            _this._updateSprite(sprite);
            // sprite.x = sprite.ax - this.origin.x;
            // sprite.y = sprite.ay - this.origin.y;
            sprite.x = sprite.ax - _this.origin.x;
            sprite.y = sprite.ay - _this.origin.y;
        });
    };
    /**
     * @method _addSprite
     * @private
     */
    Weather.prototype._addSprite = function () {
        // const sprite = new Sprite(this.viewport);
        // NOTE: viewport はどこからも設定されない。MVのソースでもそのはず。よくわからない。
        // TODO: MVで天候を設定したフィールドを実行してデバッガで値を確認する。
        var sprite = new Sprite_1.Sprite(this.viewport);
        sprite.opacity = 0;
        this._sprites.push(sprite);
        this.addChild(sprite);
    };
    /**
     * @method _removeSprite
     * @private
     */
    Weather.prototype._removeSprite = function () {
        this.removeChild(this._sprites.pop());
    };
    /**
     * @method _updateSprite
     * @param {Sprite} sprite
     * @private
     */
    Weather.prototype._updateSprite = function (sprite) {
        switch (this.type) {
            case "rain":
                this._updateRainSprite(sprite);
                break;
            case "storm":
                this._updateStormSprite(sprite);
                break;
            case "snow":
                this._updateSnowSprite(sprite);
                break;
        }
        if (sprite.opacity < 40) {
            this._rebornSprite(sprite);
        }
    };
    /**
     * @method _updateRainSprite
     * @param {Sprite} sprite
     * @private
     */
    Weather.prototype._updateRainSprite = function (sprite) {
        sprite.bitmap = this._rainBitmap;
        sprite.rotation = Math.PI / 16;
        sprite.ax -= 6 * Math.sin(sprite.rotation);
        sprite.ay += 6 * Math.cos(sprite.rotation);
        sprite.opacity -= 6;
    };
    /**
     * @method _updateStormSprite
     * @param {Sprite} sprite
     * @private
     */
    Weather.prototype._updateStormSprite = function (sprite) {
        sprite.bitmap = this._stormBitmap;
        sprite.rotation = Math.PI / 8;
        sprite.ax -= 8 * Math.sin(sprite.rotation);
        sprite.ay += 8 * Math.cos(sprite.rotation);
        sprite.opacity -= 8;
    };
    /**
     * @method _updateSnowSprite
     * @param {Sprite} sprite
     * @private
     */
    Weather.prototype._updateSnowSprite = function (sprite) {
        sprite.bitmap = this._snowBitmap;
        sprite.rotation = Math.PI / 16;
        sprite.ax -= 3 * Math.sin(sprite.rotation);
        sprite.ay += 3 * Math.cos(sprite.rotation);
        sprite.opacity -= 3;
    };
    /**
     * @method _rebornSprite
     * @param {Sprite} sprite
     * @private
     */
    Weather.prototype._rebornSprite = function (sprite) {
        sprite.ax = Utils_1.Utils.randomInt(Graphics_1.Graphics.width + 100) - 100 + this.origin.x;
        sprite.ay = Utils_1.Utils.randomInt(Graphics_1.Graphics.height + 200) - 200 + this.origin.y;
        sprite.opacity = 160 + Utils_1.Utils.randomInt(60);
    };
    return Weather;
}(PIXI_1.Container));
exports.Weather = Weather;

},{"../PIXI":12,"./Bitmap":13,"./Graphics":14,"./ScreenSprite":20,"./Sprite":21,"./Utils":28}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window = void 0;
var PIXI = require("../PIXI");
var Bitmap_1 = require("./Bitmap");
var Rectangle_1 = require("./Rectangle");
var Sprite_1 = require("./Sprite");
var Utils_1 = require("./Utils");
var Window = /** @class */ (function (_super) {
    __extends(Window, _super);
    function Window() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Window.prototype) {
        // 	this.initialize();
        // }
    }
    Window.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        _super.prototype.initialize.call(this, _args);
        this._isWindow = true;
        this._windowskin = null;
        this._width = 0;
        this._height = 0;
        this._cursorRect = new Rectangle_1.Rectangle();
        this._openness = 255;
        this._animationCount = 0;
        this._padding = 18;
        this._margin = 4;
        this._colorTone = [0, 0, 0];
        this._windowSpriteContainer = null;
        this._windowBackSprite = null;
        this._windowCursorSprite = null;
        this._windowFrameSprite = null;
        this._windowContentsSprite = null;
        this._windowArrowSprites = [];
        this._windowPauseSignSprite = null;
        this._createAllParts();
        this.origin = { x: 0, y: 0 };
        this.active = true;
        this.downArrowVisible = false;
        this.upArrowVisible = false;
        this.pause = false;
        this._inited = true;
    };
    Object.defineProperty(Window.prototype, "windowskin", {
        get: function () {
            return this._windowskin;
        },
        set: function (value) {
            if (this._windowskin !== value) {
                this._windowskin = value;
                this._windowskin.addLoadListener(this._onWindowskinLoad.bind(this));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "contents", {
        get: function () {
            return this._windowContentsSprite.bitmap;
        },
        set: function (value) {
            this._windowContentsSprite.bitmap = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this._refreshAllParts();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            this._refreshAllParts();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            this._padding = value;
            this._refreshAllParts();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "margin", {
        get: function () {
            return this._margin;
        },
        set: function (value) {
            this._margin = value;
            this._refreshAllParts();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "opacity", {
        get: function () {
            return this._windowSpriteContainer.alpha * 255;
        },
        set: function (value) {
            this._windowSpriteContainer.alpha = Utils_1.Utils.clamp(value, 0, 255) / 255;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "backOpacity", {
        get: function () {
            return this._windowBackSprite.alpha * 255;
        },
        set: function (value) {
            this._windowBackSprite.alpha = Utils_1.Utils.clamp(value, 0, 255) / 255;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "contentsOpacity", {
        get: function () {
            return this._windowContentsSprite.alpha * 255;
        },
        set: function (value) {
            this._windowContentsSprite.alpha = Utils_1.Utils.clamp(value, 0, 255) / 255;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Window.prototype, "openness", {
        get: function () {
            return this._openness;
        },
        set: function (value) {
            if (this._openness !== value) {
                this._openness = Utils_1.Utils.clamp(value, 0, 255);
                this._windowSpriteContainer.scale.y = this._openness / 255;
                this._windowSpriteContainer.y = (this.height / 2) * (1 - this._openness / 255);
                this._windowSpriteContainer.modified();
            }
        },
        enumerable: false,
        configurable: true
    });
    Window.prototype.update = function () {
        if (this.active) {
            this._animationCount++;
        }
        this.children.forEach(function (child) {
            if (child.update) {
                child.update();
            }
        });
        // 手抜き
        this.modified();
    };
    Window.prototype.move = function (x, y, width, height) {
        this.x = x || 0;
        this.y = y || 0;
        if (this._width !== width || this._height !== height) {
            this._width = width || 0;
            this._height = height || 0;
            this._refreshAllParts();
        }
    };
    Window.prototype.isOpen = function () {
        return this._openness >= 255;
    };
    Window.prototype.isClosed = function () {
        return this._openness <= 0;
    };
    Window.prototype.setCursorRect = function (x, y, width, height) {
        var cx = Math.floor(x || 0);
        var cy = Math.floor(y || 0);
        var cw = Math.floor(width || 0);
        var ch = Math.floor(height || 0);
        var rect = this._cursorRect;
        if (rect.x !== cx || rect.y !== cy || rect.width !== cw || rect.height !== ch) {
            this._cursorRect.x = cx;
            this._cursorRect.y = cy;
            this._cursorRect.width = cw;
            this._cursorRect.height = ch;
            this._refreshCursor();
        }
    };
    Window.prototype.setTone = function (r, g, b) {
        var tone = this._colorTone;
        if (r !== tone[0] || g !== tone[1] || b !== tone[2]) {
            this._colorTone = [r, g, b];
            this._refreshBack();
        }
    };
    Window.prototype.addChildToBack = function (child) {
        var containerIndex = this.children.indexOf(this._windowSpriteContainer);
        return this.addChildAt(child, containerIndex + 1);
    };
    Window.prototype.updateTransform = function () {
        this._updateCursor();
        this._updateArrows();
        this._updatePauseSign();
        this._updateContents();
        _super.prototype.updateTransform.call(this);
    };
    /**
     * @method _createAllParts
     * @private
     */
    Window.prototype._createAllParts = function () {
        this._windowSpriteContainer = new PIXI.Container();
        this._windowBackSprite = new Sprite_1.Sprite();
        this._windowCursorSprite = new Sprite_1.Sprite();
        this._windowFrameSprite = new Sprite_1.Sprite();
        this._windowContentsSprite = new Sprite_1.Sprite();
        this._downArrowSprite = new Sprite_1.Sprite();
        this._upArrowSprite = new Sprite_1.Sprite();
        this._windowPauseSignSprite = new Sprite_1.Sprite();
        this._windowBackSprite.bitmap = new Bitmap_1.Bitmap(1, 1);
        this._windowBackSprite.alpha = 192 / 255;
        this.addChild(this._windowSpriteContainer);
        this._windowSpriteContainer.addChild(this._windowBackSprite);
        this._windowSpriteContainer.addChild(this._windowFrameSprite);
        this.addChild(this._windowCursorSprite);
        this.addChild(this._windowContentsSprite);
        this.addChild(this._downArrowSprite);
        this.addChild(this._upArrowSprite);
        this.addChild(this._windowPauseSignSprite);
    };
    /**
     * @method _onWindowskinLoad
     * @private
     */
    Window.prototype._onWindowskinLoad = function () {
        this._refreshAllParts();
    };
    /**
     * @method _refreshAllParts
     * @private
     */
    Window.prototype._refreshAllParts = function () {
        if (!this._inited) {
            return;
        }
        this._refreshBack();
        this._refreshFrame();
        this._refreshCursor();
        this._refreshContents();
        this._refreshArrows();
        this._refreshPauseSign();
    };
    /**
     * @method _refreshBack
     * @private
     */
    Window.prototype._refreshBack = function () {
        var m = this._margin;
        var w = this._width - m * 2;
        var h = this._height - m * 2;
        var bitmap = new Bitmap_1.Bitmap(w, h);
        this._windowBackSprite.bitmap = bitmap;
        this._windowBackSprite.setFrame(0, 0, w, h);
        this._windowBackSprite.move(m, m);
        if (w > 0 && h > 0 && this._windowskin) {
            var p = 96;
            bitmap.blt(this._windowskin, 0, 0, p, p, 0, 0, w, h);
            for (var y = 0; y < h; y += p) {
                for (var x = 0; x < w; x += p) {
                    bitmap.blt(this._windowskin, 0, p, p, p, x, y, p, p);
                }
            }
            var tone = this._colorTone;
            bitmap.adjustTone(tone[0], tone[1], tone[2]);
        }
    };
    /**
     * @method _refreshFrame
     * @private
     */
    Window.prototype._refreshFrame = function () {
        var w = this._width;
        var h = this._height;
        var m = 24;
        var bitmap = new Bitmap_1.Bitmap(w, h);
        this._windowFrameSprite.bitmap = bitmap;
        this._windowFrameSprite.setFrame(0, 0, w, h);
        if (w > 0 && h > 0 && this._windowskin) {
            var skin = this._windowskin;
            var p = 96;
            var q = 96;
            bitmap.blt(skin, p + m, 0 + 0, p - m * 2, m, m, 0, w - m * 2, m);
            bitmap.blt(skin, p + m, 0 + q - m, p - m * 2, m, m, h - m, w - m * 2, m);
            bitmap.blt(skin, p + 0, 0 + m, m, p - m * 2, 0, m, m, h - m * 2);
            bitmap.blt(skin, p + q - m, 0 + m, m, p - m * 2, w - m, m, m, h - m * 2);
            bitmap.blt(skin, p + 0, 0 + 0, m, m, 0, 0, m, m);
            bitmap.blt(skin, p + q - m, 0 + 0, m, m, w - m, 0, m, m);
            bitmap.blt(skin, p + 0, 0 + q - m, m, m, 0, h - m, m, m);
            bitmap.blt(skin, p + q - m, 0 + q - m, m, m, w - m, h - m, m, m);
        }
    };
    /**
     * @method _refreshCursor
     * @private
     */
    Window.prototype._refreshCursor = function () {
        var pad = this._padding;
        var x = this._cursorRect.x + pad - this.origin.x;
        var y = this._cursorRect.y + pad - this.origin.y;
        var w = this._cursorRect.width;
        var h = this._cursorRect.height;
        var m = 4;
        var x2 = Math.max(x, pad);
        var y2 = Math.max(y, pad);
        var ox = x - x2;
        var oy = y - y2;
        var w2 = Math.min(w, this._width - pad - x2);
        var h2 = Math.min(h, this._height - pad - y2);
        var bitmap = new Bitmap_1.Bitmap(w2, h2);
        this._windowCursorSprite.bitmap = bitmap;
        this._windowCursorSprite.setFrame(0, 0, w2, h2);
        this._windowCursorSprite.move(x2, y2);
        if (w > 0 && h > 0 && this._windowskin) {
            var skin = this._windowskin;
            var p = 96;
            var q = 48;
            bitmap.blt(skin, p + m, p + m, q - m * 2, q - m * 2, ox + m, oy + m, w - m * 2, h - m * 2);
            bitmap.blt(skin, p + m, p + 0, q - m * 2, m, ox + m, oy + 0, w - m * 2, m);
            bitmap.blt(skin, p + m, p + q - m, q - m * 2, m, ox + m, oy + h - m, w - m * 2, m);
            bitmap.blt(skin, p + 0, p + m, m, q - m * 2, ox + 0, oy + m, m, h - m * 2);
            bitmap.blt(skin, p + q - m, p + m, m, q - m * 2, ox + w - m, oy + m, m, h - m * 2);
            bitmap.blt(skin, p + 0, p + 0, m, m, ox + 0, oy + 0, m, m);
            bitmap.blt(skin, p + q - m, p + 0, m, m, ox + w - m, oy + 0, m, m);
            bitmap.blt(skin, p + 0, p + q - m, m, m, ox + 0, oy + h - m, m, m);
            bitmap.blt(skin, p + q - m, p + q - m, m, m, ox + w - m, oy + h - m, m, m);
        }
    };
    /**
     * @method _refreshContents
     * @private
     */
    Window.prototype._refreshContents = function () {
        this._windowContentsSprite.move(this.padding, this.padding);
    };
    /**
     * @method _refreshArrows
     * @private
     */
    Window.prototype._refreshArrows = function () {
        var w = this._width;
        var h = this._height;
        var p = 24;
        var q = p / 2;
        var sx = 96 + p;
        var sy = 0 + p;
        this._downArrowSprite.bitmap = this._windowskin;
        this._downArrowSprite.anchor.x = 0.5;
        this._downArrowSprite.anchor.y = 0.5;
        this._downArrowSprite.setFrame(sx + q, sy + q + p, p, q);
        this._downArrowSprite.move(w / 2, h - q);
        this._upArrowSprite.bitmap = this._windowskin;
        this._upArrowSprite.anchor.x = 0.5;
        this._upArrowSprite.anchor.y = 0.5;
        this._upArrowSprite.setFrame(sx + q, sy, p, q);
        this._upArrowSprite.move(w / 2, q);
        this._updateArrows(); // TODO: 本来ここで_updateArrows()を呼ぶのは妥当ではないと思われるが、不要な矢印の表示を防ぐため暫定対応としてこの処理を行う
    };
    /**
     * @method _refreshPauseSign
     * @private
     */
    Window.prototype._refreshPauseSign = function () {
        var sx = 144;
        var sy = 96;
        var p = 24;
        this._windowPauseSignSprite.bitmap = this._windowskin;
        this._windowPauseSignSprite.anchor.x = 0.5;
        this._windowPauseSignSprite.anchor.y = 1;
        this._windowPauseSignSprite.move(this._width / 2, this._height);
        this._windowPauseSignSprite.setFrame(sx, sy, p, p);
        this._windowPauseSignSprite.alpha = 0;
    };
    /**
     * @method _updateCursor
     * @private
     */
    Window.prototype._updateCursor = function () {
        var blinkCount = this._animationCount % 40;
        var cursorOpacity = this.contentsOpacity;
        if (this.active) {
            if (blinkCount < 20) {
                cursorOpacity -= blinkCount * 8;
            }
            else {
                cursorOpacity -= (40 - blinkCount) * 8;
            }
        }
        this._windowCursorSprite.alpha = cursorOpacity / 255;
        this._windowCursorSprite.visible = this.isOpen();
    };
    /**
     * @method _updateContents
     * @private
     */
    Window.prototype._updateContents = function () {
        var w = this._width - this._padding * 2;
        var h = this._height - this._padding * 2;
        if (w > 0 && h > 0) {
            this._windowContentsSprite.setFrame(this.origin.x, this.origin.y, w, h);
            this._windowContentsSprite.visible = this.isOpen();
        }
        else {
            this._windowContentsSprite.visible = false;
        }
    };
    /**
     * @method _updateArrows
     * @private
     */
    Window.prototype._updateArrows = function () {
        this._downArrowSprite.visible = this.isOpen() && this.downArrowVisible;
        this._upArrowSprite.visible = this.isOpen() && this.upArrowVisible;
    };
    /**
     * @method _updatePauseSign
     * @private
     */
    Window.prototype._updatePauseSign = function () {
        var sprite = this._windowPauseSignSprite;
        var x = Math.floor(this._animationCount / 16) % 2;
        var y = Math.floor(this._animationCount / 16 / 2) % 2;
        var sx = 144;
        var sy = 96;
        var p = 24;
        if (!this.pause) {
            sprite.alpha = 0;
        }
        else if (sprite.alpha < 1) {
            sprite.alpha = Math.min(sprite.alpha + 0.1, 1);
        }
        sprite.setFrame(sx + x * p, sy + y * p, p, p);
        sprite.visible = this.isOpen();
    };
    return Window;
}(PIXI.Container));
exports.Window = Window;

},{"../PIXI":12,"./Bitmap":13,"./Rectangle":18,"./Sprite":21,"./Utils":28}],31:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowLayer = void 0;
var PIXI_1 = require("../PIXI");
// export interface WindowLayerParameterObject extends ContainerParameterObject {
// }
/**
 * Graphics.width, height の大きさのオフスクリーンに子を描画し
 * それをレンダリングするクリップ役、みたい (see: _renderCanvas)。
 * とりあえず何もせず子を描画する。
 *
 * TODO: クリッピングが必要な場面が見えてきたら実装する。
 */
var WindowLayer = /** @class */ (function (_super) {
    __extends(WindowLayer, _super);
    function WindowLayer() {
        var _this = _super.call(this) || this;
        _this._tempCanvas = null;
        return _this;
        // this.initialize();
    }
    WindowLayer.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        // PIXI.Container.call(this);
        // this._width = 0;
        // this._height = 0;
        // this._tempCanvas = null;
        // this._translationMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];
        // this._windowMask = new PIXI.Graphics();
        // this._windowMask.beginFill(0xffffff, 1);
        // this._windowMask.drawRect(0, 0, 0, 0);
        // this._windowMask.endFill();
        // this._windowRect = this._windowMask.graphicsData[0].shape;
        // this._renderSprite = null;
        // this.filterArea = new PIXI.Rectangle();
        // this.filters = [WindowLayer.voidFilter];
        // temporary fix for memory leak bug
        // this.on('removed', this.onRemoveAsAChild);
    };
    // onRemoveAsAChild() {
    // 	this.removeChildren();
    // }
    // WindowLayer.voidFilter = new PIXI.filters.VoidFilter();
    /**
     * The width of the window layer in pixels.
     *
     * @property width
     * @type Number
     */
    // Object.defineProperty(WindowLayer.prototype, 'width', {
    // 	get: function () {
    // 		return this._width;
    // 	},
    // 	set: function (value) {
    // 		this._width = value;
    // 	},
    // 	configurable: true
    // });
    /**
     * The height of the window layer in pixels.
     *
     * @property height
     * @type Number
     */
    // Object.defineProperty(WindowLayer.prototype, 'height', {
    // 	get: function () {
    // 		return this._height;
    // 	},
    // 	set: function (value) {
    // 		this._height = value;
    // 	},
    // 	configurable: true
    // });
    /**
     * Sets the x, y, width, and height all at once.
     *
     * @method move
     * @param {Number} x The x coordinate of the window layer
     * @param {Number} y The y coordinate of the window layer
     * @param {Number} width The width of the window layer
     * @param {Number} height The height of the window layer
     */
    WindowLayer.prototype.move = function (x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.modified();
    };
    // NOTE: 親の Container で定義
    /**
     * Updates the window layer for each frame.
     *
     * @method update
     */
    // update() {
    // 	this.children.forEach(function (child) {
    // 		if (child.update) {
    // 			child.update();
    // 		}
    // 	});
    // }
    /**
     * @method renderCanvas
     * @param {Object} renderer
     * @private
     */
    WindowLayer.prototype.renderCanvas = function (renderer) {
        // if (!this.visible || !this.renderable) {
        // 	return;
        // }
        // TODO: renderable の対応が必要かどうか調査する。
        if (!this.visible) {
            return;
        }
        // if (!this._tempCanvas) {
        // 	this._tempCanvas = document.createElement('canvas');
        // }
        // this._tempCanvas.width = Graphics.width;
        // this._tempCanvas.height = Graphics.height;
        // var realCanvasContext = renderer.context;
        // var context = this._tempCanvas.getContext('2d');
        // context.save();
        // context.clearRect(0, 0, Graphics.width, Graphics.height);
        // context.beginPath();
        // context.rect(this.x, this.y, this.width, this.height);
        // context.closePath();
        // context.clip();
        if (this._tempCanvas && (this._tempCanvas.width !== this.width || this._tempCanvas.height !== this.height)) {
            // canvas と違い g.Surface はリサイズできないのでサイズが違う場合は先に破棄して作り直す。
            this._tempCanvas.destroy();
            this._tempCanvas = null;
        }
        if (!this._tempCanvas) {
            // clip がないので clip 後のサイズで確保してそこに描く。
            // TODO 解放処理。this.on("removed") に対応する必要がある？
            this._tempCanvas = g.game.resourceFactory.createSurface(this.width, this.height);
        }
        // for (var i = 0; i < this.children.length; i++) {
        // 	var child = this.children[i];
        // 	if (child._isWindow && child.visible && child.openness > 0) {
        // 		this._canvasClearWindowRect(renderer, child);
        // 		context.save();
        // 		child.renderCanvas(renderer);
        // 		context.restore();
        // 	}
        // }
        // context.restore();
        var tmpRenderer = this._tempCanvas.renderer();
        tmpRenderer.begin();
        tmpRenderer.clear();
        tmpRenderer.translate(-this.x, -this.y); // clip の代わりに clip 後の領域だけ確保しているので、描画先をずらす
        for (var i = 0; i < this.children.length; i++) {
            if (!("_isWindow" in this.children[i]))
                continue; // _isWindow は Window にしかないので in で確認してからキャスト
            var child = this.children[i];
            if (child._isWindow && child.visible && child.openness > 0) {
                this._canvasClearWindowRect(tmpRenderer, child);
                child.pixiEntity.render(tmpRenderer);
            }
        }
        tmpRenderer.end();
        // renderer.context = realCanvasContext;
        // renderer.context.setTransform(1, 0, 0, 1, 0, 0);
        // renderer.context.globalCompositeOperation = 'source-over';
        // renderer.context.globalAlpha = 1;
        // renderer.context.drawImage(this._tempCanvas, 0, 0);
        renderer.begin();
        renderer.setTransform([1, 0, 0, 1, 0, 0]);
        renderer.setCompositeOperation("source-over");
        renderer.setOpacity(1);
        renderer.drawImage(this._tempCanvas, this.x, this.y, this.width, this.height, 0, 0);
        // for (var j = 0; j < this.children.length; j++) {
        // 	if (!this.children[j]._isWindow) {
        // 		this.children[j].renderCanvas(renderer);
        // 	}
        // }
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];
            if (!("_isWindow" in child && child._isWindow)) {
                child.pixiEntity.render(renderer);
            }
        }
        renderer.end();
    };
    /**
     * @method _canvasClearWindowRect
     * @param {Object} renderSession
     * @param {Window} window
     * @private
     */
    WindowLayer.prototype._canvasClearWindowRect = function (renderSession, window) {
        var rx = this.x + window.x;
        var ry = this.y + window.y + (window.height / 2) * (1 - window._openness / 255);
        var rw = window.width;
        var rh = (window.height * window._openness) / 255;
        // renderSession.context.clearRect(rx, ry, rw, rh);
        var context = renderSession.context;
        if (context) {
            context.clearRect(rx, ry, rw, rh); // TODO Akashic に clearRect をつける (cf. Bitmap#clearRect())
        }
    };
    /**
     * @method _renderWebGL
     * @param {Object} renderSession
     * @private
     */
    // renderWebGL(renderer) {
    // 	if (!this.visible || !this.renderable) {
    // 		return;
    // 	}
    // 	if (this.children.length == 0) {
    // 		return;
    // 	}
    // 	renderer.flush();
    // 	this.filterArea.copy(this);
    // 	renderer.filterManager.pushFilter(this, this.filters);
    // 	renderer.currentRenderer.start();
    // 	var shift = new PIXI.Point();
    // 	var rt = renderer._activeRenderTarget;
    // 	var projectionMatrix = rt.projectionMatrix;
    // 	shift.x = Math.round((projectionMatrix.tx + 1) / 2 * rt.sourceFrame.width);
    // 	shift.y = Math.round((projectionMatrix.ty + 1) / 2 * rt.sourceFrame.height);
    // 	for (var i = 0; i < this.children.length; i++) {
    // 		var child = this.children[i];
    // 		if (child._isWindow && child.visible && child.openness > 0) {
    // 			this._maskWindow(child, shift);
    // 			renderer.maskManager.pushScissorMask(this, this._windowMask);
    // 			renderer.clear();
    // 			renderer.maskManager.popScissorMask();
    // 			renderer.currentRenderer.start();
    // 			child.renderWebGL(renderer);
    // 			renderer.currentRenderer.flush();
    // 		}
    // 	}
    // 	renderer.flush();
    // 	renderer.filterManager.popFilter();
    // 	renderer.maskManager.popScissorMask();
    // 	for (var j = 0; j < this.children.length; j++) {
    // 		if (!this.children[j]._isWindow) {
    // 			this.children[j].renderWebGL(renderer);
    // 		}
    // 	}
    // }
    WindowLayer.prototype.renderSelf = function (renderer, _camera) {
        this.renderCanvas(renderer);
        return false;
    };
    WindowLayer.prototype._maskWindow = function (_window, _shift) {
        // this._windowMask._currentBounds = null;
        // this._windowMask.boundsDirty = true;
        // var rect = this._windowRect;
        // rect.x = this.x + shift.x + window.x;
        // rect.y = this.x + shift.y + window.y + window.height / 2 * (1 - window._openness / 255);
        // rect.width = window.width;
        // rect.height = window.height * window._openness / 255;
    };
    return WindowLayer;
}(PIXI_1.Container));
exports.WindowLayer = WindowLayer;

},{"../PIXI":12}],32:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Screen = exports.Game_Player = exports.Game_Picture = exports.Game_Party = exports.Game_Message = exports.Game_Map = exports.Game_Item = exports.Game_Interpreter = exports.Game_Followers = exports.Game_Follower = exports.Game_Event = exports.Game_Enemy = exports.Game_CommonEvent = exports.Game_CharacterBase = exports.Game_Character = exports.Game_BattlerBase = exports.Game_Battler = exports.Game_Actors = exports.Game_Actor = exports.Game_ActionResult = exports.Game_Action = exports.ConfigManager = exports.BattleManager = exports.AudioManager = exports.TextManager = exports.StorageManager = exports.SoundManager = exports.SceneManager = exports.PluginManager = exports.ImageManager = exports.WindowLayer = exports.Window = exports.Weather = exports.Utils = exports.TouchInput = exports.ToneSprite = exports.ToneFilter = exports.TilingSprite = exports.Tilemap = exports.Stage = exports.Sprite = exports.ScreenSprite = exports.RequestQueue = exports.Rectangle = exports.JsonEx = exports.Input = exports.ImageCache = exports.Graphics = exports.Bitmap = exports.DataManager = void 0;
exports.Window_BattleItem = exports.Window_BattleEnemy = exports.Window_BattleActor = exports.Window_Base = exports.Window_ActorCommand = exports.Spriteset_Map = exports.Spriteset_Battle = exports.Spriteset_Base = exports.Sprite_Weapon = exports.Sprite_Timer = exports.Sprite_StateOverlay = exports.Sprite_StateIcon = exports.Sprite_Picture = exports.Sprite_Enemy = exports.Sprite_Destination = exports.Sprite_Damage = exports.Sprite_Character = exports.Sprite_Battler = exports.Sprite_Base = exports.Sprite_Balloon = exports.Sprite_Animation = exports.Sprite_Actor = exports.Scene_Save = exports.Scene_Load = exports.Scene_File = exports.Scene_Title = exports.Scene_Status = exports.Scene_Skill = exports.Scene_Shop = exports.Scene_Options = exports.Scene_MenuBase = exports.Scene_Menu = exports.Scene_Map = exports.Scene_ItemBase = exports.Scene_Item = exports.Scene_Gameover = exports.Scene_GameEnd = exports.Scene_Equip = exports.Scene_Boot = exports.Scene_Battle = exports.Scene_Base = exports.Game_Vehicle = exports.Game_Variables = exports.Game_Unit = exports.Game_Troop = exports.Game_Timer = exports.Game_Temp = exports.Game_System = exports.Game_Switches = exports.Game_SelfSwitches = void 0;
exports.Window_SavefileList = exports.Window_TitleCommand = exports.Window_Status = exports.Window_SkillType = exports.Window_SkillStatus = exports.Window_SkillList = exports.Window_ShopStatus = exports.Window_ShopSell = exports.Window_ShopNumber = exports.Window_ShopCommand = exports.Window_ShopBuy = exports.Window_Selectable = exports.Window_ScrollText = exports.Window_PartyCommand = exports.Window_Options = exports.Window_NumberInput = exports.Window_Message = exports.Window_MenuStatus = exports.Window_MenuCommand = exports.Window_MenuActor = exports.Window_MapName = exports.Window_ItemList = exports.Window_ItemCategory = exports.Window_HorzCommand = exports.Window_Help = exports.Window_Gold = exports.Window_GameEnd = exports.Window_EventItem = exports.Window_EquipStatus = exports.Window_EquipSlot = exports.Window_EquipItem = exports.Window_EquipCommand = exports.Window_Command = exports.Window_ChoiceList = exports.Window_BattleSkill = exports.Window_BattleLog = void 0;
var DataManager_1 = require("./managers/DataManager");
Object.defineProperty(exports, "DataManager", { enumerable: true, get: function () { return DataManager_1.DataManager; } });
__exportStar(require("./managers/globals"), exports);
var Bitmap_1 = require("./core/Bitmap");
Object.defineProperty(exports, "Bitmap", { enumerable: true, get: function () { return Bitmap_1.Bitmap; } });
var Graphics_1 = require("./core/Graphics");
Object.defineProperty(exports, "Graphics", { enumerable: true, get: function () { return Graphics_1.Graphics; } });
var ImageCache_1 = require("./core/ImageCache");
Object.defineProperty(exports, "ImageCache", { enumerable: true, get: function () { return ImageCache_1.ImageCache; } });
var Input_1 = require("./core/Input");
Object.defineProperty(exports, "Input", { enumerable: true, get: function () { return Input_1.Input; } });
var JsonEx_1 = require("./core/JsonEx");
Object.defineProperty(exports, "JsonEx", { enumerable: true, get: function () { return JsonEx_1.JsonEx; } });
var Rectangle_1 = require("./core/Rectangle");
Object.defineProperty(exports, "Rectangle", { enumerable: true, get: function () { return Rectangle_1.Rectangle; } });
var RequestQueue_1 = require("./core/RequestQueue");
Object.defineProperty(exports, "RequestQueue", { enumerable: true, get: function () { return RequestQueue_1.RequestQueue; } });
var ScreenSprite_1 = require("./core/ScreenSprite");
Object.defineProperty(exports, "ScreenSprite", { enumerable: true, get: function () { return ScreenSprite_1.ScreenSprite; } });
var Sprite_1 = require("./core/Sprite");
Object.defineProperty(exports, "Sprite", { enumerable: true, get: function () { return Sprite_1.Sprite; } });
var Stage_1 = require("./core/Stage");
Object.defineProperty(exports, "Stage", { enumerable: true, get: function () { return Stage_1.Stage; } });
var Tilemap_1 = require("./core/Tilemap");
Object.defineProperty(exports, "Tilemap", { enumerable: true, get: function () { return Tilemap_1.Tilemap; } });
var TilingSprite_1 = require("./core/TilingSprite");
Object.defineProperty(exports, "TilingSprite", { enumerable: true, get: function () { return TilingSprite_1.TilingSprite; } });
var ToneFilter_1 = require("./core/ToneFilter");
Object.defineProperty(exports, "ToneFilter", { enumerable: true, get: function () { return ToneFilter_1.ToneFilter; } });
var ToneSprite_1 = require("./core/ToneSprite");
Object.defineProperty(exports, "ToneSprite", { enumerable: true, get: function () { return ToneSprite_1.ToneSprite; } });
var TouchInput_1 = require("./core/TouchInput");
Object.defineProperty(exports, "TouchInput", { enumerable: true, get: function () { return TouchInput_1.TouchInput; } });
var Utils_1 = require("./core/Utils");
Object.defineProperty(exports, "Utils", { enumerable: true, get: function () { return Utils_1.Utils; } });
var Weather_1 = require("./core/Weather");
Object.defineProperty(exports, "Weather", { enumerable: true, get: function () { return Weather_1.Weather; } });
var Window_1 = require("./core/Window");
Object.defineProperty(exports, "Window", { enumerable: true, get: function () { return Window_1.Window; } });
var WindowLayer_1 = require("./core/WindowLayer");
Object.defineProperty(exports, "WindowLayer", { enumerable: true, get: function () { return WindowLayer_1.WindowLayer; } });
var ImageManager_1 = require("./managers/ImageManager");
Object.defineProperty(exports, "ImageManager", { enumerable: true, get: function () { return ImageManager_1.ImageManager; } });
var PluginManager_1 = require("./managers/PluginManager");
Object.defineProperty(exports, "PluginManager", { enumerable: true, get: function () { return PluginManager_1.PluginManager; } });
var SceneManager_1 = require("./managers/SceneManager");
Object.defineProperty(exports, "SceneManager", { enumerable: true, get: function () { return SceneManager_1.SceneManager; } });
var SoundManager_1 = require("./managers/SoundManager");
Object.defineProperty(exports, "SoundManager", { enumerable: true, get: function () { return SoundManager_1.SoundManager; } });
var StorageManager_1 = require("./managers/StorageManager");
Object.defineProperty(exports, "StorageManager", { enumerable: true, get: function () { return StorageManager_1.StorageManager; } });
var TextManager_1 = require("./managers/TextManager");
Object.defineProperty(exports, "TextManager", { enumerable: true, get: function () { return TextManager_1.TextManager; } });
var AudioManager_1 = require("./managers/AudioManager");
Object.defineProperty(exports, "AudioManager", { enumerable: true, get: function () { return AudioManager_1.AudioManager; } });
var BattleManager_1 = require("./managers/BattleManager");
Object.defineProperty(exports, "BattleManager", { enumerable: true, get: function () { return BattleManager_1.BattleManager; } });
var ConfigManager_1 = require("./managers/ConfigManager");
Object.defineProperty(exports, "ConfigManager", { enumerable: true, get: function () { return ConfigManager_1.ConfigManager; } });
var GameAction_1 = require("./objects/GameAction");
Object.defineProperty(exports, "Game_Action", { enumerable: true, get: function () { return GameAction_1.Game_Action; } });
var GameActionResult_1 = require("./objects/GameActionResult");
Object.defineProperty(exports, "Game_ActionResult", { enumerable: true, get: function () { return GameActionResult_1.Game_ActionResult; } });
var GameActor_1 = require("./objects/GameActor");
Object.defineProperty(exports, "Game_Actor", { enumerable: true, get: function () { return GameActor_1.Game_Actor; } });
var GameActors_1 = require("./objects/GameActors");
Object.defineProperty(exports, "Game_Actors", { enumerable: true, get: function () { return GameActors_1.Game_Actors; } });
var GameBattler_1 = require("./objects/GameBattler");
Object.defineProperty(exports, "Game_Battler", { enumerable: true, get: function () { return GameBattler_1.Game_Battler; } });
var GameBattlerBase_1 = require("./objects/GameBattlerBase");
Object.defineProperty(exports, "Game_BattlerBase", { enumerable: true, get: function () { return GameBattlerBase_1.Game_BattlerBase; } });
var GameCharacter_1 = require("./objects/GameCharacter");
Object.defineProperty(exports, "Game_Character", { enumerable: true, get: function () { return GameCharacter_1.Game_Character; } });
var GameCharacterBase_1 = require("./objects/GameCharacterBase");
Object.defineProperty(exports, "Game_CharacterBase", { enumerable: true, get: function () { return GameCharacterBase_1.Game_CharacterBase; } });
var GameCommonEvent_1 = require("./objects/GameCommonEvent");
Object.defineProperty(exports, "Game_CommonEvent", { enumerable: true, get: function () { return GameCommonEvent_1.Game_CommonEvent; } });
var GameEnemy_1 = require("./objects/GameEnemy");
Object.defineProperty(exports, "Game_Enemy", { enumerable: true, get: function () { return GameEnemy_1.Game_Enemy; } });
var GameEvent_1 = require("./objects/GameEvent");
Object.defineProperty(exports, "Game_Event", { enumerable: true, get: function () { return GameEvent_1.Game_Event; } });
var GameFollower_1 = require("./objects/GameFollower");
Object.defineProperty(exports, "Game_Follower", { enumerable: true, get: function () { return GameFollower_1.Game_Follower; } });
var GameFollowers_1 = require("./objects/GameFollowers");
Object.defineProperty(exports, "Game_Followers", { enumerable: true, get: function () { return GameFollowers_1.Game_Followers; } });
var GameInterpreter_1 = require("./objects/GameInterpreter");
Object.defineProperty(exports, "Game_Interpreter", { enumerable: true, get: function () { return GameInterpreter_1.Game_Interpreter; } });
var GameItem_1 = require("./objects/GameItem");
Object.defineProperty(exports, "Game_Item", { enumerable: true, get: function () { return GameItem_1.Game_Item; } });
var GameMap_1 = require("./objects/GameMap");
Object.defineProperty(exports, "Game_Map", { enumerable: true, get: function () { return GameMap_1.Game_Map; } });
var GameMessage_1 = require("./objects/GameMessage");
Object.defineProperty(exports, "Game_Message", { enumerable: true, get: function () { return GameMessage_1.Game_Message; } });
var GameParty_1 = require("./objects/GameParty");
Object.defineProperty(exports, "Game_Party", { enumerable: true, get: function () { return GameParty_1.Game_Party; } });
var GamePicture_1 = require("./objects/GamePicture");
Object.defineProperty(exports, "Game_Picture", { enumerable: true, get: function () { return GamePicture_1.Game_Picture; } });
var GamePlayer_1 = require("./objects/GamePlayer");
Object.defineProperty(exports, "Game_Player", { enumerable: true, get: function () { return GamePlayer_1.Game_Player; } });
var GameScreen_1 = require("./objects/GameScreen");
Object.defineProperty(exports, "Game_Screen", { enumerable: true, get: function () { return GameScreen_1.Game_Screen; } });
var GameSelfSwitches_1 = require("./objects/GameSelfSwitches");
Object.defineProperty(exports, "Game_SelfSwitches", { enumerable: true, get: function () { return GameSelfSwitches_1.Game_SelfSwitches; } });
var GameSwitches_1 = require("./objects/GameSwitches");
Object.defineProperty(exports, "Game_Switches", { enumerable: true, get: function () { return GameSwitches_1.Game_Switches; } });
var GameSystem_1 = require("./objects/GameSystem");
Object.defineProperty(exports, "Game_System", { enumerable: true, get: function () { return GameSystem_1.Game_System; } });
var GameTemp_1 = require("./objects/GameTemp");
Object.defineProperty(exports, "Game_Temp", { enumerable: true, get: function () { return GameTemp_1.Game_Temp; } });
var GameTimer_1 = require("./objects/GameTimer");
Object.defineProperty(exports, "Game_Timer", { enumerable: true, get: function () { return GameTimer_1.Game_Timer; } });
var GameTroop_1 = require("./objects/GameTroop");
Object.defineProperty(exports, "Game_Troop", { enumerable: true, get: function () { return GameTroop_1.Game_Troop; } });
var GameUnit_1 = require("./objects/GameUnit");
Object.defineProperty(exports, "Game_Unit", { enumerable: true, get: function () { return GameUnit_1.Game_Unit; } });
var GameVariables_1 = require("./objects/GameVariables");
Object.defineProperty(exports, "Game_Variables", { enumerable: true, get: function () { return GameVariables_1.Game_Variables; } });
var GameVehicle_1 = require("./objects/GameVehicle");
Object.defineProperty(exports, "Game_Vehicle", { enumerable: true, get: function () { return GameVehicle_1.Game_Vehicle; } });
__exportStar(require("./PIXI"), exports);
var SceneBase_1 = require("./scenes/SceneBase");
Object.defineProperty(exports, "Scene_Base", { enumerable: true, get: function () { return SceneBase_1.Scene_Base; } });
var SceneBattle_1 = require("./scenes/SceneBattle");
Object.defineProperty(exports, "Scene_Battle", { enumerable: true, get: function () { return SceneBattle_1.Scene_Battle; } });
var SceneBoot_1 = require("./scenes/SceneBoot");
Object.defineProperty(exports, "Scene_Boot", { enumerable: true, get: function () { return SceneBoot_1.Scene_Boot; } });
var SceneEquip_1 = require("./scenes/SceneEquip");
Object.defineProperty(exports, "Scene_Equip", { enumerable: true, get: function () { return SceneEquip_1.Scene_Equip; } });
var SceneGameEnd_1 = require("./scenes/SceneGameEnd");
Object.defineProperty(exports, "Scene_GameEnd", { enumerable: true, get: function () { return SceneGameEnd_1.Scene_GameEnd; } });
var SceneGameOver_1 = require("./scenes/SceneGameOver");
Object.defineProperty(exports, "Scene_Gameover", { enumerable: true, get: function () { return SceneGameOver_1.Scene_Gameover; } });
var SceneItem_1 = require("./scenes/SceneItem");
Object.defineProperty(exports, "Scene_Item", { enumerable: true, get: function () { return SceneItem_1.Scene_Item; } });
var SceneItemBase_1 = require("./scenes/SceneItemBase");
Object.defineProperty(exports, "Scene_ItemBase", { enumerable: true, get: function () { return SceneItemBase_1.Scene_ItemBase; } });
var SceneMap_1 = require("./scenes/SceneMap");
Object.defineProperty(exports, "Scene_Map", { enumerable: true, get: function () { return SceneMap_1.Scene_Map; } });
var SceneMenu_1 = require("./scenes/SceneMenu");
Object.defineProperty(exports, "Scene_Menu", { enumerable: true, get: function () { return SceneMenu_1.Scene_Menu; } });
var SceneMenuBase_1 = require("./scenes/SceneMenuBase");
Object.defineProperty(exports, "Scene_MenuBase", { enumerable: true, get: function () { return SceneMenuBase_1.Scene_MenuBase; } });
var SceneOptions_1 = require("./scenes/SceneOptions");
Object.defineProperty(exports, "Scene_Options", { enumerable: true, get: function () { return SceneOptions_1.Scene_Options; } });
var SceneShop_1 = require("./scenes/SceneShop");
Object.defineProperty(exports, "Scene_Shop", { enumerable: true, get: function () { return SceneShop_1.Scene_Shop; } });
var SceneSkill_1 = require("./scenes/SceneSkill");
Object.defineProperty(exports, "Scene_Skill", { enumerable: true, get: function () { return SceneSkill_1.Scene_Skill; } });
var SceneStatus_1 = require("./scenes/SceneStatus");
Object.defineProperty(exports, "Scene_Status", { enumerable: true, get: function () { return SceneStatus_1.Scene_Status; } });
var SceneTitle_1 = require("./scenes/SceneTitle");
Object.defineProperty(exports, "Scene_Title", { enumerable: true, get: function () { return SceneTitle_1.Scene_Title; } });
var SceneFile_1 = require("./scenes/SceneFile");
Object.defineProperty(exports, "Scene_File", { enumerable: true, get: function () { return SceneFile_1.Scene_File; } });
var SceneLoad_1 = require("./scenes/SceneLoad");
Object.defineProperty(exports, "Scene_Load", { enumerable: true, get: function () { return SceneLoad_1.Scene_Load; } });
var SceneSave_1 = require("./scenes/SceneSave");
Object.defineProperty(exports, "Scene_Save", { enumerable: true, get: function () { return SceneSave_1.Scene_Save; } });
var SpriteActor_1 = require("./sprites/SpriteActor");
Object.defineProperty(exports, "Sprite_Actor", { enumerable: true, get: function () { return SpriteActor_1.Sprite_Actor; } });
var SpriteAnimation_1 = require("./sprites/SpriteAnimation");
Object.defineProperty(exports, "Sprite_Animation", { enumerable: true, get: function () { return SpriteAnimation_1.Sprite_Animation; } });
var SpriteBalloon_1 = require("./sprites/SpriteBalloon");
Object.defineProperty(exports, "Sprite_Balloon", { enumerable: true, get: function () { return SpriteBalloon_1.Sprite_Balloon; } });
var SpriteBase_1 = require("./sprites/SpriteBase");
Object.defineProperty(exports, "Sprite_Base", { enumerable: true, get: function () { return SpriteBase_1.Sprite_Base; } });
var SpriteBattler_1 = require("./sprites/SpriteBattler");
Object.defineProperty(exports, "Sprite_Battler", { enumerable: true, get: function () { return SpriteBattler_1.Sprite_Battler; } });
var SpriteCharacter_1 = require("./sprites/SpriteCharacter");
Object.defineProperty(exports, "Sprite_Character", { enumerable: true, get: function () { return SpriteCharacter_1.Sprite_Character; } });
var SpriteDamage_1 = require("./sprites/SpriteDamage");
Object.defineProperty(exports, "Sprite_Damage", { enumerable: true, get: function () { return SpriteDamage_1.Sprite_Damage; } });
var SpriteDestination_1 = require("./sprites/SpriteDestination");
Object.defineProperty(exports, "Sprite_Destination", { enumerable: true, get: function () { return SpriteDestination_1.Sprite_Destination; } });
var SpriteEnemy_1 = require("./sprites/SpriteEnemy");
Object.defineProperty(exports, "Sprite_Enemy", { enumerable: true, get: function () { return SpriteEnemy_1.Sprite_Enemy; } });
var SpritePicture_1 = require("./sprites/SpritePicture");
Object.defineProperty(exports, "Sprite_Picture", { enumerable: true, get: function () { return SpritePicture_1.Sprite_Picture; } });
var SpriteStateIcon_1 = require("./sprites/SpriteStateIcon");
Object.defineProperty(exports, "Sprite_StateIcon", { enumerable: true, get: function () { return SpriteStateIcon_1.Sprite_StateIcon; } });
var SpriteStateOverlay_1 = require("./sprites/SpriteStateOverlay");
Object.defineProperty(exports, "Sprite_StateOverlay", { enumerable: true, get: function () { return SpriteStateOverlay_1.Sprite_StateOverlay; } });
var SpriteTimer_1 = require("./sprites/SpriteTimer");
Object.defineProperty(exports, "Sprite_Timer", { enumerable: true, get: function () { return SpriteTimer_1.Sprite_Timer; } });
var SpriteWeapon_1 = require("./sprites/SpriteWeapon");
Object.defineProperty(exports, "Sprite_Weapon", { enumerable: true, get: function () { return SpriteWeapon_1.Sprite_Weapon; } });
var SpritesetBase_1 = require("./sprites/SpritesetBase");
Object.defineProperty(exports, "Spriteset_Base", { enumerable: true, get: function () { return SpritesetBase_1.Spriteset_Base; } });
var SpritesetBattle_1 = require("./sprites/SpritesetBattle");
Object.defineProperty(exports, "Spriteset_Battle", { enumerable: true, get: function () { return SpritesetBattle_1.Spriteset_Battle; } });
var SpritesetMap_1 = require("./sprites/SpritesetMap");
Object.defineProperty(exports, "Spriteset_Map", { enumerable: true, get: function () { return SpritesetMap_1.Spriteset_Map; } });
var WindowActorCommand_1 = require("./windows/WindowActorCommand");
Object.defineProperty(exports, "Window_ActorCommand", { enumerable: true, get: function () { return WindowActorCommand_1.Window_ActorCommand; } });
var WindowBase_1 = require("./windows/WindowBase");
Object.defineProperty(exports, "Window_Base", { enumerable: true, get: function () { return WindowBase_1.Window_Base; } });
var WindowBattleActor_1 = require("./windows/WindowBattleActor");
Object.defineProperty(exports, "Window_BattleActor", { enumerable: true, get: function () { return WindowBattleActor_1.Window_BattleActor; } });
var WindowBattleEnemy_1 = require("./windows/WindowBattleEnemy");
Object.defineProperty(exports, "Window_BattleEnemy", { enumerable: true, get: function () { return WindowBattleEnemy_1.Window_BattleEnemy; } });
var WindowBattleItem_1 = require("./windows/WindowBattleItem");
Object.defineProperty(exports, "Window_BattleItem", { enumerable: true, get: function () { return WindowBattleItem_1.Window_BattleItem; } });
var WindowBattleLog_1 = require("./windows/WindowBattleLog");
Object.defineProperty(exports, "Window_BattleLog", { enumerable: true, get: function () { return WindowBattleLog_1.Window_BattleLog; } });
var WindowBattleSkill_1 = require("./windows/WindowBattleSkill");
Object.defineProperty(exports, "Window_BattleSkill", { enumerable: true, get: function () { return WindowBattleSkill_1.Window_BattleSkill; } });
var WindowChoiceList_1 = require("./windows/WindowChoiceList");
Object.defineProperty(exports, "Window_ChoiceList", { enumerable: true, get: function () { return WindowChoiceList_1.Window_ChoiceList; } });
var WindowCommand_1 = require("./windows/WindowCommand");
Object.defineProperty(exports, "Window_Command", { enumerable: true, get: function () { return WindowCommand_1.Window_Command; } });
var WindowEquipCommand_1 = require("./windows/WindowEquipCommand");
Object.defineProperty(exports, "Window_EquipCommand", { enumerable: true, get: function () { return WindowEquipCommand_1.Window_EquipCommand; } });
var WindowEquipItem_1 = require("./windows/WindowEquipItem");
Object.defineProperty(exports, "Window_EquipItem", { enumerable: true, get: function () { return WindowEquipItem_1.Window_EquipItem; } });
var WindowEquipSlot_1 = require("./windows/WindowEquipSlot");
Object.defineProperty(exports, "Window_EquipSlot", { enumerable: true, get: function () { return WindowEquipSlot_1.Window_EquipSlot; } });
var WindowEquipStatus_1 = require("./windows/WindowEquipStatus");
Object.defineProperty(exports, "Window_EquipStatus", { enumerable: true, get: function () { return WindowEquipStatus_1.Window_EquipStatus; } });
var WindowEventItem_1 = require("./windows/WindowEventItem");
Object.defineProperty(exports, "Window_EventItem", { enumerable: true, get: function () { return WindowEventItem_1.Window_EventItem; } });
var WindowGameEnd_1 = require("./windows/WindowGameEnd");
Object.defineProperty(exports, "Window_GameEnd", { enumerable: true, get: function () { return WindowGameEnd_1.Window_GameEnd; } });
var WindowGold_1 = require("./windows/WindowGold");
Object.defineProperty(exports, "Window_Gold", { enumerable: true, get: function () { return WindowGold_1.Window_Gold; } });
var WindowHelp_1 = require("./windows/WindowHelp");
Object.defineProperty(exports, "Window_Help", { enumerable: true, get: function () { return WindowHelp_1.Window_Help; } });
var WindowHorzCommand_1 = require("./windows/WindowHorzCommand");
Object.defineProperty(exports, "Window_HorzCommand", { enumerable: true, get: function () { return WindowHorzCommand_1.Window_HorzCommand; } });
var WindowItemCategory_1 = require("./windows/WindowItemCategory");
Object.defineProperty(exports, "Window_ItemCategory", { enumerable: true, get: function () { return WindowItemCategory_1.Window_ItemCategory; } });
var WindowItemList_1 = require("./windows/WindowItemList");
Object.defineProperty(exports, "Window_ItemList", { enumerable: true, get: function () { return WindowItemList_1.Window_ItemList; } });
var WindowMapName_1 = require("./windows/WindowMapName");
Object.defineProperty(exports, "Window_MapName", { enumerable: true, get: function () { return WindowMapName_1.Window_MapName; } });
var WindowMenuActor_1 = require("./windows/WindowMenuActor");
Object.defineProperty(exports, "Window_MenuActor", { enumerable: true, get: function () { return WindowMenuActor_1.Window_MenuActor; } });
var WindowMenuCommand_1 = require("./windows/WindowMenuCommand");
Object.defineProperty(exports, "Window_MenuCommand", { enumerable: true, get: function () { return WindowMenuCommand_1.Window_MenuCommand; } });
var WindowMenuStatus_1 = require("./windows/WindowMenuStatus");
Object.defineProperty(exports, "Window_MenuStatus", { enumerable: true, get: function () { return WindowMenuStatus_1.Window_MenuStatus; } });
var WindowMessage_1 = require("./windows/WindowMessage");
Object.defineProperty(exports, "Window_Message", { enumerable: true, get: function () { return WindowMessage_1.Window_Message; } });
var WindowNumberInput_1 = require("./windows/WindowNumberInput");
Object.defineProperty(exports, "Window_NumberInput", { enumerable: true, get: function () { return WindowNumberInput_1.Window_NumberInput; } });
var WindowOptions_1 = require("./windows/WindowOptions");
Object.defineProperty(exports, "Window_Options", { enumerable: true, get: function () { return WindowOptions_1.Window_Options; } });
var WindowPartyCommand_1 = require("./windows/WindowPartyCommand");
Object.defineProperty(exports, "Window_PartyCommand", { enumerable: true, get: function () { return WindowPartyCommand_1.Window_PartyCommand; } });
var WindowScrollText_1 = require("./windows/WindowScrollText");
Object.defineProperty(exports, "Window_ScrollText", { enumerable: true, get: function () { return WindowScrollText_1.Window_ScrollText; } });
var WindowSelectable_1 = require("./windows/WindowSelectable");
Object.defineProperty(exports, "Window_Selectable", { enumerable: true, get: function () { return WindowSelectable_1.Window_Selectable; } });
var WindowShopBuy_1 = require("./windows/WindowShopBuy");
Object.defineProperty(exports, "Window_ShopBuy", { enumerable: true, get: function () { return WindowShopBuy_1.Window_ShopBuy; } });
var WindowShopCommand_1 = require("./windows/WindowShopCommand");
Object.defineProperty(exports, "Window_ShopCommand", { enumerable: true, get: function () { return WindowShopCommand_1.Window_ShopCommand; } });
var WindowShopNumber_1 = require("./windows/WindowShopNumber");
Object.defineProperty(exports, "Window_ShopNumber", { enumerable: true, get: function () { return WindowShopNumber_1.Window_ShopNumber; } });
var WindowShopSell_1 = require("./windows/WindowShopSell");
Object.defineProperty(exports, "Window_ShopSell", { enumerable: true, get: function () { return WindowShopSell_1.Window_ShopSell; } });
var WindowShopStatus_1 = require("./windows/WindowShopStatus");
Object.defineProperty(exports, "Window_ShopStatus", { enumerable: true, get: function () { return WindowShopStatus_1.Window_ShopStatus; } });
var WindowSkillList_1 = require("./windows/WindowSkillList");
Object.defineProperty(exports, "Window_SkillList", { enumerable: true, get: function () { return WindowSkillList_1.Window_SkillList; } });
var WindowSkillStatus_1 = require("./windows/WindowSkillStatus");
Object.defineProperty(exports, "Window_SkillStatus", { enumerable: true, get: function () { return WindowSkillStatus_1.Window_SkillStatus; } });
var WindowSkillType_1 = require("./windows/WindowSkillType");
Object.defineProperty(exports, "Window_SkillType", { enumerable: true, get: function () { return WindowSkillType_1.Window_SkillType; } });
var WindowStatus_1 = require("./windows/WindowStatus");
Object.defineProperty(exports, "Window_Status", { enumerable: true, get: function () { return WindowStatus_1.Window_Status; } });
var WindowTitleCommand_1 = require("./windows/WindowTitleCommand");
Object.defineProperty(exports, "Window_TitleCommand", { enumerable: true, get: function () { return WindowTitleCommand_1.Window_TitleCommand; } });
var WindowSavefileList_1 = require("./windows/WindowSavefileList");
Object.defineProperty(exports, "Window_SavefileList", { enumerable: true, get: function () { return WindowSavefileList_1.Window_SavefileList; } });

},{"./PIXI":12,"./core/Bitmap":13,"./core/Graphics":14,"./core/ImageCache":15,"./core/Input":16,"./core/JsonEx":17,"./core/Rectangle":18,"./core/RequestQueue":19,"./core/ScreenSprite":20,"./core/Sprite":21,"./core/Stage":22,"./core/Tilemap":23,"./core/TilingSprite":24,"./core/ToneFilter":25,"./core/ToneSprite":26,"./core/TouchInput":27,"./core/Utils":28,"./core/Weather":29,"./core/Window":30,"./core/WindowLayer":31,"./managers/AudioManager":33,"./managers/BattleManager":34,"./managers/ConfigManager":35,"./managers/DataManager":36,"./managers/ImageManager":37,"./managers/PluginManager":38,"./managers/SceneManager":39,"./managers/SoundManager":40,"./managers/StorageManager":41,"./managers/TextManager":42,"./managers/globals":43,"./objects/GameAction":44,"./objects/GameActionResult":45,"./objects/GameActor":46,"./objects/GameActors":47,"./objects/GameBattler":48,"./objects/GameBattlerBase":49,"./objects/GameCharacter":50,"./objects/GameCharacterBase":51,"./objects/GameCommonEvent":52,"./objects/GameEnemy":53,"./objects/GameEvent":54,"./objects/GameFollower":55,"./objects/GameFollowers":56,"./objects/GameInterpreter":57,"./objects/GameItem":58,"./objects/GameMap":59,"./objects/GameMessage":60,"./objects/GameParty":61,"./objects/GamePicture":62,"./objects/GamePlayer":63,"./objects/GameScreen":64,"./objects/GameSelfSwitches":65,"./objects/GameSwitches":66,"./objects/GameSystem":67,"./objects/GameTemp":68,"./objects/GameTimer":69,"./objects/GameTroop":70,"./objects/GameUnit":71,"./objects/GameVariables":72,"./objects/GameVehicle":73,"./scenes/SceneBase":74,"./scenes/SceneBattle":75,"./scenes/SceneBoot":76,"./scenes/SceneEquip":77,"./scenes/SceneFile":78,"./scenes/SceneGameEnd":79,"./scenes/SceneGameOver":80,"./scenes/SceneItem":81,"./scenes/SceneItemBase":82,"./scenes/SceneLoad":83,"./scenes/SceneMap":84,"./scenes/SceneMenu":85,"./scenes/SceneMenuBase":86,"./scenes/SceneOptions":87,"./scenes/SceneSave":88,"./scenes/SceneShop":89,"./scenes/SceneSkill":90,"./scenes/SceneStatus":91,"./scenes/SceneTitle":92,"./sprites/SpriteActor":93,"./sprites/SpriteAnimation":94,"./sprites/SpriteBalloon":95,"./sprites/SpriteBase":96,"./sprites/SpriteBattler":97,"./sprites/SpriteCharacter":99,"./sprites/SpriteDamage":100,"./sprites/SpriteDestination":101,"./sprites/SpriteEnemy":102,"./sprites/SpritePicture":103,"./sprites/SpriteStateIcon":104,"./sprites/SpriteStateOverlay":105,"./sprites/SpriteTimer":106,"./sprites/SpriteWeapon":107,"./sprites/SpritesetBase":108,"./sprites/SpritesetBattle":109,"./sprites/SpritesetMap":110,"./windows/WindowActorCommand":111,"./windows/WindowBase":112,"./windows/WindowBattleActor":113,"./windows/WindowBattleEnemy":114,"./windows/WindowBattleItem":115,"./windows/WindowBattleLog":116,"./windows/WindowBattleSkill":117,"./windows/WindowChoiceList":119,"./windows/WindowCommand":120,"./windows/WindowEquipCommand":121,"./windows/WindowEquipItem":122,"./windows/WindowEquipSlot":123,"./windows/WindowEquipStatus":124,"./windows/WindowEventItem":125,"./windows/WindowGameEnd":126,"./windows/WindowGold":127,"./windows/WindowHelp":128,"./windows/WindowHorzCommand":129,"./windows/WindowItemCategory":130,"./windows/WindowItemList":131,"./windows/WindowMapName":132,"./windows/WindowMenuActor":133,"./windows/WindowMenuCommand":134,"./windows/WindowMenuStatus":135,"./windows/WindowMessage":136,"./windows/WindowNumberInput":137,"./windows/WindowOptions":138,"./windows/WindowPartyCommand":139,"./windows/WindowSavefileList":140,"./windows/WindowScrollText":141,"./windows/WindowSelectable":142,"./windows/WindowShopBuy":143,"./windows/WindowShopCommand":144,"./windows/WindowShopNumber":145,"./windows/WindowShopSell":146,"./windows/WindowShopStatus":147,"./windows/WindowSkillList":148,"./windows/WindowSkillStatus":149,"./windows/WindowSkillType":150,"./windows/WindowStatus":151,"./windows/WindowTitleCommand":152}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioManager = void 0;
var Utils_1 = require("../core/Utils");
var AudioManager = /** @class */ (function () {
    function AudioManager() {
    }
    Object.defineProperty(AudioManager, "masterVolume", {
        get: function () {
            return this._masterVolume;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AudioManager, "masterVolue", {
        set: function (value) {
            this._masterVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AudioManager, "bgmVolume", {
        get: function () {
            return this._bgmVolume;
        },
        set: function (value) {
            this._bgmVolume = value;
            this.updateBgmParameters(this._currentBgm);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AudioManager, "bgsVolume", {
        get: function () {
            return this._bgsVolume;
        },
        set: function (value) {
            this._bgsVolume = value;
            this.updateBgsParameters(this._currentBgs);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AudioManager, "meVolume", {
        get: function () {
            return this._meVolume;
        },
        set: function (value) {
            this._meVolume = value;
            this.updateMeParameters(this._currentMe);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AudioManager, "seVolume", {
        get: function () {
            return this._seVolume;
        },
        set: function (value) {
            this._seVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    AudioManager.playBgm = function (bgm, pos) {
        if (this.isCurrentBgm(bgm)) {
            this.updateBgmParameters(bgm);
        }
        else {
            this.stopBgm();
            var asset = void 0;
            try {
                asset = g.game.scene().asset.getAudio(Utils_1.Utils.assetPathOfName("audio/bgm/" + bgm.name));
            }
            catch (_e) {
                return;
            }
            // akashic-engineでシーク再生はサポートしていないため、コメントアウト
            // if (pos) {
            // 	asset.offset = pos;
            // }
            this._bgmBuffer = {
                name: bgm.name,
                playContext: g.game.audio.create(asset)
            };
            this.updateBgmParameters(bgm);
            if (!this._meBuffer) {
                this._bgmBuffer.playContext.play();
                this._addSoundStatus(this._bgmBuffer);
            }
        }
        this.updateCurrentBgm(bgm, pos);
    };
    AudioManager.replayBgm = function (bgm) {
        if (this.isCurrentBgm(bgm)) {
            this.updateBgmParameters(bgm);
        }
        else {
            this.playBgm(bgm, bgm.pos);
            if (this._bgmBuffer) {
                // this._bgmBuffer.fadeIn(this._replayFadeTime);
                // フェードインの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
                // 元コードでfadeInBgm()関数呼び出しを行っていないので、同様に呼び出しを行わずにフェードイン処理を行う
                var playContext = this._bgmBuffer.playContext;
                g.AudioUtil.fadeIn(g.game, playContext, this._replayFadeTime * 1000, playContext._volume);
            }
        }
    };
    AudioManager.isCurrentBgm = function (bgm) {
        return this._currentBgm && this._bgmBuffer && this._currentBgm.name === bgm.name;
    };
    AudioManager.updateBgmParameters = function (bgm) {
        this.updateBufferParameters(this._bgmBuffer, this._bgmVolume, bgm);
    };
    AudioManager.updateCurrentBgm = function (bgm, pos) {
        this._currentBgm = {
            name: bgm.name,
            volume: bgm.volume,
            pitch: bgm.pitch,
            pan: bgm.pan,
            pos: pos
        };
    };
    AudioManager.stopBgm = function () {
        if (this._bgmBuffer) {
            this._bgmBuffer.playContext.stop();
            this._bgmBuffer = null;
            this._currentBgm = null;
        }
    };
    AudioManager.fadeOutBgm = function (duration) {
        if (this._bgmBuffer && this._currentBgm) {
            // フェードアウトの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
            g.AudioUtil.fadeOut(g.game, this._bgmBuffer.playContext, duration * 1000);
            this._currentBgm = null;
        }
    };
    AudioManager.fadeInBgm = function (duration, to) {
        if (to === void 0) { to = 1; }
        if (this._bgmBuffer && this._currentBgm) {
            // フェードインの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
            g.AudioUtil.fadeIn(g.game, this._bgmBuffer.playContext, duration * 1000, to);
        }
    };
    AudioManager.playBgs = function (bgs, pos) {
        if (this.isCurrentBgs(bgs)) {
            this.updateBgsParameters(bgs);
        }
        else {
            this.stopBgs();
            var asset = void 0;
            try {
                asset = g.game.scene().asset.getAudio(Utils_1.Utils.assetPathOfName("audio/bgs/" + bgs.name));
            }
            catch (_e) {
                return;
            }
            // akashic-engineでシーク再生はサポートしていないため、コメントアウト
            // if (pos) {
            // 	asset.offset = pos;
            // }
            this._bgsBuffer = {
                name: bgs.name,
                playContext: g.game.audio.create(asset)
            };
            this.updateBgsParameters(bgs);
            this._bgsBuffer.playContext.play();
            this._addSoundStatus(this._bgsBuffer);
        }
        this.updateCurrentBgs(bgs, pos);
    };
    AudioManager.replayBgs = function (bgs) {
        if (this.isCurrentBgs(bgs)) {
            this.updateBgsParameters(bgs);
        }
        else {
            this.playBgs(bgs, bgs.pos);
            if (this._bgsBuffer) {
                // this._bgsBuffer.fadeIn(this._replayFadeTime);
                // フェードインの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
                // 元コードでfadeInBgs()関数呼び出しを行っていないので、同様に呼び出しを行わずにフェードイン処理を行う
                var playContext = this._bgsBuffer.playContext;
                g.AudioUtil.fadeIn(g.game, playContext, this._replayFadeTime * 1000, playContext._volume);
            }
        }
    };
    AudioManager.isCurrentBgs = function (bgs) {
        return this._currentBgs && this._bgsBuffer && this._currentBgs.name === bgs.name;
    };
    AudioManager.updateBgsParameters = function (bgs) {
        this.updateBufferParameters(this._bgsBuffer, this._bgsVolume, bgs);
    };
    AudioManager.updateCurrentBgs = function (bgs, pos) {
        this._currentBgs = {
            name: bgs.name,
            volume: bgs.volume,
            pitch: bgs.pitch,
            pan: bgs.pan,
            pos: pos
        };
    };
    AudioManager.stopBgs = function () {
        if (this._bgsBuffer) {
            this._bgsBuffer.playContext.stop();
            this._bgsBuffer = null;
            this._currentBgs = null;
        }
    };
    AudioManager.fadeOutBgs = function (duration) {
        if (this._bgsBuffer && this._currentBgs) {
            // フェードアウトの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
            g.AudioUtil.fadeOut(g.game, this._bgsBuffer.playContext, duration * 1000);
            this._currentBgs = null;
        }
    };
    AudioManager.fadeInBgs = function (duration, to) {
        if (to === void 0) { to = 1; }
        if (this._bgsBuffer && this._currentBgs) {
            // フェードインの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
            g.AudioUtil.fadeIn(g.game, this._bgsBuffer.playContext, duration * 1000, to);
        }
    };
    AudioManager.playMe = function (me) {
        var _this = this;
        this.stopMe();
        var asset;
        try {
            asset = g.game.scene().asset.getAudio(Utils_1.Utils.assetPathOfName("audio/me/" + me.name));
        }
        catch (_e) {
            return;
        }
        if (this._bgmBuffer && this._currentBgm) {
            // akashic-engineでシーク再生はサポートしていないため、コメントアウト
            // this._currentBgm.pos = this._bgmBuffer.seek();
            this._bgmBuffer.playContext.stop();
        }
        this._meBuffer = {
            name: me.name,
            playContext: g.game.audio.create(asset)
        };
        this.updateMeParameters(me);
        this._meBuffer.playContext.play();
        this._meBuffer.playContext.onStop.add(function () { return _this.stopMe(); });
        this._addSoundStatus(this._meBuffer);
    };
    AudioManager.updateMeParameters = function (me) {
        this.updateBufferParameters(this._meBuffer, this._meVolume, me);
    };
    AudioManager.fadeOutMe = function (duration) {
        if (this._meBuffer) {
            // フェードアウトの長さの単位がRPGツクールMVでは秒になっているのでミリ秒に変換する
            g.AudioUtil.fadeOut(g.game, this._meBuffer.playContext, duration * 1000);
        }
    };
    AudioManager.stopMe = function () {
        var _a;
        if (this._meBuffer) {
            this._meBuffer.playContext.stop();
            this._meBuffer = null;
            if (this._bgmBuffer && this._currentBgm && ((_a = this._soundStatusMap[this._bgmBuffer.name]) === null || _a === void 0 ? void 0 : _a.isPlaying) === false) {
                // akashic-engineでシーク再生はサポートしていないため、コメントアウト
                // this._bgmBuffer.asset.offset = this._currentBgm.pos || 0;
                this.updateBgmParameters(this._currentBgm);
                this.fadeInBgm(this._replayFadeTime, this._bgmBuffer.playContext._volume);
            }
        }
    };
    AudioManager.playSe = function (se) {
        var _this = this;
        var asset;
        try {
            asset = g.game.scene().asset.getAudio(Utils_1.Utils.assetPathOfName("audio/se/" + se.name));
        }
        catch (_e) {
            return;
        }
        this._seBuffers = this._seBuffers.filter(function (audio) { var _a; return (_a = _this._soundStatusMap[audio.name]) === null || _a === void 0 ? void 0 : _a.isPlaying; });
        var buffer = {
            name: se.name,
            playContext: g.game.audio.create(asset)
        };
        this.updateSeParameters(buffer, se);
        buffer.playContext.play();
        this._addSoundStatus(buffer);
        this._seBuffers.push(buffer);
    };
    AudioManager.updateSeParameters = function (buffer, se) {
        this.updateBufferParameters(buffer, this._seVolume, se);
    };
    AudioManager.stopSe = function () {
        this._seBuffers.forEach(function (buffer) { return buffer.playContext.stop(); });
        this._seBuffers = [];
    };
    AudioManager.playStaticSe = function (se) {
        if (se.name) {
            this.loadStaticSe(se);
            for (var _i = 0, _a = this._staticBuffers; _i < _a.length; _i++) {
                var buffer = _a[_i];
                if (buffer.name === se.name) {
                    buffer.playContext.stop();
                    this.updateSeParameters(buffer, se);
                    buffer.playContext.play();
                    break;
                }
            }
        }
    };
    AudioManager.loadStaticSe = function (se) {
        var asset;
        try {
            asset = g.game.scene().asset.getAudio(Utils_1.Utils.assetPathOfName("audio/se/" + se.name));
        }
        catch (_e) {
            return;
        }
        if (this.isStaticSe(se)) {
            return;
        }
        var buffer = {
            name: se.name,
            playContext: g.game.audio.create(asset)
        };
        this._staticBuffers.push(buffer);
    };
    AudioManager.isStaticSe = function (se) {
        return this._staticBuffers.some(function (buffer) { return buffer.name === se.name; });
    };
    AudioManager.stopAll = function () {
        this.stopMe();
        this.stopBgm();
        this.stopBgs();
        this.stopSe();
    };
    AudioManager.saveBgm = function () {
        if (this._currentBgm) {
            var bgm = this._currentBgm;
            return {
                name: bgm.name,
                volume: bgm.volume,
                pitch: bgm.pitch,
                pan: bgm.pan
                // akashic-engineでシーク再生はサポートしていないため、コメントアウト
                // pos: this._bgmBuffer ? this._bgmBuffer.seek() : 0
            };
        }
        else {
            return this.makeEmptyAudioObject();
        }
    };
    AudioManager.saveBgs = function () {
        if (this._currentBgs) {
            var bgs = this._currentBgs;
            return {
                name: bgs.name,
                volume: bgs.volume,
                pitch: bgs.pitch,
                pan: bgs.pan
                // pos: this._bgsBuffer ? this._bgsBuffer.seek() : 0
            };
        }
        else {
            return this.makeEmptyAudioObject();
        }
    };
    AudioManager.makeEmptyAudioObject = function () {
        return { name: "", volume: 0, pitch: 0 };
    };
    AudioManager.updateBufferParameters = function (buffer, configVolume, audio) {
        if (buffer && audio) {
            buffer.playContext.changeVolume((configVolume * (audio.volume || 0)) / 10000);
            // akashic-engineで非サポートのためコメントアウト
            // buffer.pitch = (audio.pitch || 0) / 100;
            // buffer.pan = (audio.pan || 0) / 100;
        }
    };
    AudioManager._addSoundStatus = function (audio) {
        var _this = this;
        audio.playContext.onPlay.add(function () {
            _this._soundStatusMap[audio.name] = { isPlaying: true };
        });
        audio.playContext.onStop.add(function () {
            _this._soundStatusMap[audio.name] = { isPlaying: false };
        });
    };
    AudioManager._soundStatusMap = Object.create(null);
    AudioManager._masterVolume = 1; // (min: 0, max: 1)
    AudioManager._bgmVolume = 100;
    AudioManager._bgsVolume = 100;
    AudioManager._meVolume = 100;
    AudioManager._seVolume = 100;
    AudioManager._currentBgm = null;
    AudioManager._currentBgs = null;
    AudioManager._bgmBuffer = null;
    AudioManager._bgsBuffer = null;
    AudioManager._meBuffer = null;
    AudioManager._seBuffers = [];
    AudioManager._staticBuffers = [];
    AudioManager._replayFadeTime = 0.5;
    AudioManager._currentMe = null;
    return AudioManager;
}());
exports.AudioManager = AudioManager;

},{"../core/Utils":28}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BattleManager = void 0;
var Utils_1 = require("../core/Utils");
var GameAction_1 = require("../objects/GameAction");
var SceneGameOver_1 = require("../scenes/SceneGameOver");
var AudioManager_1 = require("./AudioManager");
var globals_1 = require("./globals");
var SceneManager_1 = require("./SceneManager");
var SoundManager_1 = require("./SoundManager");
var TextManager_1 = require("./TextManager");
var BattleManager = /** @class */ (function () {
    function BattleManager() {
    }
    BattleManager.setup = function (troopId, canEscape, canLose) {
        this.initMembers();
        this._canEscape = canEscape;
        this._canLose = canLose;
        globals_1.$gameTroop.setup(troopId);
        globals_1.$gameScreen.onBattleStart();
        this.makeEscapeRatio();
    };
    BattleManager.initMembers = function () {
        this._phase = "init";
        this._canEscape = false;
        this._canLose = false;
        this._battleTest = false;
        this._eventCallback = null;
        this._preemptive = false;
        this._surprise = false;
        this._actorIndex = -1;
        this._actionForcedBattler = null;
        this._mapBgm = null;
        this._mapBgs = null;
        this._actionBattlers = [];
        this._subject = null;
        this._action = null;
        this._targets = [];
        this._logWindow = null;
        this._statusWindow = null;
        this._spriteset = null;
        this._escapeRatio = 0;
        this._escaped = false;
        this._rewards = {};
        this._turnForced = false;
    };
    BattleManager.isBattleTest = function () {
        return this._battleTest;
    };
    BattleManager.setBattleTest = function (battleTest) {
        this._battleTest = battleTest;
    };
    BattleManager.setEventCallback = function (callback) {
        this._eventCallback = callback;
    };
    BattleManager.setLogWindow = function (logWindow) {
        this._logWindow = logWindow;
    };
    BattleManager.setStatusWindow = function (statusWindow) {
        this._statusWindow = statusWindow;
    };
    BattleManager.setSpriteset = function (spriteset) {
        this._spriteset = spriteset;
    };
    BattleManager.onEncounter = function () {
        this._preemptive = g.game.vars.random.generate() < this.ratePreemptive();
        this._surprise = g.game.vars.random.generate() < this.rateSurprise() && !this._preemptive;
    };
    BattleManager.ratePreemptive = function () {
        return globals_1.$gameParty.ratePreemptive(globals_1.$gameTroop.agility());
    };
    BattleManager.rateSurprise = function () {
        return globals_1.$gameParty.rateSurprise(globals_1.$gameTroop.agility());
    };
    BattleManager.saveBgmAndBgs = function () {
        this._mapBgm = AudioManager_1.AudioManager.saveBgm();
        this._mapBgs = AudioManager_1.AudioManager.saveBgs();
    };
    BattleManager.playBattleBgm = function () {
        AudioManager_1.AudioManager.playBgm(globals_1.$gameSystem.battleBgm());
        AudioManager_1.AudioManager.stopBgs();
    };
    BattleManager.playVictoryMe = function () {
        AudioManager_1.AudioManager.playMe(globals_1.$gameSystem.victoryMe());
    };
    BattleManager.playDefeatMe = function () {
        AudioManager_1.AudioManager.playMe(globals_1.$gameSystem.defeatMe());
    };
    BattleManager.replayBgmAndBgs = function () {
        if (this._mapBgm) {
            AudioManager_1.AudioManager.replayBgm(this._mapBgm);
        }
        else {
            AudioManager_1.AudioManager.stopBgm();
        }
        if (this._mapBgs) {
            AudioManager_1.AudioManager.replayBgs(this._mapBgs);
        }
    };
    BattleManager.makeEscapeRatio = function () {
        this._escapeRatio = (0.5 * globals_1.$gameParty.agility()) / globals_1.$gameTroop.agility();
    };
    BattleManager.update = function () {
        if (!this.isBusy() && !this.updateEvent()) {
            switch (this._phase) {
                case "start":
                    this.startInput();
                    break;
                case "turn":
                    this.updateTurn();
                    break;
                case "action":
                    this.updateAction();
                    break;
                case "turnEnd":
                    this.updateTurnEnd();
                    break;
                case "battleEnd":
                    this.updateBattleEnd();
                    break;
            }
        }
    };
    BattleManager.updateEvent = function () {
        switch (this._phase) {
            case "start":
            case "turn":
            case "turnEnd":
                if (this.isActionForced()) {
                    this.processForcedAction();
                    return true;
                }
                else {
                    return this.updateEventMain();
                }
        }
        return this.checkAbort();
    };
    BattleManager.updateEventMain = function () {
        globals_1.$gameTroop.updateInterpreter();
        globals_1.$gameParty.requestMotionRefresh();
        if (globals_1.$gameTroop.isEventRunning() || this.checkBattleEnd()) {
            return true;
        }
        globals_1.$gameTroop.setupBattleEvent();
        if (globals_1.$gameTroop.isEventRunning() || SceneManager_1.SceneManager.isSceneChanging()) {
            return true;
        }
        return false;
    };
    BattleManager.isBusy = function () {
        return globals_1.$gameMessage.isBusy() || this._spriteset.isBusy() || this._logWindow.isBusy();
    };
    BattleManager.isInputting = function () {
        return this._phase === "input";
    };
    BattleManager.isInTurn = function () {
        return this._phase === "turn";
    };
    BattleManager.isTurnEnd = function () {
        return this._phase === "turnEnd";
    };
    BattleManager.isAborting = function () {
        return this._phase === "aborting";
    };
    BattleManager.isBattleEnd = function () {
        return this._phase === "battleEnd";
    };
    BattleManager.canEscape = function () {
        return this._canEscape;
    };
    BattleManager.canLose = function () {
        return this._canLose;
    };
    BattleManager.isEscaped = function () {
        return this._escaped;
    };
    BattleManager.actor = function () {
        return this._actorIndex >= 0 ? globals_1.$gameParty.members()[this._actorIndex] : null;
    };
    BattleManager.clearActor = function () {
        this.changeActor(-1, "");
    };
    BattleManager.changeActor = function (newActorIndex, lastActorActionState) {
        var lastActor = this.actor();
        this._actorIndex = newActorIndex;
        var newActor = this.actor();
        if (lastActor) {
            lastActor.setActionState(lastActorActionState);
        }
        if (newActor) {
            newActor.setActionState("inputting");
        }
    };
    BattleManager.startBattle = function () {
        this._phase = "start";
        globals_1.$gameSystem.onBattleStart();
        globals_1.$gameParty.onBattleStart();
        globals_1.$gameTroop.onBattleStart();
        this.displayStartMessages();
    };
    BattleManager.displayStartMessages = function () {
        globals_1.$gameTroop.enemyNames().forEach(function (name) {
            globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.emerge, name));
        });
        if (this._preemptive) {
            globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.preemptive, globals_1.$gameParty.name()));
        }
        else if (this._surprise) {
            globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.surprise, globals_1.$gameParty.name()));
        }
    };
    BattleManager.startInput = function () {
        this._phase = "input";
        globals_1.$gameParty.makeActions();
        globals_1.$gameTroop.makeActions();
        this.clearActor();
        if (this._surprise || !globals_1.$gameParty.canInput()) {
            this.startTurn();
        }
    };
    BattleManager.inputtingAction = function () {
        return this.actor() ? this.actor().inputtingAction() : null;
    };
    BattleManager.selectNextCommand = function () {
        do {
            if (!this.actor() || !this.actor().selectNextCommand()) {
                this.changeActor(this._actorIndex + 1, "waiting");
                if (this._actorIndex >= globals_1.$gameParty.size()) {
                    this.startTurn();
                    break;
                }
            }
        } while (!this.actor().canInput());
    };
    BattleManager.selectPreviousCommand = function () {
        do {
            if (!this.actor() || !this.actor().selectPreviousCommand()) {
                this.changeActor(this._actorIndex - 1, "undecided");
                if (this._actorIndex < 0) {
                    return;
                }
            }
        } while (!this.actor().canInput());
    };
    BattleManager.refreshStatus = function () {
        this._statusWindow.refresh();
    };
    BattleManager.startTurn = function () {
        this._phase = "turn";
        this.clearActor();
        globals_1.$gameTroop.increaseTurn();
        this.makeActionOrders();
        globals_1.$gameParty.requestMotionRefresh();
        this._logWindow.startTurn();
    };
    BattleManager.updateTurn = function () {
        globals_1.$gameParty.requestMotionRefresh();
        if (!this._subject) {
            this._subject = this.getNextSubject();
        }
        if (this._subject) {
            this.processTurn();
        }
        else {
            this.endTurn();
        }
    };
    BattleManager.processTurn = function () {
        var subject = this._subject;
        var action = subject.currentAction();
        if (action) {
            action.prepare();
            if (action.isValid()) {
                this.startAction();
            }
            subject.removeCurrentAction();
        }
        else {
            subject.onAllActionsEnd();
            this.refreshStatus();
            this._logWindow.displayAutoAffectedStatus(subject);
            this._logWindow.displayCurrentState(subject);
            this._logWindow.displayRegeneration(subject);
            this._subject = this.getNextSubject();
        }
    };
    BattleManager.endTurn = function () {
        var _this = this;
        this._phase = "turnEnd";
        this._preemptive = false;
        this._surprise = false;
        this.allBattleMembers().forEach(function (battler) {
            battler.onTurnEnd();
            _this.refreshStatus();
            _this._logWindow.displayAutoAffectedStatus(battler);
            _this._logWindow.displayRegeneration(battler);
        });
        if (this.isForcedTurn()) {
            this._turnForced = false;
        }
    };
    BattleManager.isForcedTurn = function () {
        return this._turnForced;
    };
    BattleManager.updateTurnEnd = function () {
        this.startInput();
    };
    BattleManager.getNextSubject = function () {
        for (;;) {
            var battler = this._actionBattlers.shift();
            if (!battler) {
                return null;
            }
            if (battler.isBattleMember() && battler.isAlive()) {
                return battler;
            }
        }
    };
    BattleManager.allBattleMembers = function () {
        // Actor配列 と Enemy配列 を結合するので、共通の親クラスの配列に型を変換する
        return globals_1.$gameParty.members().concat(globals_1.$gameTroop.members());
    };
    BattleManager.makeActionOrders = function () {
        var battlers = [];
        if (!this._surprise) {
            battlers = battlers.concat(globals_1.$gameParty.members());
        }
        if (!this._preemptive) {
            battlers = battlers.concat(globals_1.$gameTroop.members());
        }
        battlers.forEach(function (battler) {
            battler.makeSpeed();
        });
        battlers.sort(function (a, b) {
            return b.speed() - a.speed();
        });
        this._actionBattlers = battlers;
    };
    BattleManager.startAction = function () {
        var subject = this._subject;
        var action = subject.currentAction();
        var targets = action.makeTargets();
        this._phase = "action";
        this._action = action;
        this._targets = targets;
        subject.useItem(action.item());
        this._action.applyGlobal();
        this.refreshStatus();
        this._logWindow.startAction(subject, action, targets);
    };
    BattleManager.updateAction = function () {
        var target = this._targets.shift();
        if (target) {
            this.invokeAction(this._subject, target);
        }
        else {
            this.endAction();
        }
    };
    BattleManager.endAction = function () {
        this._logWindow.endAction(this._subject);
        this._phase = "turn";
    };
    BattleManager.invokeAction = function (subject, target) {
        this._logWindow.push("pushBaseLine");
        if (g.game.vars.random.generate() < this._action.itemCnt(target)) {
            this.invokeCounterAttack(subject, target);
        }
        else if (g.game.vars.random.generate() < this._action.itemMrf(target)) {
            this.invokeMagicReflection(subject, target);
        }
        else {
            this.invokeNormalAction(subject, target);
        }
        subject.setLastTarget(target);
        this._logWindow.push("popBaseLine");
        this.refreshStatus();
    };
    BattleManager.invokeNormalAction = function (subject, target) {
        var realTarget = this.applySubstitute(target);
        this._action.apply(realTarget);
        this._logWindow.displayActionResults(subject, realTarget);
    };
    BattleManager.invokeCounterAttack = function (subject, target) {
        var action = new GameAction_1.Game_Action(target);
        action.setAttack();
        action.apply(subject);
        this._logWindow.displayCounter(target);
        this._logWindow.displayActionResults(target, subject);
    };
    BattleManager.invokeMagicReflection = function (subject, target) {
        this._action._reflectionTarget = target;
        this._logWindow.displayReflection(target);
        this._action.apply(subject);
        this._logWindow.displayActionResults(target, subject);
    };
    BattleManager.applySubstitute = function (target) {
        if (this.checkSubstitute(target)) {
            var substitute = target.friendsUnit().substituteBattler();
            if (substitute && target !== substitute) {
                this._logWindow.displaySubstitute(substitute, target);
                return substitute;
            }
        }
        return target;
    };
    BattleManager.checkSubstitute = function (target) {
        return target.isDying() && !this._action.isCertainHit();
    };
    BattleManager.isActionForced = function () {
        return !!this._actionForcedBattler;
    };
    BattleManager.forceAction = function (battler) {
        this._actionForcedBattler = battler;
        var index = this._actionBattlers.indexOf(battler);
        if (index >= 0) {
            this._actionBattlers.splice(index, 1);
        }
    };
    BattleManager.processForcedAction = function () {
        if (this._actionForcedBattler) {
            this._turnForced = true;
            this._subject = this._actionForcedBattler;
            this._actionForcedBattler = null;
            this.startAction();
            this._subject.removeCurrentAction();
        }
    };
    BattleManager.abort = function () {
        this._phase = "aborting";
    };
    BattleManager.checkBattleEnd = function () {
        if (this._phase) {
            if (this.checkAbort()) {
                return true;
            }
            else if (globals_1.$gameParty.isAllDead()) {
                this.processDefeat();
                return true;
            }
            else if (globals_1.$gameTroop.isAllDead()) {
                this.processVictory();
                return true;
            }
        }
        return false;
    };
    BattleManager.checkAbort = function () {
        if (globals_1.$gameParty.isEmpty() || this.isAborting()) {
            SoundManager_1.SoundManager.playEscape();
            this._escaped = true;
            this.processAbort();
        }
        return false;
    };
    BattleManager.processVictory = function () {
        globals_1.$gameParty.removeBattleStates();
        globals_1.$gameParty.performVictory();
        this.playVictoryMe();
        this.replayBgmAndBgs();
        this.makeRewards();
        this.displayVictoryMessage();
        this.displayRewards();
        this.gainRewards();
        this.endBattle(0);
    };
    BattleManager.processEscape = function () {
        globals_1.$gameParty.performEscape();
        SoundManager_1.SoundManager.playEscape();
        var success = this._preemptive ? true : g.game.vars.random.generate() < this._escapeRatio;
        if (success) {
            this.displayEscapeSuccessMessage();
            this._escaped = true;
            this.processAbort();
        }
        else {
            this.displayEscapeFailureMessage();
            this._escapeRatio += 0.1;
            globals_1.$gameParty.clearActions();
            this.startTurn();
        }
        return success;
    };
    BattleManager.processAbort = function () {
        globals_1.$gameParty.removeBattleStates();
        this.replayBgmAndBgs();
        this.endBattle(1);
    };
    BattleManager.processDefeat = function () {
        this.displayDefeatMessage();
        this.playDefeatMe();
        if (this._canLose) {
            this.replayBgmAndBgs();
        }
        else {
            AudioManager_1.AudioManager.stopBgm();
        }
        this.endBattle(2);
    };
    BattleManager.endBattle = function (result) {
        this._phase = "battleEnd";
        if (this._eventCallback) {
            this._eventCallback(result);
        }
        if (result === 0) {
            globals_1.$gameSystem.onBattleWin();
        }
        else if (this._escaped) {
            globals_1.$gameSystem.onBattleEscape();
        }
    };
    BattleManager.updateBattleEnd = function () {
        if (this.isBattleTest()) {
            AudioManager_1.AudioManager.stopBgm();
            SceneManager_1.SceneManager.exit();
        }
        else if (!this._escaped && globals_1.$gameParty.isAllDead()) {
            if (this._canLose) {
                globals_1.$gameParty.reviveBattleMembers();
                SceneManager_1.SceneManager.pop();
            }
            else {
                SceneManager_1.SceneManager.goto(SceneGameOver_1.Scene_Gameover);
            }
        }
        else {
            SceneManager_1.SceneManager.pop();
        }
        this._phase = null;
    };
    BattleManager.makeRewards = function () {
        this._rewards = {};
        this._rewards.gold = globals_1.$gameTroop.goldTotal();
        this._rewards.exp = globals_1.$gameTroop.expTotal();
        this._rewards.items = globals_1.$gameTroop.makeDropItems();
    };
    BattleManager.displayVictoryMessage = function () {
        globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.victory, globals_1.$gameParty.name()));
    };
    BattleManager.displayDefeatMessage = function () {
        globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.defeat, globals_1.$gameParty.name()));
    };
    BattleManager.displayEscapeSuccessMessage = function () {
        globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.escapeStart, globals_1.$gameParty.name()));
    };
    BattleManager.displayEscapeFailureMessage = function () {
        globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.escapeStart, globals_1.$gameParty.name()));
        globals_1.$gameMessage.add("\\." + TextManager_1.TextManager.escapeFailure);
    };
    BattleManager.displayRewards = function () {
        this.displayExp();
        this.displayGold();
        this.displayDropItems();
    };
    BattleManager.displayExp = function () {
        var exp = this._rewards.exp;
        if (exp > 0) {
            var text = Utils_1.Utils.format(TextManager_1.TextManager.obtainExp, exp, TextManager_1.TextManager.exp);
            globals_1.$gameMessage.add("\\." + text);
        }
    };
    BattleManager.displayGold = function () {
        var gold = this._rewards.gold;
        if (gold > 0) {
            globals_1.$gameMessage.add("\\." + Utils_1.Utils.format(TextManager_1.TextManager.obtainGold, gold));
        }
    };
    BattleManager.displayDropItems = function () {
        var items = this._rewards.items;
        if (items.length > 0) {
            globals_1.$gameMessage.newPage();
            items.forEach(function (item) {
                globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.obtainItem, item.name));
            });
        }
    };
    BattleManager.gainRewards = function () {
        this.gainExp();
        this.gainGold();
        this.gainDropItems();
    };
    BattleManager.gainExp = function () {
        var exp = this._rewards.exp;
        globals_1.$gameParty.allMembers().forEach(function (actor) {
            actor.gainExp(exp);
        });
    };
    BattleManager.gainGold = function () {
        globals_1.$gameParty.gainGold(this._rewards.gold);
    };
    BattleManager.gainDropItems = function () {
        var items = this._rewards.items;
        items.forEach(function (item) {
            globals_1.$gameParty.gainItem(item, 1);
        });
    };
    return BattleManager;
}());
exports.BattleManager = BattleManager;

},{"../core/Utils":28,"../objects/GameAction":44,"../scenes/SceneGameOver":80,"./AudioManager":33,"./SceneManager":39,"./SoundManager":40,"./TextManager":42,"./globals":43}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigManager = void 0;
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("./AudioManager");
var StorageManager_1 = require("./StorageManager");
var ConfigManager = /** @class */ (function () {
    function ConfigManager() {
    }
    Object.defineProperty(ConfigManager, "bgmVolume", {
        get: function () {
            return AudioManager_1.AudioManager.bgmVolume;
        },
        set: function (value) {
            AudioManager_1.AudioManager.bgmVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConfigManager, "bgsVolume", {
        get: function () {
            return AudioManager_1.AudioManager.bgsVolume;
        },
        set: function (value) {
            AudioManager_1.AudioManager.bgsVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConfigManager, "meVolume", {
        get: function () {
            return AudioManager_1.AudioManager.meVolume;
        },
        set: function (value) {
            AudioManager_1.AudioManager.meVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConfigManager, "seVolume", {
        get: function () {
            return AudioManager_1.AudioManager.seVolume;
        },
        set: function (value) {
            AudioManager_1.AudioManager.seVolume = value;
        },
        enumerable: false,
        configurable: true
    });
    ConfigManager.load = function () {
        var json;
        var config = {};
        try {
            json = StorageManager_1.StorageManager.load(-1);
        }
        catch (e) {
            console.error(e);
        }
        if (json) {
            config = JSON.parse(json);
        }
        ConfigManager.applyData(config);
    };
    ConfigManager.save = function () {
        StorageManager_1.StorageManager.save(-1, JSON.stringify(ConfigManager.makeData()));
    };
    ConfigManager.makeData = function () {
        var config = {};
        config.alwaysDash = this.alwaysDash;
        config.commandRemember = this.commandRemember;
        config.bgmVolume = this.bgmVolume;
        config.bgsVolume = this.bgsVolume;
        config.meVolume = this.meVolume;
        config.seVolume = this.seVolume;
        return config;
    };
    ConfigManager.applyData = function (config) {
        this.alwaysDash = this.readFlag(config, "alwaysDash");
        this.commandRemember = this.readFlag(config, "commandRemember");
        this.bgmVolume = this.readVolume(config, "bgmVolume");
        this.bgsVolume = this.readVolume(config, "bgsVolume");
        this.meVolume = this.readVolume(config, "meVolume");
        this.seVolume = this.readVolume(config, "seVolume");
    };
    ConfigManager.readFlag = function (config, name) {
        return !!config[name];
    };
    ConfigManager.readVolume = function (config, name) {
        var value = config[name];
        if (value !== undefined) {
            return Utils_1.Utils.clamp(Number(value), 0, 100);
        }
        else {
            return 100;
        }
    };
    ConfigManager.alwaysDash = false;
    ConfigManager.commandRemember = false;
    return ConfigManager;
}());
exports.ConfigManager = ConfigManager;

},{"../core/Utils":28,"./AudioManager":33,"./StorageManager":41}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataManager = void 0;
var Graphics_1 = require("../core/Graphics");
var Utils_1 = require("../core/Utils");
var globals_1 = require("./globals");
var ImageManager_1 = require("./ImageManager");
var StorageManager_1 = require("./StorageManager");
var DataManager = /** @class */ (function () {
    function DataManager() {
    }
    DataManager.loadDatabase = function () {
        // const test = this.isBattleTest() || this.isEventTest();
        // const prefix = test ? "Test_" : "";
        var prefix = "";
        for (var i = 0; i < this._databaseFiles.length; i++) {
            var name = this._databaseFiles[i].name;
            var src = this._databaseFiles[i].src;
            this.loadDataFile(name, prefix + src);
        }
        // if (this.isEventTest()) {
        // 	this.loadDataFile("$testEvent", prefix + "Event.json");
        // }
    };
    DataManager.loadDataFile = function (name, src) {
        // var xhr = new XMLHttpRequest();
        // var url = 'data/' + src;
        // xhr.open('GET', url);
        // xhr.overrideMimeType('application/json');
        // xhr.onload = function() {
        // 	if (xhr.status < 400) {
        // 		window[name] = JSON.parse(xhr.responseText);
        // 		console.log("DataManager loaded: " + name);
        // 		DataManager.onLoad(window[name]);
        // 	}
        // };
        // xhr.onerror = this._mapLoader || function() {
        // 	DataManager._errorUrl = DataManager._errorUrl || url;
        // };
        // window[name] = null;
        // xhr.send();
        // TODO: なんとかして放り込む
        // window[name] = JSON.parse(xhr.responseText);
        this._requestedDataNames.push({ name: name, src: src });
    };
    DataManager.isDatabaseLoaded = function () {
        // this.checkError();
        // for (let i = 0; i < this._databaseFiles.length; i++) {
        // 	if (!window[this._databaseFiles[i].name]) {
        // 		return false;
        // 	}
        // }
        return true;
    };
    DataManager.loadMapData = function (mapId) {
        if (mapId > 0) {
            // const filename = 'Map%1.json'.format(mapId.padZero(3));
            var padded = mapId + "";
            for (var i = padded.length; i < 3; i++) {
                padded = "0" + padded;
            }
            var filename = "Map" + padded + ".json";
            // this._mapLoader = ResourceHandler.createLoader('data/' + filename, this.loadDataFile.bind(this, '$dataMap', filename));
            this.loadDataFile("$dataMap", filename);
        }
        else {
            this.makeEmptyMap();
        }
    };
    DataManager.makeEmptyMap = function () {
        var dataMap = {};
        dataMap.data = [];
        dataMap.events = [];
        dataMap.width = 100;
        dataMap.height = 100;
        dataMap.scrollType = 3;
        (0, globals_1.set$dataMap)(dataMap);
    };
    DataManager.isMapLoaded = function () {
        this.checkError();
        return !!globals_1.$dataMap;
    };
    DataManager.onLoad = function (object) {
        var array;
        if (object === globals_1.$dataMap) {
            this.extractMetadata(object);
            array = object.events;
        }
        else {
            array = object;
        }
        if (Array.isArray(array)) {
            for (var i = 0; i < array.length; i++) {
                var data = array[i];
                if (data && data.note !== undefined) {
                    this.extractMetadata(data);
                }
            }
        }
        if (object === globals_1.$dataSystem) {
            // 一旦無視。
            // Decrypter.hasEncryptedImages = !!object.hasEncryptedImages;
            // Decrypter.hasEncryptedAudio = !!object.hasEncryptedAudio;
            // encrypted かどうかで動作を変えたくてこの様になっているみたい
            // Scene_boot側で明示的に呼び出す
            // Scene_Boot.loadSystemImages();
        }
    };
    DataManager.extractMetadata = function (data) {
        var re = /<([^<>:]+)(:?)([^>]*)>/g;
        data.meta = {};
        for (;;) {
            var match = re.exec(data.note);
            if (match) {
                if (match[2] === ":") {
                    data.meta[match[1]] = match[3];
                }
                else {
                    data.meta[match[1]] = true;
                }
            }
            else {
                break;
            }
        }
    };
    DataManager.checkError = function () {
        if (DataManager._errorUrl) {
            throw new Error("Failed to load: " + DataManager._errorUrl);
        }
    };
    DataManager.isBattleTest = function () {
        return Utils_1.Utils.isOptionValid("btest");
    };
    DataManager.isEventTest = function () {
        return Utils_1.Utils.isOptionValid("etest");
    };
    DataManager.isSkill = function (item) {
        // return item && $dataSkills.contains(item);
        return item && globals_1.$dataSkills.indexOf(item) >= 0;
    };
    DataManager.isItem = function (item) {
        // return item && $dataItems.contains(item);
        return item && globals_1.$dataItems.indexOf(item) >= 0;
    };
    DataManager.isWeapon = function (item) {
        // return item && $dataWeapons.contains(item);
        return item && globals_1.$dataWeapons.indexOf(item) >= 0;
    };
    DataManager.isArmor = function (item) {
        // return item && $dataArmors.contains(item);
        return item && globals_1.$dataArmors.indexOf(item) >= 0;
    };
    DataManager.createGameObjects = function () {
        (0, globals_1.createGlobals)();
    };
    DataManager.setupNewGame = function () {
        this.createGameObjects();
        this.selectSavefileForNewGame();
        globals_1.$gameParty.setupStartingMembers();
        globals_1.$gamePlayer.reserveTransfer(globals_1.$dataSystem.startMapId, globals_1.$dataSystem.startX, globals_1.$dataSystem.startY);
        Graphics_1.Graphics.frameCount = 0;
        this._onReset.fire();
    };
    DataManager.setupBattleTest = function () {
        // this.createGameObjects();
        // $gameParty.setupBattleTest();
        // BattleManager.setup($dataSystem.testTroopId, true, false);
        // BattleManager.setBattleTest(true);
        // BattleManager.playBattleBgm();
    };
    DataManager.setupEventTest = function () {
        // this.createGameObjects();
        // this.selectSavefileForNewGame();
        // $gameParty.setupStartingMembers();
        // $gamePlayer.reserveTransfer(-1, 8, 6);
        // $gamePlayer.setTransparent(false);
    };
    DataManager.loadGlobalInfo = function () {
        var json;
        try {
            json = StorageManager_1.StorageManager.load(0);
        }
        catch (e) {
            console.error(e);
            return [];
        }
        if (json) {
            var globalInfo = JSON.parse(json);
            for (var i = 1; i <= this.maxSavefiles(); i++) {
                if (!StorageManager_1.StorageManager.exists(i)) {
                    delete globalInfo[i];
                }
            }
            return globalInfo;
        }
        else {
            return [];
        }
    };
    DataManager.saveGlobalInfo = function (info) {
        StorageManager_1.StorageManager.save(0, JSON.stringify(info));
    };
    DataManager.isThisGameFile = function (savefileId) {
        var globalInfo = this.loadGlobalInfo();
        if (globalInfo && globalInfo[savefileId]) {
            if (StorageManager_1.StorageManager.isLocalMode()) {
                return true;
            }
            else {
                var savefile = globalInfo[savefileId];
                return savefile.globalId === this._globalId && savefile.title === globals_1.$dataSystem.gameTitle;
            }
        }
        else {
            return false;
        }
    };
    DataManager.isAnySavefileExists = function () {
        var globalInfo = this.loadGlobalInfo();
        if (globalInfo) {
            for (var i = 1; i < globalInfo.length; i++) {
                if (this.isThisGameFile(i)) {
                    return true;
                }
            }
        }
        return false;
    };
    DataManager.latestSavefileId = function () {
        var globalInfo = this.loadGlobalInfo();
        var savefileId = 1;
        var timestamp = 0;
        if (globalInfo) {
            for (var i = 1; i < globalInfo.length; i++) {
                if (this.isThisGameFile(i) && globalInfo[i].timestamp > timestamp) {
                    timestamp = globalInfo[i].timestamp;
                    savefileId = i;
                }
            }
        }
        return savefileId;
    };
    DataManager.loadAllSavefileImages = function () {
        var globalInfo = this.loadGlobalInfo();
        if (globalInfo) {
            for (var i = 1; i < globalInfo.length; i++) {
                if (this.isThisGameFile(i)) {
                    var info = globalInfo[i];
                    this.loadSavefileImages(info);
                }
            }
        }
    };
    DataManager.loadSavefileImages = function (info) {
        if (info.characters) {
            for (var i = 0; i < info.characters.length; i++) {
                ImageManager_1.ImageManager.reserveCharacter(info.characters[i][0]);
            }
        }
        if (info.faces) {
            for (var j = 0; j < info.faces.length; j++) {
                ImageManager_1.ImageManager.reserveFace(info.faces[j][0]);
            }
        }
    };
    DataManager.maxSavefiles = function () {
        return 20;
    };
    DataManager.saveGame = function (savefileId) {
        try {
            StorageManager_1.StorageManager.backup(savefileId);
            return this.saveGameWithoutRescue(savefileId);
        }
        catch (e) {
            console.error(e);
            try {
                StorageManager_1.StorageManager.remove(savefileId);
                StorageManager_1.StorageManager.restoreBackup(savefileId);
            }
            catch (e2) {
                //
            }
            return false;
        }
    };
    DataManager.loadGame = function (savefileId) {
        try {
            return this.loadGameWithoutRescue(savefileId);
        }
        catch (e) {
            console.error(e);
            return false;
        }
    };
    DataManager.loadSavefileInfo = function (savefileId) {
        var globalInfo = this.loadGlobalInfo();
        return globalInfo && globalInfo[savefileId] ? globalInfo[savefileId] : null;
    };
    DataManager.lastAccessedSavefileId = function () {
        return this._lastAccessedId;
    };
    DataManager.saveGameWithoutRescue = function (_savefileId) {
        // const json = JsonEx.stringify(this.makeSaveContents());
        // if (json.length >= 200000) {
        // 	console.warn("Save data too big!");
        // }
        // StorageManager.save(savefileId, json);
        // this._lastAccessedId = savefileId;
        // const globalInfo = this.loadGlobalInfo() || [];
        // globalInfo[savefileId] = this.makeSavefileInfo();
        // this.saveGlobalInfo(globalInfo);
        return false;
    };
    DataManager.loadGameWithoutRescue = function (_savefileId) {
        // const globalInfo = this.loadGlobalInfo();
        // if (this.isThisGameFile(savefileId)) {
        // 	const json = StorageManager.load(savefileId);
        // 	this.createGameObjects();
        // 	this.extractSaveContents(JsonEx.parse(json));
        // 	this._lastAccessedId = savefileId;
        // 	return true;
        // } else {
        // 	return false;
        // }
        return false;
    };
    DataManager.selectSavefileForNewGame = function () {
        var globalInfo = this.loadGlobalInfo();
        this._lastAccessedId = 1;
        if (globalInfo) {
            var numSavefiles = Math.max(0, globalInfo.length - 1);
            if (numSavefiles < this.maxSavefiles()) {
                this._lastAccessedId = numSavefiles + 1;
            }
            else {
                var timestamp = Number.MAX_VALUE;
                for (var i = 1; i < globalInfo.length; i++) {
                    if (!globalInfo[i]) {
                        this._lastAccessedId = i;
                        break;
                    }
                    if (globalInfo[i].timestamp < timestamp) {
                        timestamp = globalInfo[i].timestamp;
                        this._lastAccessedId = i;
                    }
                }
            }
        }
    };
    DataManager.makeSavefileInfo = function () {
        var info = {};
        info.globalId = this._globalId;
        info.title = globals_1.$dataSystem.gameTitle;
        info.characters = globals_1.$gameParty.charactersForSavefile();
        info.faces = globals_1.$gameParty.facesForSavefile();
        info.playtime = globals_1.$gameSystem.playtimeText();
        info.timestamp = Date.now();
        return info;
    };
    DataManager.makeSaveContents = function () {
        // A save data does not contain $gameTemp, $gameMessage, and $gameTroop.
        var contents = {};
        contents.system = globals_1.$gameSystem;
        contents.screen = globals_1.$gameScreen;
        contents.timer = globals_1.$gameTimer;
        contents.switches = globals_1.$gameSwitches;
        contents.variables = globals_1.$gameVariables;
        contents.selfSwitches = globals_1.$gameSelfSwitches;
        contents.actors = globals_1.$gameActors;
        contents.party = globals_1.$gameParty;
        contents.map = globals_1.$gameMap;
        contents.player = globals_1.$gamePlayer;
        return contents;
    };
    DataManager.extractSaveContents = function (_contents) {
        //
    };
    DataManager._globalId = "RPGMV";
    DataManager._lastAccessedId = 1;
    DataManager._errorUrl = null;
    DataManager._onReset = new g.Trigger();
    DataManager._requestedDataNames = [];
    DataManager._databaseFiles = [
        { name: "$dataActors", src: "Actors.json" },
        { name: "$dataClasses", src: "Classes.json" },
        { name: "$dataSkills", src: "Skills.json" },
        { name: "$dataItems", src: "Items.json" },
        { name: "$dataWeapons", src: "Weapons.json" },
        { name: "$dataArmors", src: "Armors.json" },
        { name: "$dataEnemies", src: "Enemies.json" },
        { name: "$dataTroops", src: "Troops.json" },
        { name: "$dataStates", src: "States.json" },
        { name: "$dataAnimations", src: "Animations.json" },
        { name: "$dataTilesets", src: "Tilesets.json" },
        { name: "$dataCommonEvents", src: "CommonEvents.json" },
        { name: "$dataSystem", src: "System.json" },
        { name: "$dataMapInfos", src: "MapInfos.json" }
    ];
    return DataManager;
}());
exports.DataManager = DataManager;

},{"../core/Graphics":14,"../core/Utils":28,"./ImageManager":37,"./StorageManager":41,"./globals":43}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageManager = void 0;
var Bitmap_1 = require("../core/Bitmap");
var ImageCache_1 = require("../core/ImageCache");
var RequestQueue_1 = require("../core/RequestQueue");
var ImageManager = /** @class */ (function () {
    function ImageManager() {
    }
    ImageManager.loadAnimation = function (filename, hue) {
        return this.loadBitmap("img/animations/", filename, hue, true);
    };
    ImageManager.loadBattleback1 = function (filename, hue) {
        return this.loadBitmap("img/battlebacks1/", filename, hue, true);
    };
    ImageManager.loadBattleback2 = function (filename, hue) {
        return this.loadBitmap("img/battlebacks2/", filename, hue, true);
    };
    ImageManager.loadEnemy = function (filename, hue) {
        return this.loadBitmap("img/enemies/", filename, hue, true);
    };
    ImageManager.loadCharacter = function (filename, hue) {
        return this.loadBitmap("img/characters/", filename, hue, false);
    };
    ImageManager.loadFace = function (filename, hue) {
        return this.loadBitmap("img/faces/", filename, hue, true);
    };
    ImageManager.loadParallax = function (filename, hue) {
        return this.loadBitmap("img/parallaxes/", filename, hue, true);
    };
    ImageManager.loadPicture = function (filename, hue) {
        return this.loadBitmap("img/pictures/", filename, hue, true);
    };
    ImageManager.loadSvActor = function (filename, hue) {
        return this.loadBitmap("img/sv_actors/", filename, hue, false);
    };
    ImageManager.loadSvEnemy = function (filename, hue) {
        return this.loadBitmap("img/sv_enemies/", filename, hue, true);
    };
    ImageManager.loadSystem = function (filename, hue) {
        return this.loadBitmap("img/system/", filename, hue, false);
    };
    ImageManager.loadTileset = function (filename, hue) {
        return this.loadBitmap("img/tilesets/", filename, hue, false);
    };
    ImageManager.loadTitle1 = function (filename, hue) {
        return this.loadBitmap("img/titles1/", filename, hue, true);
    };
    ImageManager.loadTitle2 = function (filename, hue) {
        return this.loadBitmap("img/titles2/", filename, hue, true);
    };
    ImageManager.loadBitmap = function (folder, filename, hue, smooth) {
        if (filename) {
            // Akashic Engine では画像パスは単に game.json に記載されているアセットを指定するためのキー情報にすぎないため、エンコード・デコードは不要
            // const path = folder + encodeURIComponent(filename) + ".png";
            var path = "".concat(folder).concat(filename, ".png");
            var bitmap = this.loadNormalBitmap(path, hue || 0);
            bitmap.smooth = smooth;
            return bitmap;
        }
        else {
            return this.loadEmptyBitmap();
        }
    };
    ImageManager.loadEmptyBitmap = function () {
        var empty = this._imageCache.get("empty");
        if (!empty) {
            empty = new Bitmap_1.Bitmap(1, 1);
            this._imageCache.add("empty", empty);
            this._imageCache.reserve("empty", empty, this._systemReservationId);
        }
        return empty;
    };
    ImageManager.loadNormalBitmap = function (path, hue) {
        var key = this._generateCacheKey(path, hue);
        var bitmap = this._imageCache.get(key);
        if (!bitmap) {
            // Akashic Engine では画像パスは単に game.json に記載されているアセットを指定するためのキー情報にすぎないため、エンコード・デコードは不要
            // bitmap = Bitmap.load(decodeURIComponent(path));
            bitmap = Bitmap_1.Bitmap.load(path);
            bitmap.addLoadListener(function () {
                bitmap.rotateHue(hue);
            });
            this._imageCache.add(key, bitmap);
        }
        else if (!bitmap.isReady()) {
            bitmap.decode();
        }
        return bitmap;
    };
    ImageManager.clear = function () {
        this._imageCache = new ImageCache_1.ImageCache();
    };
    ImageManager.isReady = function () {
        return this._imageCache.isReady();
    };
    ImageManager.isObjectCharacter = function (filename) {
        var sign = filename.match(/^[\!\$]+/);
        // return sign && sign[0].contains("!");
        return sign && sign[0].indexOf("!") >= 0;
    };
    ImageManager.isBigCharacter = function (filename) {
        var sign = filename.match(/^[\!\$]+/);
        // return sign && sign[0].contains("$");
        return sign && sign[0].indexOf("$") >= 0;
    };
    ImageManager.isZeroParallax = function (filename) {
        return filename.charAt(0) === "!";
    };
    ImageManager.reserveAnimation = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/animations/", filename, hue, true, reservationId);
    };
    ImageManager.reserveBattleback1 = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/battlebacks1/", filename, hue, true, reservationId);
    };
    ImageManager.reserveBattleback2 = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/battlebacks2/", filename, hue, true, reservationId);
    };
    ImageManager.reserveEnemy = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/enemies/", filename, hue, true, reservationId);
    };
    ImageManager.reserveCharacter = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/characters/", filename, hue, false, reservationId);
    };
    ImageManager.reserveFace = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/faces/", filename, hue, true, reservationId);
    };
    ImageManager.reserveParallax = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/parallaxes/", filename, hue, true, reservationId);
    };
    ImageManager.reservePicture = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/pictures/", filename, hue, true, reservationId);
    };
    ImageManager.reserveSvActor = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/sv_actors/", filename, hue, false, reservationId);
    };
    ImageManager.reserveSvEnemy = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/sv_enemies/", filename, hue, true, reservationId);
    };
    ImageManager.reserveSystem = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/system/", filename, hue, false, reservationId || this._systemReservationId);
    };
    ImageManager.reserveTileset = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/tilesets/", filename, hue, false, reservationId);
    };
    ImageManager.reserveTitle1 = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/titles1/", filename, hue, true, reservationId);
    };
    ImageManager.reserveTitle2 = function (filename, hue, reservationId) {
        return this.reserveBitmap("img/titles2/", filename, hue, true, reservationId);
    };
    ImageManager.reserveBitmap = function (folder, filename, hue, smooth, reservationId) {
        if (filename) {
            // Akashic Engine では画像パスは単に game.json に記載されているアセットを指定するためのキー情報にすぎないため、エンコード・デコードは不要
            // const path = folder + encodeURIComponent(filename) + ".png";
            var path = "".concat(folder).concat(filename, ".png");
            var bitmap = this.reserveNormalBitmap(path, hue || 0, reservationId || this._defaultReservationId);
            bitmap.smooth = smooth;
            return bitmap;
        }
        else {
            return this.loadEmptyBitmap();
        }
    };
    ImageManager.reserveNormalBitmap = function (path, hue, reservationId) {
        var bitmap = this.loadNormalBitmap(path, hue);
        this._imageCache.reserve(this._generateCacheKey(path, hue), bitmap, reservationId);
        return bitmap;
    };
    ImageManager.releaseReservation = function (reservationId) {
        this._imageCache.releaseReservation(reservationId);
    };
    ImageManager.setDefaultReservationId = function (reservationId) {
        this._defaultReservationId = reservationId;
    };
    ImageManager.requestAnimation = function (filename, hue) {
        return this.requestBitmap("img/animations/", filename, hue, true);
    };
    ImageManager.requestBattleback1 = function (filename, hue) {
        return this.requestBitmap("img/battlebacks1/", filename, hue, true);
    };
    ImageManager.requestBattleback2 = function (filename, hue) {
        return this.requestBitmap("img/battlebacks2/", filename, hue, true);
    };
    ImageManager.requestEnemy = function (filename, hue) {
        return this.requestBitmap("img/enemies/", filename, hue, true);
    };
    ImageManager.requestCharacter = function (filename, hue) {
        return this.requestBitmap("img/characters/", filename, hue, false);
    };
    ImageManager.requestFace = function (filename, hue) {
        return this.requestBitmap("img/faces/", filename, hue, true);
    };
    ImageManager.requestParallax = function (filename, hue) {
        return this.requestBitmap("img/parallaxes/", filename, hue, true);
    };
    ImageManager.requestPicture = function (filename, hue) {
        return this.requestBitmap("img/pictures/", filename, hue, true);
    };
    ImageManager.requestSvActor = function (filename, hue) {
        return this.requestBitmap("img/sv_actors/", filename, hue, false);
    };
    ImageManager.requestSvEnemy = function (filename, hue) {
        return this.requestBitmap("img/sv_enemies/", filename, hue, true);
    };
    ImageManager.requestSystem = function (filename, hue) {
        return this.requestBitmap("img/system/", filename, hue, false);
    };
    ImageManager.requestTileset = function (filename, hue) {
        return this.requestBitmap("img/tilesets/", filename, hue, false);
    };
    ImageManager.requestTitle1 = function (filename, hue) {
        return this.requestBitmap("img/titles1/", filename, hue, true);
    };
    ImageManager.requestTitle2 = function (filename, hue) {
        return this.requestBitmap("img/titles2/", filename, hue, true);
    };
    ImageManager.requestBitmap = function (folder, filename, hue, smooth) {
        if (filename) {
            // Akashic Engine では画像パスは単に game.json に記載されているアセットを指定するためのキー情報にすぎないため、エンコード・デコードは不要
            // const path = folder + encodeURIComponent(filename) + ".png";
            var path = "".concat(folder).concat(filename, ".png");
            var bitmap = this.requestNormalBitmap(path, hue || 0);
            bitmap.smooth = smooth;
            return bitmap;
        }
        else {
            return this.loadEmptyBitmap();
        }
    };
    ImageManager.requestNormalBitmap = function (path, hue) {
        var key = this._generateCacheKey(path, hue);
        var bitmap = this._imageCache.get(key);
        if (!bitmap) {
            bitmap = Bitmap_1.Bitmap.request(path);
            bitmap.addLoadListener(function () {
                bitmap.rotateHue(hue);
            });
            this._imageCache.add(key, bitmap);
            this._requestQueue.enqueue(key, bitmap);
        }
        else {
            this._requestQueue.raisePriority(key);
        }
        return bitmap;
    };
    ImageManager.update = function () {
        this._requestQueue.update();
    };
    ImageManager.clearRequest = function () {
        this._requestQueue.clear();
    };
    ImageManager._generateCacheKey = function (path, hue) {
        return path + ":" + hue;
    };
    ImageManager._imageCache = new ImageCache_1.ImageCache();
    ImageManager._requestQueue = new RequestQueue_1.RequestQueue();
    return ImageManager;
}());
exports.ImageManager = ImageManager;

},{"../core/Bitmap":13,"../core/ImageCache":15,"../core/RequestQueue":19}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginManager = void 0;
var PluginManager = /** @class */ (function () {
    function PluginManager() {
    }
    PluginManager.setup = function (plugins) {
        var _this = this;
        plugins.forEach(function (plugin) {
            if (!plugin.status || _this._scripts.indexOf(plugin.name) !== -1) {
                return;
            }
            _this.setParameters(plugin.name, plugin.parameters);
            _this.loadScript(plugin.name);
            _this._scripts.push(plugin.name);
        });
    };
    PluginManager.checkErrors = function () {
        var url = this._errorUrls.shift();
        if (url) {
            throw new Error("Failed to load: ".concat(url));
        }
    };
    PluginManager.parameters = function (name) {
        return this._parameters[name.toLowerCase()] || {};
    };
    PluginManager.setParameters = function (name, parameters) {
        this._parameters[name.toLowerCase()] = parameters;
    };
    PluginManager.loadScript = function (name) {
        if (!g.game.assets[name]) {
            throw new Error("not found asset: ".concat(name));
        }
        g.game._moduleManager._require("".concat(name));
    };
    PluginManager.onError = function (e) {
        this._errorUrls.push(e.target._url);
    };
    PluginManager._scripts = [];
    PluginManager._errorUrls = [];
    PluginManager._parameters = {};
    return PluginManager;
}());
exports.PluginManager = PluginManager;

},{}],39:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneManager = exports.CustomLoadingScene = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Graphics_1 = require("../core/Graphics");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("./AudioManager");
var DataManager_1 = require("./DataManager");
var GL = require("./globals");
var ImageManager_1 = require("./ImageManager");
var PluginManager_1 = require("./PluginManager");
/**
 * ダウンロード済みのアセットを利用可能にする。
 *
 * @param targetScene アセットをロードしているシーン
 */
function assignAsset(targetScene) {
    // ダウンロード完了したデータを利用可能にする。
    // TODO v3 のアセットアクセッサ (g.game.scene().asset) を使うようにして、この代入をなくす。
    DataManager_1.DataManager._requestedDataNames = DataManager_1.DataManager._requestedDataNames.filter(function (pair) {
        // NOTE: ! グローバル変数に変数名でアクセスしている。
        // グローバル変数ではなくハッシュテーブル的なものにすべて収まっている形にしたほうが品が良いかも。
        // window[pair.name] = JSON.parse((pushedScene.assets[Utils.flatten(pair.src)] as g.TextAsset).data);
        // DataManager.onLoad(window[pair.name]);
        var anAsset = targetScene.assets[Utils_1.Utils.flatten(pair.src)];
        if (anAsset) {
            // TODO: グローバル変数に直接代入するのではなく、setter経由で値を渡すように
            GL[pair.name] = JSON.parse(anAsset.data);
            DataManager_1.DataManager.onLoad(GL[pair.name]);
        }
        return !anAsset;
    });
    // グローバル変数$data~の値更新後すぐに利用箇所への反映を行う(利用箇所の実行タイミングが不明なので)。
    DataManager_1.DataManager._onReset.fire();
}
function createLoadingLocalScene() {
    var scene = new g.Scene({
        game: g.game,
        local: true,
        name: "loadingLocalScene",
        seethrough: true
    });
    scene.onLoad.add(function () {
        scene.onUpdate.add(function () {
            if (ImageManager_1.ImageManager.isReady()) {
                g.game.popScene();
            }
        });
    });
    return scene;
}
var CustomLoadingScene = /** @class */ (function (_super) {
    __extends(CustomLoadingScene, _super);
    function CustomLoadingScene(param) {
        var _this = this;
        param.local = true;
        var assetIds = param.assetIds;
        param.assetIds = null;
        _this = _super.call(this, param) || this;
        _this.assetIds = assetIds;
        _this.targetScene = param.targetScene;
        _this.onLoad.handle(_this, _this._onLoaded);
        return _this;
    }
    CustomLoadingScene.prototype._onLoaded = function () {
        var _this = this;
        this.append(g.SpriteFactory.createSpriteFromScene(this, this.targetScene));
        // すべて読み込みが終わるとcallbackが呼び出される模様。
        this.targetScene.requestAssets(this.assetIds, function () {
            _this.assignAsset();
            g.game.popScene();
        });
        return true;
    };
    CustomLoadingScene.prototype.assignAsset = function () {
        assignAsset(this.targetScene);
    };
    return CustomLoadingScene;
}(g.Scene));
exports.CustomLoadingScene = CustomLoadingScene;
// MEMO: このクラスは本当に必要か？
var SceneAssetHolder = /** @class */ (function (_super) {
    __extends(SceneAssetHolder, _super);
    function SceneAssetHolder(scene, callback) {
        var _this = _super.call(this, {
            assetManager: scene._sceneAssetHolder._assetManager,
            assetIds: scene._sceneAssetHolder._assetIds,
            handlerSet: scene._sceneAssetHolder._handlerSet,
            userData: scene._sceneAssetHolder.userData
        }) || this;
        _this._scene = scene;
        _this.callback = callback;
        return _this;
    }
    SceneAssetHolder.prototype._onAssetLoad = function (asset) {
        var hs = this._handlerSet;
        if (this.destroyed() || hs.owner.destroyed())
            return;
        this._scene.assets[asset.id] = asset;
        this._scene.onAssetLoad.fire(asset);
        this._scene.onAssetLoadComplete.fire(asset);
        hs.handleLoad.call(hs.owner, asset);
        this._assets.push(asset);
        if (this.callback) {
            this.waitingAssetsCount += this.callback(asset, this._assetManager, this);
        }
        --this.waitingAssetsCount;
        if (this.waitingAssetsCount > 0)
            return;
        if (this.waitingAssetsCount < 0)
            throw g.ExceptionFactory.createAssertionError("SceneAssetHolder#_onAssetLoad: broken waitingAssetsCount");
        hs.handleFinish.call(hs.owner, this, true);
    };
    return SceneAssetHolder;
}(g.AssetHolder));
var SceneManager = /** @class */ (function () {
    function SceneManager() {
    }
    // if (!Utils.isMobileSafari()) SceneManager._currentTime = SceneManager._getTimeInMsWithoutMobileSafari();
    SceneManager._getTimeInMsWithoutMobileSafari = function () {
        // return performance.now();
        return Date.now();
    };
    SceneManager.run = function (sceneClass) {
        try {
            this.initialize();
            this.goto(sceneClass);
            this.requestUpdate();
        }
        catch (e) {
            this.catchException(e);
        }
    };
    SceneManager.initialize = function () {
        this.initGraphics();
        this.checkFileAccess();
        this.initAudio();
        this.initInput();
        this.initNwjs();
        this.checkPluginErrors();
        this.setupErrorHandlers();
    };
    SceneManager.initGraphics = function () {
        var type = this.preferableRendererType();
        Graphics_1.Graphics.initialize(this._screenWidth, this._screenHeight, type);
        Graphics_1.Graphics.boxWidth = this._boxWidth;
        Graphics_1.Graphics.boxHeight = this._boxHeight;
        Graphics_1.Graphics.setLoadingImage("img/system/Loading.png");
        // if (Utils.isOptionValid("showfps")) {
        // 	Graphics.showFps();
        // }
        // if (type === "webgl") {
        // 	this.checkWebGL();
        // }
    };
    SceneManager.preferableRendererType = function () {
        // if (Utils.isOptionValid("canvas")) {
        // 	return "canvas";
        // } else if (Utils.isOptionValid("webgl")) {
        // 	return "webgl";
        // } else {
        // 	return "auto";
        // }
        return "auto";
    };
    SceneManager.shouldUseCanvasRenderer = function () {
        // return Utils.isMobileDevice();
        return true;
    };
    SceneManager.checkWebGL = function () {
        // if (!Graphics.hasWebGL()) {
        // 	throw new Error("Your browser does not support WebGL.");
        // }
    };
    SceneManager.checkFileAccess = function () {
        // if (!Utils.canReadGameFiles()) {
        // 	throw new Error("Your browser does not allow to read local files.");
        // }
    };
    SceneManager.initAudio = function () {
        // const noAudio = Utils.isOptionValid("noaudio");
        // if (!WebAudio.initialize(noAudio) && !noAudio) {
        // 	throw new Error("Your browser does not support Web Audio API.");
        // }
    };
    SceneManager.initInput = function () {
        // Input.initialize();
        TouchInput_1.TouchInput.initialize();
    };
    SceneManager.initNwjs = function () {
        // if (Utils.isNwjs()) {
        // 	const gui = require("nw.gui");
        // 	const win = gui.Window.get();
        // 	if (process.platform === "darwin" && !win.menu) {
        // 		const menubar = new gui.Menu({ type: "menubar" });
        // 		const option = { hideEdit: true, hideWindow: true };
        // 		menubar.createMacBuiltin("Game", option);
        // 		win.menu = menubar;
        // 	}
        // }
    };
    SceneManager.checkPluginErrors = function () {
        PluginManager_1.PluginManager.checkErrors();
    };
    SceneManager.setupErrorHandlers = function () {
        // (window as any).addEventListener("error", this.onError.bind(this));
        // (document as any).addEventListener("keydown", this.onKeyDown.bind(this));
    };
    SceneManager.requestUpdate = function () {
        // if (!this._stopped) {
        // 	requestAnimationFrame(this.update.bind(this));
        // }
    };
    SceneManager.update = function () {
        try {
            if (!ImageManager_1.ImageManager.isReady()) {
                g.game.pushScene(createLoadingLocalScene());
                return;
            }
            this.tickStart();
            // if (Utils.isMobileSafari()) {
            // 	this.updateInputData();
            // }
            this.updateManagers();
            this.updateMain();
            this.tickEnd();
        }
        catch (e) {
            this.catchException(e);
        }
    };
    SceneManager.terminate = function () {
        // window.close();
    };
    SceneManager.onError = function (e) {
        console.error(e.message);
        console.error(e.filename, e.lineno);
        try {
            this.stop();
            // Graphics.printError("Error", e.message);
            AudioManager_1.AudioManager.stopAll();
        }
        catch (e2) {
            //
        }
    };
    SceneManager.onKeyDown = function (_event) {
        // if (!event.ctrlKey && !event.altKey) {
        // 	switch (event.keyCode) {
        // 		case 116:   // F5
        // 			if (Utils.isNwjs()) {
        // 				location.reload();
        // 			}
        // 			break;
        // 		case 119:   // F8
        // 			if (Utils.isNwjs() && Utils.isOptionValid("test")) {
        // 				require("nw.gui").Window.get().showDevTools();
        // 			}
        // 			break;
        // 	}
        // }
    };
    SceneManager.catchException = function (e) {
        console.error("ScneManager#catchException(): ", e);
        if (e instanceof Error) {
            // Graphics.printError(e.name, e.message);
            console.error(e.stack);
        }
        else {
            // Graphics.printError("UnknownError", e);
        }
        AudioManager_1.AudioManager.stopAll();
        this.stop();
    };
    SceneManager.tickStart = function () {
        Graphics_1.Graphics.tickStart();
    };
    SceneManager.tickEnd = function () {
        Graphics_1.Graphics.tickEnd();
    };
    SceneManager.updateInputData = function () {
        // Input.update();
        TouchInput_1.TouchInput.update();
    };
    SceneManager.updateMain = function () {
        if ( /* Utils.isMobileSafari()*/false) {
            // this.changeScene();
            // this.updateScene();
        }
        else {
            // const newTime = this._getTimeInMsWithoutMobileSafari();
            // let fTime = (newTime - this._currentTime) / 1000;
            // if (fTime > 0.25) fTime = 0.25;
            // this._currentTime = newTime;
            // this._accumulator += fTime;
            // while (this._accumulator >= this._deltaTime) {
            // 	this.updateInputData();
            // 	this.changeScene();
            // 	this.updateScene();
            // 	this._accumulator -= this._deltaTime;
            // }
            this.updateInputData();
            this.changeScene();
            this.updateScene();
        }
        this.renderScene();
        // this.requestUpdate();
    };
    SceneManager.updateManagers = function () {
        ImageManager_1.ImageManager.update();
    };
    SceneManager.changeScene = function () {
        if (this.isSceneChanging() && !this.isCurrentSceneBusy()) {
            if (this._scene) {
                this._scene.terminate();
                this._scene.detachReservation();
                this._previousClass = this._scene.constructor;
            }
            this._scene = this._nextScene;
            if (this._scene) {
                this._scene.attachReservation();
                this._scene.create();
                this._nextScene = null;
                this._sceneStarted = false;
                this.onSceneCreate();
                this._changeSceneCore();
                TouchInput_1.TouchInput._setupEventHandlers(this._scene.scene);
            }
            if (this._exiting) {
                this.terminate();
            }
        }
    };
    // シーン切り替えでAkashicを利用する部分
    SceneManager._changeSceneCore = function () {
        var _this = this;
        // Base_Scene#create() でリクエストされたデータの一覧を
        // g.Scene#_sceneAssetHolder に無理やりねじ込む
        DataManager_1.DataManager._requestedDataNames.forEach(function (pair) {
            var src = Utils_1.Utils.flatten(pair.src);
            _this._scene.scene._sceneAssetHolder._assetIds.push(src);
        });
        this._scene.scene._sceneAssetHolder.waitingAssetsCount = this._scene.scene._sceneAssetHolder._assetIds.length;
        // ロード完了時、各種アセットを Bitmap や DataManager に格納する。
        var mvScene = this._scene;
        var akashicScene = this._scene.scene;
        akashicScene.onLoad.addOnce(function () {
            // SceneManager に利用可能になったことを伝える
            mvScene.thisSceneLoaded = true;
            var updateSceneManager = function () {
                SceneManager.update();
                akashicScene.modified();
            };
            akashicScene.onUpdate.add(updateSceneManager);
            // 一度実行しないと未初期化のシーンが１フレームレンダリングされてしまう。
            updateSceneManager();
        });
        g.game.pushScene(akashicScene);
    };
    SceneManager.updateScene = function () {
        if (this._scene && this._scene.thisSceneLoaded) {
            if (!this._sceneStarted && this._scene.isReady()) {
                this._scene.start();
                this._sceneStarted = true;
                this.onSceneStart();
            }
            if (this.isCurrentSceneStarted()) {
                this._scene.update();
            }
            var assetIds_1 = [];
            DataManager_1.DataManager._requestedDataNames.forEach(function (pair) {
                var src = Utils_1.Utils.flatten(pair.src);
                assetIds_1.push(src);
            });
            if (assetIds_1.length) {
                var loadingScene = new CustomLoadingScene({
                    game: g.game,
                    targetScene: this._scene.scene,
                    assetIds: assetIds_1
                });
                g.game.pushScene(loadingScene);
            }
        }
    };
    SceneManager.renderScene = function () {
        if (this.isCurrentSceneStarted()) {
            Graphics_1.Graphics.render(this._scene);
        }
        else if (this._scene) {
            this.onSceneLoading();
        }
    };
    SceneManager.onSceneCreate = function () {
        Graphics_1.Graphics.startLoading();
    };
    SceneManager.onSceneStart = function () {
        Graphics_1.Graphics.endLoading();
    };
    SceneManager.onSceneLoading = function () {
        Graphics_1.Graphics.updateLoading();
    };
    SceneManager.isSceneChanging = function () {
        return this._exiting || !!this._nextScene;
    };
    SceneManager.isCurrentSceneBusy = function () {
        return this._scene && this._scene.isBusy();
    };
    SceneManager.isCurrentSceneStarted = function () {
        return this._scene && this._sceneStarted;
    };
    SceneManager.isNextScene = function (sceneClass) {
        return this._nextScene && this._nextScene.constructor === sceneClass;
    };
    SceneManager.isPreviousScene = function (sceneClass) {
        return this._previousClass === sceneClass;
    };
    SceneManager.goto = function (sceneClass) {
        if (sceneClass) {
            this._nextScene = new sceneClass();
            var nextScene_1 = this._nextScene;
            nextScene_1.scene._sceneAssetHolder = new SceneAssetHolder(nextScene_1.scene, function (asset, assetManager, holder) {
                assignAsset(nextScene_1.scene);
                // 追加ダウンロードがあるかシーンに問い合わせる。
                // ダウンロードしたデータに基づいた判断が必要な場合、このように扱う。
                return nextScene_1.assetLoadHandler(asset, assetManager, holder);
            });
        }
        if (this._scene) {
            this._scene.stop();
        }
    };
    SceneManager.push = function (sceneClass) {
        this._stack.push(this._scene.constructor);
        this.goto(sceneClass);
    };
    SceneManager.pop = function () {
        if (this._stack.length > 0) {
            this.goto(this._stack.pop());
        }
        else {
            this.exit();
        }
    };
    SceneManager.exit = function () {
        this.goto(null);
        this._exiting = true;
    };
    SceneManager.clearStack = function () {
        this._stack = [];
    };
    SceneManager.stop = function () {
        this._stopped = true;
    };
    SceneManager.prepareNextScene = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        // `prepare()` を実装したシーンがpushされたあとに呼ばれる模様
        this._nextScene.prepare.apply(this._nextScene, arguments);
    };
    SceneManager.snap = function () {
        return Bitmap_1.Bitmap.snap(this._scene.scene);
    };
    SceneManager.snapForBackground = function () {
        this._backgroundBitmap = this.snap();
        this._backgroundBitmap.blur();
    };
    SceneManager.backgroundBitmap = function () {
        return this._backgroundBitmap;
    };
    SceneManager.resume = function () {
        this._stopped = false;
        this.requestUpdate();
        // if (!Utils.isMobileSafari()) {
        // 	this._currentTime = this._getTimeInMsWithoutMobileSafari();
        // 	this._accumulator = 0;
        // }
    };
    SceneManager._scene = null;
    SceneManager._nextScene = null;
    SceneManager._stack = [];
    SceneManager._stopped = false;
    SceneManager._sceneStarted = false;
    SceneManager._exiting = false;
    SceneManager._previousClass = null;
    SceneManager._backgroundBitmap = null;
    SceneManager._screenWidth = g.game.width;
    SceneManager._screenHeight = g.game.height;
    SceneManager._boxWidth = g.game.width;
    SceneManager._boxHeight = g.game.height;
    SceneManager._deltaTime = 1.0 / 60.0;
    SceneManager._accumulator = 0.0;
    SceneManager._currentTime = Date.now(); // see below
    return SceneManager;
}());
exports.SceneManager = SceneManager;

},{"../core/Bitmap":13,"../core/Graphics":14,"../core/TouchInput":27,"../core/Utils":28,"./AudioManager":33,"./DataManager":36,"./ImageManager":37,"./PluginManager":38,"./globals":43}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoundManager = void 0;
var AudioManager_1 = require("./AudioManager");
var globals_1 = require("./globals");
var SoundManager = /** @class */ (function () {
    function SoundManager() {
    }
    SoundManager.preloadImportantSounds = function () {
        this.loadSystemSound(0);
        this.loadSystemSound(1);
        this.loadSystemSound(2);
        this.loadSystemSound(3);
    };
    SoundManager.loadSystemSound = function (n) {
        if (globals_1.$dataSystem) {
            AudioManager_1.AudioManager.loadStaticSe(globals_1.$dataSystem.sounds[n]);
        }
    };
    SoundManager.playSystemSound = function (n) {
        if (globals_1.$dataSystem) {
            AudioManager_1.AudioManager.playStaticSe(globals_1.$dataSystem.sounds[n]);
        }
    };
    SoundManager.playCursor = function () {
        this.playSystemSound(0);
    };
    SoundManager.playOk = function () {
        this.playSystemSound(1);
    };
    SoundManager.playCancel = function () {
        this.playSystemSound(2);
    };
    SoundManager.playBuzzer = function () {
        this.playSystemSound(3);
    };
    SoundManager.playEquip = function () {
        this.playSystemSound(4);
    };
    SoundManager.playSave = function () {
        this.playSystemSound(5);
    };
    SoundManager.playLoad = function () {
        this.playSystemSound(6);
    };
    SoundManager.playBattleStart = function () {
        this.playSystemSound(7);
    };
    SoundManager.playEscape = function () {
        this.playSystemSound(8);
    };
    SoundManager.playEnemyAttack = function () {
        this.playSystemSound(9);
    };
    SoundManager.playEnemyDamage = function () {
        this.playSystemSound(10);
    };
    SoundManager.playEnemyCollapse = function () {
        this.playSystemSound(11);
    };
    SoundManager.playBossCollapse1 = function () {
        this.playSystemSound(12);
    };
    SoundManager.playBossCollapse2 = function () {
        this.playSystemSound(13);
    };
    SoundManager.playActorDamage = function () {
        this.playSystemSound(14);
    };
    SoundManager.playActorCollapse = function () {
        this.playSystemSound(15);
    };
    SoundManager.playRecovery = function () {
        this.playSystemSound(16);
    };
    SoundManager.playMiss = function () {
        this.playSystemSound(17);
    };
    SoundManager.playEvasion = function () {
        this.playSystemSound(18);
    };
    SoundManager.playMagicEvasion = function () {
        this.playSystemSound(19);
    };
    SoundManager.playReflection = function () {
        this.playSystemSound(20);
    };
    SoundManager.playShop = function () {
        this.playSystemSound(21);
    };
    SoundManager.playUseItem = function () {
        this.playSystemSound(22);
    };
    SoundManager.playUseSkill = function () {
        this.playSystemSound(23);
    };
    return SoundManager;
}());
exports.SoundManager = SoundManager;

},{"./AudioManager":33,"./globals":43}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageManager = void 0;
var StorageManager = /** @class */ (function () {
    function StorageManager() {
    }
    StorageManager.save = function (savefileId, json) {
        if (this.isLocalMode()) {
            this.saveToLocalFile(savefileId, json);
        }
        else {
            this.saveToWebStorage(savefileId, json);
        }
    };
    StorageManager.load = function (savefileId) {
        if (this.isLocalMode()) {
            return this.loadFromLocalFile(savefileId);
        }
        else {
            return this.loadFromWebStorage(savefileId);
        }
    };
    StorageManager.exists = function (savefileId) {
        if (this.isLocalMode()) {
            return this.localFileExists(savefileId);
        }
        else {
            return this.webStorageExists(savefileId);
        }
    };
    StorageManager.remove = function (savefileId) {
        if (this.isLocalMode()) {
            this.removeLocalFile(savefileId);
        }
        else {
            this.removeWebStorage(savefileId);
        }
    };
    StorageManager.backup = function (_savefileId) {
        // if (this.exists(savefileId)) {
        // 	if (this.isLocalMode()) {
        // 		const data = this.loadFromLocalFile(savefileId);
        // 		const compressed = LZString.compressToBase64(data);
        // 		const fs = require('fs');
        // 		const dirPath = this.localFileDirectoryPath();
        // 		const filePath = this.localFilePath(savefileId) + ".bak";
        // 		if (!fs.existsSync(dirPath)) {
        // 			fs.mkdirSync(dirPath);
        // 		}
        // 		fs.writeFileSync(filePath, compressed);
        // 	} else {
        // 		const data = this.loadFromWebStorage(savefileId);
        // 		const compressed = LZString.compressToBase64(data);
        // 		const key = this.webStorageKey(savefileId) + "bak";
        // 		localStorage.setItem(key, compressed);
        // 	}
        // }
    };
    StorageManager.backupExists = function (savefileId) {
        if (this.isLocalMode()) {
            return this.localFileBackupExists(savefileId);
        }
        else {
            return this.webStorageBackupExists(savefileId);
        }
    };
    StorageManager.cleanBackup = function (_savefileId) {
        // if (this.backupExists(savefileId)) {
        // 	if (this.isLocalMode()) {
        // 		const fs = require('fs');
        // 		const dirPath = this.localFileDirectoryPath();
        // 		const filePath = this.localFilePath(savefileId);
        // 		fs.unlinkSync(filePath + ".bak");
        // 	} else {
        // 		const key = this.webStorageKey(savefileId);
        // 		localStorage.removeItem(key + "bak");
        // 	}
        // }
    };
    StorageManager.restoreBackup = function (_savefileId) {
        // if (this.backupExists(savefileId)) {
        // 	if (this.isLocalMode()) {
        // 		const data = this.loadFromLocalBackupFile(savefileId);
        // 		const compressed = LZString.compressToBase64(data);
        // 		const fs = require('fs');
        // 		const dirPath = this.localFileDirectoryPath();
        // 		const filePath = this.localFilePath(savefileId);
        // 		if (!fs.existsSync(dirPath)) {
        // 			fs.mkdirSync(dirPath);
        // 		}
        // 		fs.writeFileSync(filePath, compressed);
        // 		fs.unlinkSync(filePath + ".bak");
        // 	} else {
        // 		const data = this.loadFromWebStorageBackup(savefileId);
        // 		const compressed = LZString.compressToBase64(data);
        // 		const key = this.webStorageKey(savefileId);
        // 		localStorage.setItem(key, compressed);
        // 		localStorage.removeItem(key + "bak");
        // 	}
        // }
    };
    StorageManager.isLocalMode = function () {
        // return Utils.isNwjs();
        return false;
    };
    StorageManager.saveToLocalFile = function (_savefileId, _json) {
        // const data = LZString.compressToBase64(json);
        // const fs = require('fs');
        // const dirPath = this.localFileDirectoryPath();
        // const filePath = this.localFilePath(savefileId);
        // if (!fs.existsSync(dirPath)) {
        // 	fs.mkdirSync(dirPath);
        // }
        // fs.writeFileSync(filePath, data);
    };
    StorageManager.loadFromLocalFile = function (_savefileId) {
        // const data = null;
        // const fs = require('fs');
        // const filePath = this.localFilePath(savefileId);
        // if (fs.existsSync(filePath)) {
        // 	data = fs.readFileSync(filePath, { encoding: 'utf8' });
        // }
        // return LZString.decompressFromBase64(data);
    };
    StorageManager.loadFromLocalBackupFile = function (_savefileId) {
        // const data = null;
        // const fs = require('fs');
        // const filePath = this.localFilePath(savefileId) + ".bak";
        // if (fs.existsSync(filePath)) {
        // 	data = fs.readFileSync(filePath, { encoding: 'utf8' });
        // }
        // return LZString.decompressFromBase64(data);
    };
    StorageManager.localFileBackupExists = function (_savefileId) {
        // const fs = require('fs');
        // return fs.existsSync(this.localFilePath(savefileId) + ".bak");
    };
    StorageManager.localFileExists = function (_savefileId) {
        // const fs = require('fs');
        // return fs.existsSync(this.localFilePath(savefileId));
        return false;
    };
    StorageManager.removeLocalFile = function (_savefileId) {
        // const fs = require('fs');
        // const filePath = this.localFilePath(savefileId);
        // if (fs.existsSync(filePath)) {
        // 	fs.unlinkSync(filePath);
        // }
    };
    StorageManager.saveToWebStorage = function (_savefileId, _json) {
        // const key = this.webStorageKey(savefileId);
        // const data = LZString.compressToBase64(json);
        // localStorage.setItem(key, data);
    };
    StorageManager.loadFromWebStorage = function (_savefileId) {
        // const key = this.webStorageKey(savefileId);
        // const data = localStorage.getItem(key);
        // return LZString.decompressFromBase64(data);
    };
    StorageManager.loadFromWebStorageBackup = function (_savefileId) {
        // const key = this.webStorageKey(savefileId) + "bak";
        // const data = localStorage.getItem(key);
        // return LZString.decompressFromBase64(data);
    };
    StorageManager.webStorageBackupExists = function (_savefileId) {
        // const key = this.webStorageKey(savefileId) + "bak";
        // return !!localStorage.getItem(key);
    };
    StorageManager.webStorageExists = function (_savefileId) {
        // const key = this.webStorageKey(savefileId);
        // return !!localStorage.getItem(key);
        return false;
    };
    StorageManager.removeWebStorage = function (_savefileId) {
        // const key = this.webStorageKey(savefileId);
        // localStorage.removeItem(key);
    };
    StorageManager.localFileDirectoryPath = function () {
        // const path = require('path');
        // const base = path.dirname(process.mainModule.filename);
        // return path.join(base, 'save/');
    };
    StorageManager.localFilePath = function (_savefileId) {
        // const name;
        // if (savefileId < 0) {
        // 	name = 'config.rpgsave';
        // } else if (savefileId === 0) {
        // 	name = 'global.rpgsave';
        // } else {
        // 	name = 'file%1.rpgsave'.format(savefileId);
        // }
        // return this.localFileDirectoryPath() + name;
    };
    StorageManager.webStorageKey = function (savefileId) {
        if (savefileId < 0) {
            return "RPG Config";
        }
        else if (savefileId === 0) {
            return "RPG Global";
        }
        else {
            // return "RPG File%1".format(savefileId);
            return "RPG File" + savefileId;
        }
    };
    return StorageManager;
}());
exports.StorageManager = StorageManager;

},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextManager = void 0;
var globals_1 = require("./globals");
var TextManager = /** @class */ (function () {
    function TextManager() {
    }
    TextManager.basic = function (basicId) {
        return globals_1.$dataSystem.terms.basic[basicId] || "";
    };
    TextManager.param = function (paramId) {
        return globals_1.$dataSystem.terms.params[paramId] || "";
    };
    TextManager.command = function (commandId) {
        return globals_1.$dataSystem.terms.commands[commandId] || "";
    };
    TextManager.message = function (messageId) {
        return globals_1.$dataSystem.terms.messages[messageId] || "";
    };
    Object.defineProperty(TextManager, "currencyUnit", {
        get: function () {
            return globals_1.$dataSystem.currencyUnit;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "level", {
        get: function () {
            return this.basic(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "levelA", {
        get: function () {
            return this.basic(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "hp", {
        get: function () {
            return this.basic(2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "hpA", {
        get: function () {
            return this.basic(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "mp", {
        get: function () {
            return this.basic(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "mpA", {
        get: function () {
            return this.basic(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "tp", {
        get: function () {
            return this.basic(6);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "tpA", {
        get: function () {
            return this.basic(7);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "exp", {
        get: function () {
            return this.basic(8);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "expA", {
        get: function () {
            return this.basic(9);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "fight", {
        get: function () {
            return this.command(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "escape", {
        get: function () {
            return this.command(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "attack", {
        get: function () {
            return this.command(2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "guard", {
        get: function () {
            return this.command(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "item", {
        get: function () {
            return this.command(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "skill", {
        get: function () {
            return this.command(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "equip", {
        get: function () {
            return this.command(6);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "status", {
        get: function () {
            return this.command(7);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "formation", {
        get: function () {
            return this.command(8);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "save", {
        get: function () {
            return this.command(9);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "gameEnd", {
        get: function () {
            return this.command(10);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "options", {
        get: function () {
            return this.command(11);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "weapon", {
        get: function () {
            return this.command(12);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "armor", {
        get: function () {
            return this.command(13);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "keyItem", {
        get: function () {
            return this.command(14);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "equip2", {
        get: function () {
            return this.command(15);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "optimize", {
        get: function () {
            return this.command(16);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "clear", {
        get: function () {
            return this.command(17);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "newGame", {
        get: function () {
            return this.command(18);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "continue_", {
        get: function () {
            return this.command(19);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "toTitle", {
        get: function () {
            return this.command(21);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "cancel", {
        get: function () {
            return this.command(22);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "buy", {
        get: function () {
            return this.command(24);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "sell", {
        get: function () {
            return this.command(25);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "alwaysDash", {
        get: function () {
            return this.message("alwaysDash");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "commandRemember", {
        get: function () {
            return this.message("commandRemember");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "bgmVolume", {
        get: function () {
            return this.message("bgmVolume");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "bgsVolume", {
        get: function () {
            return this.message("bgsVolume");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "meVolume", {
        get: function () {
            return this.message("meVolume");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "seVolume", {
        get: function () {
            return this.message("seVolume");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "possession", {
        get: function () {
            return this.message("possession");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "expTotal", {
        get: function () {
            return this.message("expTotal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "expNext", {
        get: function () {
            return this.message("expNext");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "saveMessage", {
        get: function () {
            return this.message("saveMessage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "loadMessage", {
        get: function () {
            return this.message("loadMessage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "file", {
        get: function () {
            return this.message("file");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "partyName", {
        get: function () {
            return this.message("partyName");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "emerge", {
        get: function () {
            return this.message("emerge");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "preemptive", {
        get: function () {
            return this.message("preemptive");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "surprise", {
        get: function () {
            return this.message("surprise");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "escapeStart", {
        get: function () {
            return this.message("escapeStart");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "escapeFailure", {
        get: function () {
            return this.message("escapeFailure");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "victory", {
        get: function () {
            return this.message("victory");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "defeat", {
        get: function () {
            return this.message("defeat");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "obtainExp", {
        get: function () {
            return this.message("obtainExp");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "obtainGold", {
        get: function () {
            return this.message("obtainGold");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "obtainItem", {
        get: function () {
            return this.message("obtainItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "levelUp", {
        get: function () {
            return this.message("levelUp");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "obtainSkill", {
        get: function () {
            return this.message("obtainSkill");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "useItem", {
        get: function () {
            return this.message("useItem");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "criticalToEnemy", {
        get: function () {
            return this.message("criticalToEnemy");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "criticalToActor", {
        get: function () {
            return this.message("criticalToActor");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorDamage", {
        get: function () {
            return this.message("actorDamage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorRecovery", {
        get: function () {
            return this.message("actorRecovery");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorGain", {
        get: function () {
            return this.message("actorGain");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorLoss", {
        get: function () {
            return this.message("actorLoss");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorDrain", {
        get: function () {
            return this.message("actorDrain");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorNoDamage", {
        get: function () {
            return this.message("actorNoDamage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actorNoHit", {
        get: function () {
            return this.message("actorNoHit");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyDamage", {
        get: function () {
            return this.message("enemyDamage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyRecovery", {
        get: function () {
            return this.message("enemyRecovery");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyGain", {
        get: function () {
            return this.message("enemyGain");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyLoss", {
        get: function () {
            return this.message("enemyLoss");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyDrain", {
        get: function () {
            return this.message("enemyDrain");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyNoDamage", {
        get: function () {
            return this.message("enemyNoDamage");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "enemyNoHit", {
        get: function () {
            return this.message("enemyNoHit");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "evasion", {
        get: function () {
            return this.message("evasion");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "magicEvasion", {
        get: function () {
            return this.message("magicEvasion");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "magicReflection", {
        get: function () {
            return this.message("magicReflection");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "counterAttack", {
        get: function () {
            return this.message("counterAttack");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "substitute", {
        get: function () {
            return this.message("substitute");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "buffAdd", {
        get: function () {
            return this.message("buffAdd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "debuffAdd", {
        get: function () {
            return this.message("debuffAdd");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "buffRemove", {
        get: function () {
            return this.message("buffRemove");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextManager, "actionFailure", {
        get: function () {
            return this.message("actionFailure");
        },
        enumerable: false,
        configurable: true
    });
    return TextManager;
}());
exports.TextManager = TextManager;

},{"./globals":43}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.set$gameActorsFactory = exports.$gameActors = exports.set$gameSelfSwitchesFactory = exports.$gameSelfSwitches = exports.set$gameVariablesFactory = exports.$gameVariables = exports.set$gameSwitchesFactory = exports.$gameSwitches = exports.set$gameMessageFactory = exports.$gameMessage = exports.set$gameTimerFactory = exports.$gameTimer = exports.set$gameScreenFactory = exports.$gameScreen = exports.set$gameSystemFactory = exports.$gameSystem = exports.set$gameTempFactory = exports.$gameTemp = exports.set$dataMap = exports.set$dataMapFactory = exports.$dataMap = exports.set$dataMapInfosFactory = exports.$dataMapInfos = exports.set$dataSystemFactory = exports.$dataSystem = exports.set$dataCommonEventsFactory = exports.$dataCommonEvents = exports.set$dataTilesetsFactory = exports.$dataTilesets = exports.set$dataAnimationsFactory = exports.$dataAnimations = exports.set$dataStatesFactory = exports.$dataStates = exports.set$dataTroopsFactory = exports.$dataTroops = exports.set$dataEnemiesFactory = exports.$dataEnemies = exports.set$dataArmorsFactory = exports.$dataArmors = exports.set$dataWeaponsFactory = exports.$dataWeapons = exports.set$dataItemsFactory = exports.$dataItems = exports.set$dataSkillsFactory = exports.$dataSkills = exports.set$dataClassesFactory = exports.$dataClasses = exports.set$dataActorsFactory = exports.$dataActors = exports.createGlobals = void 0;
exports.$testEvent = exports.set$gamePlayerFactory = exports.$gamePlayer = exports.set$gameMapFactory = exports.$gameMap = exports.set$gameTroopFactory = exports.$gameTroop = exports.set$gamePartyFactory = exports.$gameParty = void 0;
function createGlobals() {
    // TODO: エラー箇所の特定が分かりづらくなるので if 文は不要。また $data~ については setter で直接値を代入するため、ここでの代入は不要
    if (!!$gameActorsFactory)
        exports.$gameActors = $gameActorsFactory();
    if (!!$dataActorsFactory)
        exports.$dataActors = $dataActorsFactory();
    if (!!$dataClassesFactory)
        exports.$dataClasses = $dataClassesFactory();
    if (!!$dataSkillsFactory)
        exports.$dataSkills = $dataSkillsFactory();
    if (!!$dataItemsFactory)
        exports.$dataItems = $dataItemsFactory();
    if (!!$dataWeaponsFactory)
        exports.$dataWeapons = $dataWeaponsFactory();
    if (!!$dataArmorsFactory)
        exports.$dataArmors = $dataArmorsFactory();
    if (!!$dataEnemiesFactory)
        exports.$dataEnemies = $dataEnemiesFactory();
    if (!!$dataTroopsFactory)
        exports.$dataTroops = $dataTroopsFactory();
    if (!!$dataStatesFactory)
        exports.$dataStates = $dataStatesFactory();
    if (!!$dataAnimationsFactory)
        exports.$dataAnimations = $dataAnimationsFactory();
    if (!!$dataTilesetsFactory)
        exports.$dataTilesets = $dataTilesetsFactory();
    if (!!$dataCommonEventsFactory)
        exports.$dataCommonEvents = $dataCommonEventsFactory();
    if (!!$dataSystemFactory)
        exports.$dataSystem = $dataSystemFactory();
    if (!!$dataMapInfosFactory)
        exports.$dataMapInfos = $dataMapInfosFactory();
    if (!!$dataMapFactory)
        exports.$dataMap = $dataMapFactory();
    if (!!$gameTempFactory)
        exports.$gameTemp = $gameTempFactory();
    if (!!$gameSystemFactory)
        exports.$gameSystem = $gameSystemFactory();
    if (!!$gameScreenFactory)
        exports.$gameScreen = $gameScreenFactory();
    if (!!$gameTimerFactory)
        exports.$gameTimer = $gameTimerFactory();
    if (!!$gameMessageFactory)
        exports.$gameMessage = $gameMessageFactory();
    if (!!$gameSwitchesFactory)
        exports.$gameSwitches = $gameSwitchesFactory();
    if (!!$gameVariablesFactory)
        exports.$gameVariables = $gameVariablesFactory();
    if (!!$gameSelfSwitchesFactory)
        exports.$gameSelfSwitches = $gameSelfSwitchesFactory();
    if (!!$gamePartyFactory)
        exports.$gameParty = $gamePartyFactory();
    if (!!$gameTroopFactory)
        exports.$gameTroop = $gameTroopFactory();
    if (!!$gameMapFactory)
        exports.$gameMap = $gameMapFactory();
    if (!!$gamePlayerFactory)
        exports.$gamePlayer = $gamePlayerFactory();
}
exports.createGlobals = createGlobals;
// TODO: $data~ は静的な値なので Factory とその setter は不要。代わりに $data~ に直接代入する setter が必要
exports.$dataActors = null;
var $dataActorsFactory;
function set$dataActorsFactory(func) {
    $dataActorsFactory = func;
}
exports.set$dataActorsFactory = set$dataActorsFactory;
exports.$dataClasses = null;
var $dataClassesFactory;
function set$dataClassesFactory(func) {
    $dataClassesFactory = func;
}
exports.set$dataClassesFactory = set$dataClassesFactory;
exports.$dataSkills = null;
var $dataSkillsFactory;
function set$dataSkillsFactory(func) {
    $dataSkillsFactory = func;
}
exports.set$dataSkillsFactory = set$dataSkillsFactory;
exports.$dataItems = null;
var $dataItemsFactory;
function set$dataItemsFactory(func) {
    $dataItemsFactory = func;
}
exports.set$dataItemsFactory = set$dataItemsFactory;
exports.$dataWeapons = null;
var $dataWeaponsFactory;
function set$dataWeaponsFactory(func) {
    $dataWeaponsFactory = func;
}
exports.set$dataWeaponsFactory = set$dataWeaponsFactory;
exports.$dataArmors = null;
var $dataArmorsFactory;
function set$dataArmorsFactory(func) {
    $dataArmorsFactory = func;
}
exports.set$dataArmorsFactory = set$dataArmorsFactory;
exports.$dataEnemies = null;
var $dataEnemiesFactory;
function set$dataEnemiesFactory(func) {
    $dataEnemiesFactory = func;
}
exports.set$dataEnemiesFactory = set$dataEnemiesFactory;
exports.$dataTroops = null;
var $dataTroopsFactory;
function set$dataTroopsFactory(func) {
    $dataTroopsFactory = func;
}
exports.set$dataTroopsFactory = set$dataTroopsFactory;
exports.$dataStates = null;
var $dataStatesFactory;
function set$dataStatesFactory(func) {
    $dataStatesFactory = func;
}
exports.set$dataStatesFactory = set$dataStatesFactory;
exports.$dataAnimations = null;
var $dataAnimationsFactory;
function set$dataAnimationsFactory(func) {
    $dataAnimationsFactory = func;
}
exports.set$dataAnimationsFactory = set$dataAnimationsFactory;
exports.$dataTilesets = null;
var $dataTilesetsFactory;
function set$dataTilesetsFactory(func) {
    $dataTilesetsFactory = func;
}
exports.set$dataTilesetsFactory = set$dataTilesetsFactory;
exports.$dataCommonEvents = null;
var $dataCommonEventsFactory;
function set$dataCommonEventsFactory(func) {
    $dataCommonEventsFactory = func;
}
exports.set$dataCommonEventsFactory = set$dataCommonEventsFactory;
exports.$dataSystem = null;
var $dataSystemFactory;
function set$dataSystemFactory(func) {
    $dataSystemFactory = func;
}
exports.set$dataSystemFactory = set$dataSystemFactory;
exports.$dataMapInfos = null;
var $dataMapInfosFactory;
function set$dataMapInfosFactory(func) {
    $dataMapInfosFactory = func;
}
exports.set$dataMapInfosFactory = set$dataMapInfosFactory;
exports.$dataMap = null;
var $dataMapFactory;
function set$dataMapFactory(func) {
    $dataMapFactory = func;
}
exports.set$dataMapFactory = set$dataMapFactory;
// $dataMapを直接代入する処理のために用意している
function set$dataMap(value) {
    exports.$dataMap = value;
}
exports.set$dataMap = set$dataMap;
exports.$gameTemp = null;
var $gameTempFactory;
function set$gameTempFactory(func) {
    $gameTempFactory = func;
}
exports.set$gameTempFactory = set$gameTempFactory;
exports.$gameSystem = null;
var $gameSystemFactory;
function set$gameSystemFactory(func) {
    $gameSystemFactory = func;
}
exports.set$gameSystemFactory = set$gameSystemFactory;
exports.$gameScreen = null;
var $gameScreenFactory;
function set$gameScreenFactory(func) {
    $gameScreenFactory = func;
}
exports.set$gameScreenFactory = set$gameScreenFactory;
exports.$gameTimer = null;
var $gameTimerFactory;
function set$gameTimerFactory(func) {
    $gameTimerFactory = func;
}
exports.set$gameTimerFactory = set$gameTimerFactory;
exports.$gameMessage = null;
var $gameMessageFactory;
function set$gameMessageFactory(func) {
    $gameMessageFactory = func;
}
exports.set$gameMessageFactory = set$gameMessageFactory;
exports.$gameSwitches = null;
var $gameSwitchesFactory;
function set$gameSwitchesFactory(func) {
    $gameSwitchesFactory = func;
}
exports.set$gameSwitchesFactory = set$gameSwitchesFactory;
exports.$gameVariables = null;
var $gameVariablesFactory;
function set$gameVariablesFactory(func) {
    $gameVariablesFactory = func;
}
exports.set$gameVariablesFactory = set$gameVariablesFactory;
exports.$gameSelfSwitches = null;
var $gameSelfSwitchesFactory;
function set$gameSelfSwitchesFactory(func) {
    $gameSelfSwitchesFactory = func;
}
exports.set$gameSelfSwitchesFactory = set$gameSelfSwitchesFactory;
exports.$gameActors = null;
var $gameActorsFactory;
function set$gameActorsFactory(func) {
    $gameActorsFactory = func;
}
exports.set$gameActorsFactory = set$gameActorsFactory;
exports.$gameParty = null;
var $gamePartyFactory;
function set$gamePartyFactory(func) {
    $gamePartyFactory = func;
}
exports.set$gamePartyFactory = set$gamePartyFactory;
exports.$gameTroop = null;
var $gameTroopFactory;
function set$gameTroopFactory(func) {
    $gameTroopFactory = func;
}
exports.set$gameTroopFactory = set$gameTroopFactory;
exports.$gameMap = null;
var $gameMapFactory;
function set$gameMapFactory(func) {
    $gameMapFactory = func;
}
exports.set$gameMapFactory = set$gameMapFactory;
exports.$gamePlayer = null;
var $gamePlayerFactory;
function set$gamePlayerFactory(func) {
    $gamePlayerFactory = func;
}
exports.set$gamePlayerFactory = set$gamePlayerFactory;
exports.$testEvent = null;

},{}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Action = void 0;
var Graphics_1 = require("../core/Graphics");
var JsonEx_1 = require("../core/JsonEx");
var Tilemap_1 = require("../core/Tilemap");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var BattleManager_1 = require("../managers/BattleManager");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var GameItem_1 = require("./GameItem");
// これらの変数(GameObject)はツクールのスクリプトで利用される可能性があるため、exportせずクラスの外で変数定義
/* eslint-disable @typescript-eslint/no-unused-vars */
var $gameVariables;
var $gameSystem;
var $gameSwitches;
var $gameMessage;
var $gamePlayer;
var $dataCommonEvents;
var $dataTilesets;
var $gameMap;
var $gameTemp;
var $dataEnemies;
var $gameActors;
var $dataAnimations;
var $gameParty;
var $gameTroop;
var $gameTimer;
var $gameSelfSwitches;
var $dataClasses;
var $dataWeapons;
var $dataArmors;
var $dataItems;
var $gameScreen;
var $dataTroops;
var $dataActors;
var $dataSkills;
var $dataStates;
var $dataSystem;
var $dataMapInfos;
var $dataMap;
// これらの変数はツクールのスクリプトでグローバルなクラス名として利用される想定なので、変数の命名規則からは例外的に外すものとする
/* eslint-disable  @typescript-eslint/naming-convention */
var Graphics;
var JsonEx;
var Tilemap;
var TouchInput;
var Utils;
var AudioManager;
var BattleManager;
var DataManager;
var ImageManager;
var SceneManager;
var SoundManager;
var TextManager;
/* eslint-enable @typescript-eslint/naming-convention */
/* eslint-enable @typescript-eslint/no-unused-vars */
// 未定義の全GameObjectに値を代入
function setGameObjects() {
    $gameVariables = globals_1.$gameVariables;
    $gameSystem = globals_1.$gameSystem;
    $gameSwitches = globals_1.$gameSwitches;
    $gameMessage = globals_1.$gameMessage;
    $gamePlayer = globals_1.$gamePlayer;
    $dataCommonEvents = globals_1.$dataCommonEvents;
    $dataTilesets = globals_1.$dataTilesets;
    $gameMap = globals_1.$gameMap;
    $gameTemp = globals_1.$gameTemp;
    $dataEnemies = globals_1.$dataEnemies;
    $gameActors = globals_1.$gameActors;
    $dataAnimations = globals_1.$dataAnimations;
    $gameParty = globals_1.$gameParty;
    $gameTroop = globals_1.$gameTroop;
    $gameTimer = globals_1.$gameTimer;
    $gameSelfSwitches = globals_1.$gameSelfSwitches;
    $dataClasses = globals_1.$dataClasses;
    $dataWeapons = globals_1.$dataWeapons;
    $dataArmors = globals_1.$dataArmors;
    $dataItems = globals_1.$dataItems;
    $gameScreen = globals_1.$gameScreen;
    $dataTroops = globals_1.$dataTroops;
    $dataActors = globals_1.$dataActors;
    $dataSkills = globals_1.$dataSkills;
    $dataStates = globals_1.$dataStates;
    $dataSystem = globals_1.$dataSystem;
    $dataMapInfos = globals_1.$dataMapInfos;
    $dataMap = globals_1.$dataMap;
    Graphics = Graphics_1.Graphics;
    JsonEx = JsonEx_1.JsonEx;
    Tilemap = Tilemap_1.Tilemap;
    TouchInput = TouchInput_1.TouchInput;
    Utils = Utils_1.Utils;
    AudioManager = AudioManager_1.AudioManager;
    BattleManager = BattleManager_1.BattleManager;
    DataManager = DataManager_1.DataManager;
    ImageManager = ImageManager_1.ImageManager;
    SceneManager = SceneManager_1.SceneManager;
    SoundManager = SoundManager_1.SoundManager;
    TextManager = TextManager_1.TextManager;
}
// スクリプト(eval)で利用するグローバル変数の初期化を可能にする
if (!DataManager_1.DataManager._onReset.contains(setGameObjects)) {
    DataManager_1.DataManager._onReset.add(setGameObjects);
}
var Game_Action = /** @class */ (function () {
    function Game_Action(subject, forcing) {
        this.initialize(subject, forcing);
    }
    Game_Action.prototype.initialize = function (subject, forcing) {
        this._subjectActorId = 0;
        this._subjectEnemyIndex = -1;
        this._forcing = forcing || false;
        this.setSubject(subject);
        this.clear();
    };
    Game_Action.prototype.clear = function () {
        this._item = new GameItem_1.Game_Item();
        this._targetIndex = -1;
    };
    Game_Action.prototype.setSubject = function (subject) {
        if (subject.isActor()) {
            this._subjectActorId = subject.actorId();
            this._subjectEnemyIndex = -1;
        }
        else {
            this._subjectEnemyIndex = subject.index();
            this._subjectActorId = 0;
        }
    };
    Game_Action.prototype.subject = function () {
        if (this._subjectActorId > 0) {
            return globals_1.$gameActors.actor(this._subjectActorId);
        }
        else {
            return globals_1.$gameTroop.members()[this._subjectEnemyIndex];
        }
    };
    Game_Action.prototype.friendsUnit = function () {
        return this.subject().friendsUnit();
    };
    Game_Action.prototype.opponentsUnit = function () {
        return this.subject().opponentsUnit();
    };
    Game_Action.prototype.setEnemyAction = function (action) {
        if (action) {
            this.setSkill(action.skillId);
        }
        else {
            this.clear();
        }
    };
    Game_Action.prototype.setAttack = function () {
        this.setSkill(this.subject().attackSkillId());
    };
    Game_Action.prototype.setGuard = function () {
        this.setSkill(this.subject().guardSkillId());
    };
    Game_Action.prototype.setSkill = function (skillId) {
        this._item.setObject(globals_1.$dataSkills[skillId]);
    };
    Game_Action.prototype.setItem = function (itemId) {
        this._item.setObject(globals_1.$dataItems[itemId]);
    };
    Game_Action.prototype.setItemObject = function (object) {
        this._item.setObject(object);
    };
    Game_Action.prototype.setTarget = function (targetIndex) {
        this._targetIndex = targetIndex;
    };
    Game_Action.prototype.item = function () {
        return this._item.object();
    };
    Game_Action.prototype.isSkill = function () {
        return this._item.isSkill();
    };
    Game_Action.prototype.isItem = function () {
        return this._item.isItem();
    };
    Game_Action.prototype.numRepeats = function () {
        var repeats = this.item().repeats;
        if (this.isAttack()) {
            repeats += this.subject().attackTimesAdd();
        }
        return Math.floor(repeats);
    };
    Game_Action.prototype.checkItemScope = function (list) {
        // return list.contains(this.item().scope);
        return Utils_1.Utils.contains(list, this.item().scope);
    };
    Game_Action.prototype.isForOpponent = function () {
        return this.checkItemScope([1, 2, 3, 4, 5, 6]);
    };
    Game_Action.prototype.isForFriend = function () {
        return this.checkItemScope([7, 8, 9, 10, 11]);
    };
    Game_Action.prototype.isForDeadFriend = function () {
        return this.checkItemScope([9, 10]);
    };
    Game_Action.prototype.isForUser = function () {
        return this.checkItemScope([11]);
    };
    Game_Action.prototype.isForOne = function () {
        return this.checkItemScope([1, 3, 7, 9, 11]);
    };
    Game_Action.prototype.isForRandom = function () {
        return this.checkItemScope([3, 4, 5, 6]);
    };
    Game_Action.prototype.isForAll = function () {
        return this.checkItemScope([2, 8, 10]);
    };
    Game_Action.prototype.needsSelection = function () {
        return this.checkItemScope([1, 7, 9]);
    };
    Game_Action.prototype.numTargets = function () {
        return this.isForRandom() ? this.item().scope - 2 : 0;
    };
    Game_Action.prototype.checkDamageType = function (list) {
        // return list.contains(this.item().damage.type);
        return Utils_1.Utils.contains(list, this.item().damage.type);
    };
    Game_Action.prototype.isHpEffect = function () {
        return this.checkDamageType([1, 3, 5]);
    };
    Game_Action.prototype.isMpEffect = function () {
        return this.checkDamageType([2, 4, 6]);
    };
    Game_Action.prototype.isDamage = function () {
        return this.checkDamageType([1, 2]);
    };
    Game_Action.prototype.isRecover = function () {
        return this.checkDamageType([3, 4]);
    };
    Game_Action.prototype.isDrain = function () {
        return this.checkDamageType([5, 6]);
    };
    Game_Action.prototype.isHpRecover = function () {
        return this.checkDamageType([3]);
    };
    Game_Action.prototype.isMpRecover = function () {
        return this.checkDamageType([4]);
    };
    Game_Action.prototype.isCertainHit = function () {
        return this.item().hitType === Game_Action.HITTYPE_CERTAIN;
    };
    Game_Action.prototype.isPhysical = function () {
        return this.item().hitType === Game_Action.HITTYPE_PHYSICAL;
    };
    Game_Action.prototype.isMagical = function () {
        return this.item().hitType === Game_Action.HITTYPE_MAGICAL;
    };
    Game_Action.prototype.isAttack = function () {
        return this.item() === globals_1.$dataSkills[this.subject().attackSkillId()];
    };
    Game_Action.prototype.isGuard = function () {
        return this.item() === globals_1.$dataSkills[this.subject().guardSkillId()];
    };
    Game_Action.prototype.isMagicSkill = function () {
        if (this.isSkill()) {
            return Utils_1.Utils.contains(globals_1.$dataSystem.magicSkills, this.item().stypeId);
        }
        else {
            return false;
        }
    };
    Game_Action.prototype.decideRandomTarget = function () {
        var target;
        if (this.isForDeadFriend()) {
            target = this.friendsUnit().randomDeadTarget();
        }
        else if (this.isForFriend()) {
            target = this.friendsUnit().randomTarget();
        }
        else {
            target = this.opponentsUnit().randomTarget();
        }
        if (target) {
            this._targetIndex = target.index();
        }
        else {
            this.clear();
        }
    };
    Game_Action.prototype.setConfusion = function () {
        this.setAttack();
    };
    Game_Action.prototype.prepare = function () {
        if (this.subject().isConfused() && !this._forcing) {
            this.setConfusion();
        }
    };
    Game_Action.prototype.isValid = function () {
        return (this._forcing && this.item()) || this.subject().canUse(this.item());
    };
    Game_Action.prototype.speed = function () {
        var agi = this.subject().agi;
        var speed = agi + Utils_1.Utils.randomInt(Math.floor(5 + agi / 4));
        if (this.item()) {
            speed += this.item().speed;
        }
        if (this.isAttack()) {
            speed += this.subject().attackSpeed();
        }
        return speed;
    };
    Game_Action.prototype.makeTargets = function () {
        var targets = [];
        if (!this._forcing && this.subject().isConfused()) {
            targets = [this.confusionTarget()];
        }
        else if (this.isForOpponent()) {
            targets = this.targetsForOpponents();
        }
        else if (this.isForFriend()) {
            targets = this.targetsForFriends();
        }
        return this.repeatTargets(targets);
    };
    Game_Action.prototype.repeatTargets = function (targets) {
        var repeatedTargets = [];
        var repeats = this.numRepeats();
        for (var i = 0; i < targets.length; i++) {
            var target = targets[i];
            if (target) {
                for (var j = 0; j < repeats; j++) {
                    repeatedTargets.push(target);
                }
            }
        }
        return repeatedTargets;
    };
    Game_Action.prototype.confusionTarget = function () {
        switch (this.subject().confusionLevel()) {
            case 1:
                return this.opponentsUnit().randomTarget();
            case 2:
                if (Utils_1.Utils.randomInt(2) === 0) {
                    return this.opponentsUnit().randomTarget();
                }
                return this.friendsUnit().randomTarget();
            default:
                return this.friendsUnit().randomTarget();
        }
    };
    Game_Action.prototype.targetsForOpponents = function () {
        var targets = [];
        var unit = this.opponentsUnit();
        if (this.isForRandom()) {
            for (var i = 0; i < this.numTargets(); i++) {
                targets.push(unit.randomTarget());
            }
        }
        else if (this.isForOne()) {
            if (this._targetIndex < 0) {
                targets.push(unit.randomTarget());
            }
            else {
                targets.push(unit.smoothTarget(this._targetIndex));
            }
        }
        else {
            targets = unit.aliveMembers();
        }
        return targets;
    };
    Game_Action.prototype.targetsForFriends = function () {
        var targets = [];
        var unit = this.friendsUnit();
        if (this.isForUser()) {
            return [this.subject()];
        }
        else if (this.isForDeadFriend()) {
            if (this.isForOne()) {
                targets.push(unit.smoothDeadTarget(this._targetIndex));
            }
            else {
                targets = unit.deadMembers();
            }
        }
        else if (this.isForOne()) {
            if (this._targetIndex < 0) {
                targets.push(unit.randomTarget());
            }
            else {
                targets.push(unit.smoothTarget(this._targetIndex));
            }
        }
        else {
            targets = unit.aliveMembers();
        }
        return targets;
    };
    Game_Action.prototype.evaluate = function () {
        var _this = this;
        var value = 0;
        this.itemTargetCandidates().forEach(function (target) {
            var targetValue = _this.evaluateWithTarget(target);
            if (_this.isForAll()) {
                value += targetValue;
            }
            else if (targetValue > value) {
                value = targetValue;
                _this._targetIndex = target.index();
            }
        });
        value *= this.numRepeats();
        if (value > 0) {
            value += g.game.vars.random.generate();
        }
        return value;
    };
    Game_Action.prototype.itemTargetCandidates = function () {
        if (!this.isValid()) {
            return [];
        }
        else if (this.isForOpponent()) {
            return this.opponentsUnit().aliveMembers();
        }
        else if (this.isForUser()) {
            return [this.subject()];
        }
        else if (this.isForDeadFriend()) {
            return this.friendsUnit().deadMembers();
        }
        else {
            return this.friendsUnit().aliveMembers();
        }
    };
    Game_Action.prototype.evaluateWithTarget = function (target) {
        if (this.isHpEffect()) {
            var value = this.makeDamageValue(target, false);
            if (this.isForOpponent()) {
                return value / Math.max(target.hp, 1);
            }
            else {
                var recovery = Math.min(-value, target.mhp - target.hp);
                return recovery / target.mhp;
            }
        }
    };
    Game_Action.prototype.testApply = function (target) {
        return (this.isForDeadFriend() === target.isDead() &&
            (globals_1.$gameParty.inBattle() ||
                this.isForOpponent() ||
                (this.isHpRecover() && target.hp < target.mhp) ||
                (this.isMpRecover() && target.mp < target.mmp) ||
                this.hasItemAnyValidEffects(target)));
    };
    Game_Action.prototype.hasItemAnyValidEffects = function (target) {
        var _this = this;
        return this.item().effects.some(function (effect) {
            return _this.testItemEffect(target, effect);
        });
    };
    Game_Action.prototype.testItemEffect = function (target, effect) {
        switch (effect.code) {
            case Game_Action.EFFECT_RECOVER_HP:
                return target.hp < target.mhp || effect.value1 < 0 || effect.value2 < 0;
            case Game_Action.EFFECT_RECOVER_MP:
                return target.mp < target.mmp || effect.value1 < 0 || effect.value2 < 0;
            case Game_Action.EFFECT_ADD_STATE:
                return !target.isStateAffected(effect.dataId);
            case Game_Action.EFFECT_REMOVE_STATE:
                return target.isStateAffected(effect.dataId);
            case Game_Action.EFFECT_ADD_BUFF:
                return !target.isMaxBuffAffected(effect.dataId);
            case Game_Action.EFFECT_ADD_DEBUFF:
                return !target.isMaxDebuffAffected(effect.dataId);
            case Game_Action.EFFECT_REMOVE_BUFF:
                return target.isBuffAffected(effect.dataId);
            case Game_Action.EFFECT_REMOVE_DEBUFF:
                return target.isDebuffAffected(effect.dataId);
            case Game_Action.EFFECT_LEARN_SKILL:
                return target.isActor() && !target.isLearnedSkill(effect.dataId);
            default:
                return true;
        }
    };
    Game_Action.prototype.itemCnt = function (target) {
        if (this.isPhysical() && target.canMove()) {
            return target.cnt;
        }
        else {
            return 0;
        }
    };
    Game_Action.prototype.itemMrf = function (target) {
        if (this.isMagical()) {
            return target.mrf;
        }
        else {
            return 0;
        }
    };
    Game_Action.prototype.itemHit = function (_target) {
        if (this.isPhysical()) {
            return this.item().successRate * 0.01 * this.subject().hit;
        }
        else {
            return this.item().successRate * 0.01;
        }
    };
    Game_Action.prototype.itemEva = function (target) {
        if (this.isPhysical()) {
            return target.eva;
        }
        else if (this.isMagical()) {
            return target.mev;
        }
        else {
            return 0;
        }
    };
    Game_Action.prototype.itemCri = function (target) {
        return this.item().damage.critical ? this.subject().cri * (1 - target.cev) : 0;
    };
    Game_Action.prototype.apply = function (target) {
        var _this = this;
        var result = target.result();
        this.subject().clearResult();
        result.clear();
        result.used = this.testApply(target);
        result.missed = result.used && g.game.vars.random.generate() >= this.itemHit(target);
        result.evaded = !result.missed && g.game.vars.random.generate() < this.itemEva(target);
        result.physical = this.isPhysical();
        result.drain = this.isDrain();
        if (result.isHit()) {
            if (this.item().damage.type > 0) {
                result.critical = g.game.vars.random.generate() < this.itemCri(target);
                var value = this.makeDamageValue(target, result.critical);
                this.executeDamage(target, value);
            }
            this.item().effects.forEach(function (effect) {
                _this.applyItemEffect(target, effect);
            });
            this.applyItemUserEffect(target);
        }
    };
    Game_Action.prototype.makeDamageValue = function (target, critical) {
        var item = this.item();
        var baseValue = this.evalDamageFormula(target);
        var value = baseValue * this.calcElementRate(target);
        if (this.isPhysical()) {
            value *= target.pdr;
        }
        if (this.isMagical()) {
            value *= target.mdr;
        }
        if (baseValue < 0) {
            value *= target.rec;
        }
        if (critical) {
            value = this.applyCritical(value);
        }
        value = this.applyVariance(value, item.damage.variance);
        value = this.applyGuard(value, target);
        value = Math.round(value);
        return value;
    };
    Game_Action.prototype.evalDamageFormula = function (target) {
        try {
            var item = this.item();
            // これらの変数は戦闘時に後述のeval内にて利用される
            /* eslint-disable @typescript-eslint/no-unused-vars */
            var a = this.subject();
            var b = target;
            var v = globals_1.$gameVariables._data;
            /* eslint-enable @typescript-eslint/no-unused-vars */
            // const sign = ([3, 4].contains(item.damage.type) ? -1 : 1);
            var sign = [3, 4].indexOf(item.damage.type) >= 0 ? -1 : 1;
            // eslint-disable-next-line no-eval
            var value = Math.max(eval(item.damage.formula), 0) * sign;
            if (isNaN(value))
                value = 0;
            return value;
        }
        catch (e) {
            console.error(e);
            return 0;
        }
    };
    Game_Action.prototype.calcElementRate = function (target) {
        if (this.item().damage.elementId < 0) {
            return this.elementsMaxRate(target, this.subject().attackElements());
        }
        else {
            return target.elementRate(this.item().damage.elementId);
        }
    };
    Game_Action.prototype.elementsMaxRate = function (target, elements) {
        if (elements.length > 0) {
            return Math.max.apply(null, elements.map(function (elementId) {
                return target.elementRate(elementId);
            }));
        }
        else {
            return 1;
        }
    };
    Game_Action.prototype.applyCritical = function (damage) {
        return damage * 3;
    };
    Game_Action.prototype.applyVariance = function (damage, variance) {
        var amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));
        var v = Utils_1.Utils.randomInt(amp + 1) + Utils_1.Utils.randomInt(amp + 1) - amp;
        return damage >= 0 ? damage + v : damage - v;
    };
    Game_Action.prototype.applyGuard = function (damage, target) {
        return damage / (damage > 0 && target.isGuard() ? 2 * target.grd : 1);
    };
    Game_Action.prototype.executeDamage = function (target, value) {
        var result = target.result();
        if (value === 0) {
            result.critical = false;
        }
        if (this.isHpEffect()) {
            this.executeHpDamage(target, value);
        }
        if (this.isMpEffect()) {
            this.executeMpDamage(target, value);
        }
    };
    Game_Action.prototype.executeHpDamage = function (target, value) {
        if (this.isDrain()) {
            value = Math.min(target.hp, value);
        }
        this.makeSuccess(target);
        target.gainHp(-value);
        if (value > 0) {
            target.onDamage(value);
        }
        this.gainDrainedHp(value);
    };
    Game_Action.prototype.executeMpDamage = function (target, value) {
        if (!this.isMpRecover()) {
            value = Math.min(target.mp, value);
        }
        if (value !== 0) {
            this.makeSuccess(target);
        }
        target.gainMp(-value);
        this.gainDrainedMp(value);
    };
    Game_Action.prototype.gainDrainedHp = function (value) {
        if (this.isDrain()) {
            var gainTarget = this.subject();
            if (this._reflectionTarget !== undefined) {
                gainTarget = this._reflectionTarget;
            }
            gainTarget.gainHp(value);
        }
    };
    Game_Action.prototype.gainDrainedMp = function (value) {
        if (this.isDrain()) {
            var gainTarget = this.subject();
            if (this._reflectionTarget !== undefined) {
                gainTarget = this._reflectionTarget;
            }
            gainTarget.gainMp(value);
        }
    };
    Game_Action.prototype.applyItemEffect = function (target, effect) {
        switch (effect.code) {
            case Game_Action.EFFECT_RECOVER_HP:
                this.itemEffectRecoverHp(target, effect);
                break;
            case Game_Action.EFFECT_RECOVER_MP:
                this.itemEffectRecoverMp(target, effect);
                break;
            case Game_Action.EFFECT_GAIN_TP:
                this.itemEffectGainTp(target, effect);
                break;
            case Game_Action.EFFECT_ADD_STATE:
                this.itemEffectAddState(target, effect);
                break;
            case Game_Action.EFFECT_REMOVE_STATE:
                this.itemEffectRemoveState(target, effect);
                break;
            case Game_Action.EFFECT_ADD_BUFF:
                this.itemEffectAddBuff(target, effect);
                break;
            case Game_Action.EFFECT_ADD_DEBUFF:
                this.itemEffectAddDebuff(target, effect);
                break;
            case Game_Action.EFFECT_REMOVE_BUFF:
                this.itemEffectRemoveBuff(target, effect);
                break;
            case Game_Action.EFFECT_REMOVE_DEBUFF:
                this.itemEffectRemoveDebuff(target, effect);
                break;
            case Game_Action.EFFECT_SPECIAL:
                this.itemEffectSpecial(target, effect);
                break;
            case Game_Action.EFFECT_GROW:
                this.itemEffectGrow(target, effect);
                break;
            case Game_Action.EFFECT_LEARN_SKILL:
                this.itemEffectLearnSkill(target, effect);
                break;
            case Game_Action.EFFECT_COMMON_EVENT:
                this.itemEffectCommonEvent(target, effect);
                break;
        }
    };
    Game_Action.prototype.itemEffectRecoverHp = function (target, effect) {
        var value = (target.mhp * effect.value1 + effect.value2) * target.rec;
        if (this.isItem()) {
            value *= this.subject().pha;
        }
        value = Math.floor(value);
        if (value !== 0) {
            target.gainHp(value);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectRecoverMp = function (target, effect) {
        var value = (target.mmp * effect.value1 + effect.value2) * target.rec;
        if (this.isItem()) {
            value *= this.subject().pha;
        }
        value = Math.floor(value);
        if (value !== 0) {
            target.gainMp(value);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectGainTp = function (target, effect) {
        var value = Math.floor(effect.value1);
        if (value !== 0) {
            target.gainTp(value);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectAddState = function (target, effect) {
        if (effect.dataId === 0) {
            this.itemEffectAddAttackState(target, effect);
        }
        else {
            this.itemEffectAddNormalState(target, effect);
        }
    };
    Game_Action.prototype.itemEffectAddAttackState = function (target, effect) {
        var _this = this;
        this.subject()
            .attackStates()
            .forEach(function (stateId) {
            var chance = effect.value1;
            chance *= target.stateRate(stateId);
            chance *= _this.subject().attackStatesRate(stateId);
            chance *= _this.lukEffectRate(target);
            if (g.game.vars.random.generate() < chance) {
                target.addState(stateId);
                _this.makeSuccess(target);
            }
        }, target);
    };
    Game_Action.prototype.itemEffectAddNormalState = function (target, effect) {
        var chance = effect.value1;
        if (!this.isCertainHit()) {
            chance *= target.stateRate(effect.dataId);
            chance *= this.lukEffectRate(target);
        }
        if (g.game.vars.random.generate() < chance) {
            target.addState(effect.dataId);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectRemoveState = function (target, effect) {
        var chance = effect.value1;
        if (g.game.vars.random.generate() < chance) {
            target.removeState(effect.dataId);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectAddBuff = function (target, effect) {
        target.addBuff(effect.dataId, effect.value1);
        this.makeSuccess(target);
    };
    Game_Action.prototype.itemEffectAddDebuff = function (target, effect) {
        var chance = target.debuffRate(effect.dataId) * this.lukEffectRate(target);
        if (g.game.vars.random.generate() < chance) {
            target.addDebuff(effect.dataId, effect.value1);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectRemoveBuff = function (target, effect) {
        if (target.isBuffAffected(effect.dataId)) {
            target.removeBuff(effect.dataId);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectRemoveDebuff = function (target, effect) {
        if (target.isDebuffAffected(effect.dataId)) {
            target.removeBuff(effect.dataId);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectSpecial = function (target, effect) {
        if (effect.dataId === Game_Action.SPECIAL_EFFECT_ESCAPE) {
            target.escape();
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectGrow = function (target, effect) {
        target.addParam(effect.dataId, Math.floor(effect.value1));
        this.makeSuccess(target);
    };
    Game_Action.prototype.itemEffectLearnSkill = function (target, effect) {
        if (target.isActor()) {
            target.learnSkill(effect.dataId);
            this.makeSuccess(target);
        }
    };
    Game_Action.prototype.itemEffectCommonEvent = function (_target, _effect) {
        //
    };
    Game_Action.prototype.makeSuccess = function (target) {
        target.result().success = true;
    };
    Game_Action.prototype.applyItemUserEffect = function (_target) {
        var value = Math.floor(this.item().tpGain * this.subject().tcr);
        this.subject().gainSilentTp(value);
    };
    Game_Action.prototype.lukEffectRate = function (target) {
        return Math.max(1.0 + (this.subject().luk - target.luk) * 0.001, 0.0);
    };
    Game_Action.prototype.applyGlobal = function () {
        this.item().effects.forEach(function (effect) {
            if (effect.code === Game_Action.EFFECT_COMMON_EVENT) {
                globals_1.$gameTemp.reserveCommonEvent(effect.dataId);
            }
        });
    };
    Game_Action.EFFECT_RECOVER_HP = 11;
    Game_Action.EFFECT_RECOVER_MP = 12;
    Game_Action.EFFECT_GAIN_TP = 13;
    Game_Action.EFFECT_ADD_STATE = 21;
    Game_Action.EFFECT_REMOVE_STATE = 22;
    Game_Action.EFFECT_ADD_BUFF = 31;
    Game_Action.EFFECT_ADD_DEBUFF = 32;
    Game_Action.EFFECT_REMOVE_BUFF = 33;
    Game_Action.EFFECT_REMOVE_DEBUFF = 34;
    Game_Action.EFFECT_SPECIAL = 41;
    Game_Action.EFFECT_GROW = 42;
    Game_Action.EFFECT_LEARN_SKILL = 43;
    Game_Action.EFFECT_COMMON_EVENT = 44;
    Game_Action.SPECIAL_EFFECT_ESCAPE = 0;
    Game_Action.HITTYPE_CERTAIN = 0;
    Game_Action.HITTYPE_PHYSICAL = 1;
    Game_Action.HITTYPE_MAGICAL = 2;
    return Game_Action;
}());
exports.Game_Action = Game_Action;

},{"../core/Graphics":14,"../core/JsonEx":17,"../core/Tilemap":23,"../core/TouchInput":27,"../core/Utils":28,"../managers/AudioManager":33,"../managers/BattleManager":34,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./GameItem":58}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_ActionResult = void 0;
var globals_1 = require("../managers/globals");
var Game_ActionResult = /** @class */ (function () {
    function Game_ActionResult() {
        this.initialize();
    }
    Game_ActionResult.prototype.initialize = function () {
        this.clear();
    };
    Game_ActionResult.prototype.clear = function () {
        this.used = false;
        this.missed = false;
        this.evaded = false;
        this.physical = false;
        this.drain = false;
        this.critical = false;
        this.success = false;
        this.hpAffected = false;
        this.hpDamage = 0;
        this.mpDamage = 0;
        this.tpDamage = 0;
        this.addedStates = [];
        this.removedStates = [];
        this.addedBuffs = [];
        this.addedDebuffs = [];
        this.removedBuffs = [];
    };
    Game_ActionResult.prototype.addedStateObjects = function () {
        return this.addedStates.map(function (id) {
            return globals_1.$dataStates[id];
        });
    };
    Game_ActionResult.prototype.removedStateObjects = function () {
        return this.removedStates.map(function (id) {
            return globals_1.$dataStates[id];
        });
    };
    Game_ActionResult.prototype.isStatusAffected = function () {
        return (this.addedStates.length > 0 ||
            this.removedStates.length > 0 ||
            this.addedBuffs.length > 0 ||
            this.addedDebuffs.length > 0 ||
            this.removedBuffs.length > 0);
    };
    Game_ActionResult.prototype.isHit = function () {
        return this.used && !this.missed && !this.evaded;
    };
    Game_ActionResult.prototype.isStateAdded = function (stateId) {
        // return this.addedStates.contains(stateId);
        return this.addedStates.indexOf(stateId) >= 0;
    };
    Game_ActionResult.prototype.pushAddedState = function (stateId) {
        if (!this.isStateAdded(stateId)) {
            this.addedStates.push(stateId);
        }
    };
    Game_ActionResult.prototype.isStateRemoved = function (stateId) {
        // return this.removedStates.contains(stateId);
        return this.removedStates.indexOf(stateId) >= 0;
    };
    Game_ActionResult.prototype.pushRemovedState = function (stateId) {
        if (!this.isStateRemoved(stateId)) {
            this.removedStates.push(stateId);
        }
    };
    Game_ActionResult.prototype.isBuffAdded = function (paramId) {
        // return this.addedBuffs.contains(paramId);
        return this.addedBuffs.indexOf(paramId) >= 0;
    };
    Game_ActionResult.prototype.pushAddedBuff = function (paramId) {
        if (!this.isBuffAdded(paramId)) {
            this.addedBuffs.push(paramId);
        }
    };
    Game_ActionResult.prototype.isDebuffAdded = function (paramId) {
        // return this.addedDebuffs.contains(paramId);
        return this.addedDebuffs.indexOf(paramId) >= 0;
    };
    Game_ActionResult.prototype.pushAddedDebuff = function (paramId) {
        if (!this.isDebuffAdded(paramId)) {
            this.addedDebuffs.push(paramId);
        }
    };
    Game_ActionResult.prototype.isBuffRemoved = function (paramId) {
        // return this.removedBuffs.contains(paramId);
        return this.removedBuffs.indexOf(paramId) >= 0;
    };
    Game_ActionResult.prototype.pushRemovedBuff = function (paramId) {
        if (!this.isBuffRemoved(paramId)) {
            this.removedBuffs.push(paramId);
        }
    };
    return Game_ActionResult;
}());
exports.Game_ActionResult = Game_ActionResult;

},{"../managers/globals":43}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Actor = void 0;
var Utils_1 = require("../core/Utils");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var GameAction_1 = require("./GameAction");
var GameBattler_1 = require("./GameBattler");
var GameItem_1 = require("./GameItem");
var Game_Actor = /** @class */ (function (_super) {
    __extends(Game_Actor, _super);
    function Game_Actor(actorId) {
        var _this = _super.call(this, actorId) || this;
        if (Object.getPrototypeOf(_this) === Game_Actor.prototype) {
            _this.initialize(actorId);
        }
        return _this;
    }
    Object.defineProperty(Game_Actor.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: false,
        configurable: true
    });
    Game_Actor.prototype.initialize = function (actorId) {
        _super.prototype.initialize.call(this, actorId);
        this.setup(actorId);
    };
    Game_Actor.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._actorId = 0;
        this._name = "";
        this._nickname = "";
        this._classId = 0;
        this._level = 0;
        this._characterName = "";
        this._characterIndex = 0;
        this._faceName = "";
        this._faceIndex = 0;
        this._battlerName = "";
        this._exp = {};
        this._skills = [];
        this._equips = [];
        this._actionInputIndex = 0;
        this._lastMenuSkill = new GameItem_1.Game_Item();
        this._lastBattleSkill = new GameItem_1.Game_Item();
        this._lastCommandSymbol = "";
    };
    Game_Actor.prototype.setup = function (actorId) {
        var actor = globals_1.$dataActors[actorId];
        this._actorId = actorId;
        this._name = actor.name;
        this._nickname = actor.nickname;
        this._profile = actor.profile;
        this._classId = actor.classId;
        this._level = actor.initialLevel;
        this.initImages();
        this.initExp();
        this.initSkills();
        this.initEquips(actor.equips);
        this.clearParamPlus();
        this.recoverAll();
    };
    Game_Actor.prototype.actorId = function () {
        return this._actorId;
    };
    Game_Actor.prototype.actor = function () {
        return globals_1.$dataActors[this._actorId];
    };
    Game_Actor.prototype.name = function () {
        return this._name;
    };
    Game_Actor.prototype.setName = function (name) {
        this._name = name;
    };
    Game_Actor.prototype.nickname = function () {
        return this._nickname;
    };
    Game_Actor.prototype.setNickname = function (nickname) {
        this._nickname = nickname;
    };
    Game_Actor.prototype.profile = function () {
        return this._profile;
    };
    Game_Actor.prototype.setProfile = function (profile) {
        this._profile = profile;
    };
    Game_Actor.prototype.characterName = function () {
        return this._characterName;
    };
    Game_Actor.prototype.characterIndex = function () {
        return this._characterIndex;
    };
    Game_Actor.prototype.faceName = function () {
        return this._faceName;
    };
    Game_Actor.prototype.faceIndex = function () {
        return this._faceIndex;
    };
    Game_Actor.prototype.battlerName = function () {
        return this._battlerName;
    };
    Game_Actor.prototype.clearStates = function () {
        GameBattler_1.Game_Battler.prototype.clearStates.call(this);
        this._stateSteps = {};
    };
    Game_Actor.prototype.eraseState = function (stateId) {
        GameBattler_1.Game_Battler.prototype.eraseState.call(this, stateId);
        delete this._stateSteps[stateId];
    };
    Game_Actor.prototype.resetStateCounts = function (stateId) {
        GameBattler_1.Game_Battler.prototype.resetStateCounts.call(this, stateId);
        this._stateSteps[stateId] = globals_1.$dataStates[stateId].stepsToRemove;
    };
    Game_Actor.prototype.initImages = function () {
        var actor = this.actor();
        this._characterName = actor.characterName;
        this._characterIndex = actor.characterIndex;
        this._faceName = actor.faceName;
        this._faceIndex = actor.faceIndex;
        this._battlerName = actor.battlerName;
    };
    Game_Actor.prototype.expForLevel = function (level) {
        var c = this.currentClass();
        var basis = c.expParams[0];
        var extra = c.expParams[1];
        // eslint-disable-next-line @typescript-eslint/naming-convention
        var acc_a = c.expParams[2];
        // eslint-disable-next-line @typescript-eslint/naming-convention
        var acc_b = c.expParams[3];
        return Math.round((basis * Math.pow(level - 1, 0.9 + acc_a / 250) * level * (level + 1)) / (6 + Math.pow(level, 2) / 50 / acc_b) +
            (level - 1) * extra);
    };
    Game_Actor.prototype.initExp = function () {
        this._exp[this._classId] = this.currentLevelExp();
    };
    Game_Actor.prototype.currentExp = function () {
        return this._exp[this._classId];
    };
    Game_Actor.prototype.currentLevelExp = function () {
        return this.expForLevel(this._level);
    };
    Game_Actor.prototype.nextLevelExp = function () {
        return this.expForLevel(this._level + 1);
    };
    Game_Actor.prototype.nextRequiredExp = function () {
        return this.nextLevelExp() - this.currentExp();
    };
    Game_Actor.prototype.maxLevel = function () {
        return this.actor().maxLevel;
    };
    Game_Actor.prototype.isMaxLevel = function () {
        return this._level >= this.maxLevel();
    };
    Game_Actor.prototype.initSkills = function () {
        var _this = this;
        this._skills = [];
        this.currentClass().learnings.forEach(function (learning) {
            if (learning.level <= _this._level) {
                _this.learnSkill(learning.skillId);
            }
        });
    };
    Game_Actor.prototype.initEquips = function (equips) {
        var slots = this.equipSlots();
        var maxSlots = slots.length;
        this._equips = [];
        for (var i = 0; i < maxSlots; i++) {
            this._equips[i] = new GameItem_1.Game_Item();
        }
        for (var j = 0; j < equips.length; j++) {
            if (j < maxSlots) {
                this._equips[j].setEquip(slots[j] === 1, equips[j]);
            }
        }
        this.releaseUnequippableItems(true);
        this.refresh();
    };
    Game_Actor.prototype.equipSlots = function () {
        var slots = [];
        for (var i = 1; i < globals_1.$dataSystem.equipTypes.length; i++) {
            slots.push(i);
        }
        if (slots.length >= 2 && this.isDualWield()) {
            slots[1] = 1;
        }
        return slots;
    };
    Game_Actor.prototype.equips = function () {
        return this._equips.map(function (item) {
            return item.object();
        });
    };
    Game_Actor.prototype.weapons = function () {
        return this.equips().filter(function (item) {
            return item && DataManager_1.DataManager.isWeapon(item);
        });
    };
    Game_Actor.prototype.armors = function () {
        return this.equips().filter(function (item) {
            return item && DataManager_1.DataManager.isArmor(item);
        });
    };
    Game_Actor.prototype.hasWeapon = function (weapon) {
        // return this.weapons().contains(weapon);
        return this.weapons().indexOf(weapon) >= 0;
    };
    Game_Actor.prototype.hasArmor = function (armor) {
        // return this.armors().contains(armor);
        return this.armors().indexOf(armor) >= 0;
    };
    Game_Actor.prototype.isEquipChangeOk = function (slotId) {
        return !this.isEquipTypeLocked(this.equipSlots()[slotId]) && !this.isEquipTypeSealed(this.equipSlots()[slotId]);
    };
    Game_Actor.prototype.changeEquip = function (slotId, item) {
        if (this.tradeItemWithParty(item, this.equips()[slotId]) && (!item || this.equipSlots()[slotId] === item.etypeId)) {
            this._equips[slotId].setObject(item);
            this.refresh();
        }
    };
    Game_Actor.prototype.forceChangeEquip = function (slotId, item) {
        this._equips[slotId].setObject(item);
        this.releaseUnequippableItems(true);
        this.refresh();
    };
    Game_Actor.prototype.tradeItemWithParty = function (newItem, oldItem) {
        if (newItem && !globals_1.$gameParty.hasItem(newItem)) {
            return false;
        }
        else {
            globals_1.$gameParty.gainItem(oldItem, 1);
            globals_1.$gameParty.loseItem(newItem, 1);
            return true;
        }
    };
    Game_Actor.prototype.changeEquipById = function (etypeId, itemId) {
        var slotId = etypeId - 1;
        if (this.equipSlots()[slotId] === 1) {
            this.changeEquip(slotId, globals_1.$dataWeapons[itemId]);
        }
        else {
            this.changeEquip(slotId, globals_1.$dataArmors[itemId]);
        }
    };
    Game_Actor.prototype.isEquipped = function (item) {
        // return this.equips().contains(item);
        return this.equips().indexOf(item) >= 0;
    };
    Game_Actor.prototype.discardEquip = function (item) {
        var slotId = this.equips().indexOf(item);
        if (slotId >= 0) {
            this._equips[slotId].setObject(null);
        }
    };
    Game_Actor.prototype.releaseUnequippableItems = function (forcing) {
        for (;;) {
            var slots = this.equipSlots();
            var equips = this.equips();
            var changed = false;
            for (var i = 0; i < equips.length; i++) {
                var item = equips[i];
                if (item && (!this.canEquip(item) || item.etypeId !== slots[i])) {
                    if (!forcing) {
                        this.tradeItemWithParty(null, item);
                    }
                    this._equips[i].setObject(null);
                    changed = true;
                }
            }
            if (!changed) {
                break;
            }
        }
    };
    Game_Actor.prototype.clearEquipments = function () {
        var maxSlots = this.equipSlots().length;
        for (var i = 0; i < maxSlots; i++) {
            if (this.isEquipChangeOk(i)) {
                this.changeEquip(i, null);
            }
        }
    };
    Game_Actor.prototype.optimizeEquipments = function () {
        var maxSlots = this.equipSlots().length;
        this.clearEquipments();
        for (var i = 0; i < maxSlots; i++) {
            if (this.isEquipChangeOk(i)) {
                this.changeEquip(i, this.bestEquipItem(i));
            }
        }
    };
    Game_Actor.prototype.bestEquipItem = function (slotId) {
        var _this = this;
        var etypeId = this.equipSlots()[slotId];
        var items = globals_1.$gameParty.equipItems().filter(function (item) {
            return item.etypeId === etypeId && _this.canEquip(item);
        });
        var bestItem = null;
        var bestPerformance = -1000;
        for (var i = 0; i < items.length; i++) {
            var performance = this.calcEquipItemPerformance(items[i]);
            if (performance > bestPerformance) {
                bestPerformance = performance;
                bestItem = items[i];
            }
        }
        return bestItem;
    };
    Game_Actor.prototype.calcEquipItemPerformance = function (item) {
        return item.params.reduce(function (a, b) {
            return a + b;
        });
    };
    Game_Actor.prototype.isSkillWtypeOk = function (skill) {
        var wtypeId1 = skill.requiredWtypeId1;
        var wtypeId2 = skill.requiredWtypeId2;
        if ((wtypeId1 === 0 && wtypeId2 === 0) ||
            (wtypeId1 > 0 && this.isWtypeEquipped(wtypeId1)) ||
            (wtypeId2 > 0 && this.isWtypeEquipped(wtypeId2))) {
            return true;
        }
        else {
            return false;
        }
    };
    Game_Actor.prototype.isWtypeEquipped = function (wtypeId) {
        return this.weapons().some(function (weapon) {
            return weapon.wtypeId === wtypeId;
        });
    };
    Game_Actor.prototype.refresh = function () {
        this.releaseUnequippableItems(false);
        GameBattler_1.Game_Battler.prototype.refresh.call(this);
    };
    Game_Actor.prototype.isActor = function () {
        return true;
    };
    Game_Actor.prototype.friendsUnit = function () {
        return globals_1.$gameParty;
    };
    Game_Actor.prototype.opponentsUnit = function () {
        return globals_1.$gameTroop;
    };
    Game_Actor.prototype.index = function () {
        return globals_1.$gameParty.members().indexOf(this);
    };
    Game_Actor.prototype.isBattleMember = function () {
        return Utils_1.Utils.contains(globals_1.$gameParty.battleMembers(), this);
    };
    Game_Actor.prototype.isFormationChangeOk = function () {
        return true;
    };
    Game_Actor.prototype.currentClass = function () {
        return globals_1.$dataClasses[this._classId];
    };
    Game_Actor.prototype.isClass = function (gameClass) {
        return gameClass && this._classId === gameClass.id;
    };
    Game_Actor.prototype.skills = function () {
        var list = [];
        this._skills.concat(this.addedSkills()).forEach(function (id) {
            if ( /* !list.contains($dataSkills[id])*/list.indexOf(globals_1.$dataSkills[id]) < 0) {
                list.push(globals_1.$dataSkills[id]);
            }
        });
        return list;
    };
    Game_Actor.prototype.usableSkills = function () {
        var _this = this;
        return this.skills().filter(function (skill) {
            return _this.canUse(skill);
        });
    };
    Game_Actor.prototype.traitObjects = function () {
        var objects = GameBattler_1.Game_Battler.prototype.traitObjects.call(this);
        objects = objects.concat([this.actor(), this.currentClass()]);
        var equips = this.equips();
        for (var i = 0; i < equips.length; i++) {
            var item = equips[i];
            if (item) {
                objects.push(item);
            }
        }
        return objects;
    };
    Game_Actor.prototype.attackElements = function () {
        var set = _super.prototype.attackElements.call(this);
        if (this.hasNoWeapons() && !Utils_1.Utils.contains(set, this.bareHandsElementId())) {
            set.push(this.bareHandsElementId());
        }
        return set;
    };
    Game_Actor.prototype.hasNoWeapons = function () {
        return this.weapons().length === 0;
    };
    Game_Actor.prototype.bareHandsElementId = function () {
        return 1;
    };
    Game_Actor.prototype.paramMax = function (paramId) {
        if (paramId === 0) {
            return 9999; // MHP
        }
        return GameBattler_1.Game_Battler.prototype.paramMax.call(this, paramId);
    };
    Game_Actor.prototype.paramBase = function (paramId) {
        return this.currentClass().params[paramId][this._level];
    };
    Game_Actor.prototype.paramPlus = function (paramId) {
        var value = GameBattler_1.Game_Battler.prototype.paramPlus.call(this, paramId);
        var equips = this.equips();
        for (var i = 0; i < equips.length; i++) {
            var item = equips[i];
            if (item) {
                value += item.params[paramId];
            }
        }
        return value;
    };
    Game_Actor.prototype.attackAnimationId1 = function () {
        if (this.hasNoWeapons()) {
            return this.bareHandsAnimationId();
        }
        else {
            var weapons = this.weapons();
            return weapons[0] ? weapons[0].animationId : 0;
        }
    };
    Game_Actor.prototype.attackAnimationId2 = function () {
        var weapons = this.weapons();
        return weapons[1] ? weapons[1].animationId : 0;
    };
    Game_Actor.prototype.bareHandsAnimationId = function () {
        return 1;
    };
    Game_Actor.prototype.changeExp = function (exp, show) {
        this._exp[this._classId] = Math.max(exp, 0);
        var lastLevel = this._level;
        var lastSkills = this.skills();
        while (!this.isMaxLevel() && this.currentExp() >= this.nextLevelExp()) {
            this.levelUp();
        }
        while (this.currentExp() < this.currentLevelExp()) {
            this.levelDown();
        }
        if (show && this._level > lastLevel) {
            this.displayLevelUp(this.findNewSkills(lastSkills));
        }
        this.refresh();
    };
    Game_Actor.prototype.levelUp = function () {
        var _this = this;
        this._level++;
        this.currentClass().learnings.forEach(function (learning) {
            if (learning.level === _this._level) {
                _this.learnSkill(learning.skillId);
            }
        });
    };
    Game_Actor.prototype.levelDown = function () {
        this._level--;
    };
    Game_Actor.prototype.findNewSkills = function (lastSkills) {
        var newSkills = this.skills();
        for (var i = 0; i < lastSkills.length; i++) {
            var index = newSkills.indexOf(lastSkills[i]);
            if (index >= 0) {
                newSkills.splice(index, 1);
            }
        }
        return newSkills;
    };
    Game_Actor.prototype.displayLevelUp = function (newSkills) {
        var text = Utils_1.Utils.format(TextManager_1.TextManager.levelUp, this._name, TextManager_1.TextManager.level, this._level);
        globals_1.$gameMessage.newPage();
        globals_1.$gameMessage.add(text);
        newSkills.forEach(function (skill) {
            globals_1.$gameMessage.add(Utils_1.Utils.format(TextManager_1.TextManager.obtainSkill, skill.name));
        });
    };
    Game_Actor.prototype.gainExp = function (exp) {
        var newExp = this.currentExp() + Math.round(exp * this.finalExpRate());
        this.changeExp(newExp, this.shouldDisplayLevelUp());
    };
    Game_Actor.prototype.finalExpRate = function () {
        return this.exr * (this.isBattleMember() ? 1 : this.benchMembersExpRate());
    };
    Game_Actor.prototype.benchMembersExpRate = function () {
        return globals_1.$dataSystem.optExtraExp ? 1 : 0;
    };
    Game_Actor.prototype.shouldDisplayLevelUp = function () {
        return true;
    };
    Game_Actor.prototype.changeLevel = function (level, show) {
        level = Utils_1.Utils.clamp(level, 1, this.maxLevel());
        level = Math.max(1, Math.min(level, this.maxLevel()));
        this.changeExp(this.expForLevel(level), show);
    };
    Game_Actor.prototype.learnSkill = function (skillId) {
        if (!this.isLearnedSkill(skillId)) {
            this._skills.push(skillId);
            this._skills.sort(function (a, b) {
                return a - b;
            });
        }
    };
    Game_Actor.prototype.forgetSkill = function (skillId) {
        var index = this._skills.indexOf(skillId);
        if (index >= 0) {
            this._skills.splice(index, 1);
        }
    };
    Game_Actor.prototype.isLearnedSkill = function (skillId) {
        // return this._skills.contains(skillId);
        return this._skills.indexOf(skillId) >= 0;
    };
    Game_Actor.prototype.hasSkill = function (skillId) {
        // return this.skills().contains($dataSkills[skillId]);
        return this.skills().indexOf(globals_1.$dataSkills[skillId]) >= 0;
    };
    Game_Actor.prototype.changeClass = function (classId, keepExp) {
        if (keepExp) {
            this._exp[classId] = this.currentExp();
        }
        this._classId = classId;
        this.changeExp(this._exp[this._classId] || 0, false);
        this.refresh();
    };
    Game_Actor.prototype.setCharacterImage = function (characterName, characterIndex) {
        this._characterName = characterName;
        this._characterIndex = characterIndex;
    };
    Game_Actor.prototype.setFaceImage = function (faceName, faceIndex) {
        this._faceName = faceName;
        this._faceIndex = faceIndex;
    };
    Game_Actor.prototype.setBattlerImage = function (battlerName) {
        this._battlerName = battlerName;
    };
    Game_Actor.prototype.isSpriteVisible = function () {
        return globals_1.$gameSystem.isSideView();
    };
    Game_Actor.prototype.startAnimation = function (animationId, mirror, delay) {
        mirror = !mirror;
        _super.prototype.startAnimation.call(this, animationId, mirror, delay);
    };
    Game_Actor.prototype.performActionStart = function (action) {
        _super.prototype.performActionStart.call(this, action);
    };
    Game_Actor.prototype.performAction = function (action) {
        _super.prototype.performAction.call(this, action);
        if (action.isAttack()) {
            this.performAttack();
        }
        else if (action.isGuard()) {
            this.requestMotion("guard");
        }
        else if (action.isMagicSkill()) {
            this.requestMotion("spell");
        }
        else if (action.isSkill()) {
            this.requestMotion("skill");
        }
        else if (action.isItem()) {
            this.requestMotion("item");
        }
    };
    Game_Actor.prototype.performActionEnd = function () {
        // Game_Battler.prototype.performActionEnd.call(this);
        _super.prototype.performActionEnd.call(this);
    };
    Game_Actor.prototype.performAttack = function () {
        var weapons = this.weapons();
        var wtypeId = weapons[0] ? weapons[0].wtypeId : 0;
        var attackMotion = globals_1.$dataSystem.attackMotions[wtypeId];
        if (attackMotion) {
            if (attackMotion.type === 0) {
                this.requestMotion("thrust");
            }
            else if (attackMotion.type === 1) {
                this.requestMotion("swing");
            }
            else if (attackMotion.type === 2) {
                this.requestMotion("missile");
            }
            this.startWeaponAnimation(attackMotion.weaponImageId);
        }
    };
    Game_Actor.prototype.performDamage = function () {
        GameBattler_1.Game_Battler.prototype.performDamage.call(this);
        if (this.isSpriteVisible()) {
            this.requestMotion("damage");
        }
        else {
            globals_1.$gameScreen.startShake(5, 5, 10);
        }
        SoundManager_1.SoundManager.playActorDamage();
    };
    Game_Actor.prototype.performEvasion = function () {
        GameBattler_1.Game_Battler.prototype.performEvasion.call(this);
        this.requestMotion("evade");
    };
    Game_Actor.prototype.performMagicEvasion = function () {
        GameBattler_1.Game_Battler.prototype.performMagicEvasion.call(this);
        this.requestMotion("evade");
    };
    Game_Actor.prototype.performCounter = function () {
        GameBattler_1.Game_Battler.prototype.performCounter.call(this);
        this.performAttack();
    };
    Game_Actor.prototype.performCollapse = function () {
        GameBattler_1.Game_Battler.prototype.performCollapse.call(this);
        if (globals_1.$gameParty.inBattle()) {
            SoundManager_1.SoundManager.playActorCollapse();
        }
    };
    Game_Actor.prototype.performVictory = function () {
        if (this.canMove()) {
            this.requestMotion("victory");
        }
    };
    Game_Actor.prototype.performEscape = function () {
        if (this.canMove()) {
            this.requestMotion("escape");
        }
    };
    Game_Actor.prototype.makeActionList = function () {
        var _this = this;
        var list = [];
        var action = new GameAction_1.Game_Action(this);
        action.setAttack();
        list.push(action);
        this.usableSkills().forEach(function (skill) {
            action = new GameAction_1.Game_Action(_this);
            action.setSkill(skill.id);
            list.push(action);
        });
        return list;
    };
    Game_Actor.prototype.makeAutoBattleActions = function () {
        for (var i = 0; i < this.numActions(); i++) {
            var list = this.makeActionList();
            var maxValue = Number.MIN_VALUE;
            for (var j = 0; j < list.length; j++) {
                var value = list[j].evaluate();
                if (value > maxValue) {
                    maxValue = value;
                    this.setAction(i, list[j]);
                }
            }
        }
        this.setActionState("waiting");
    };
    Game_Actor.prototype.makeConfusionActions = function () {
        for (var i = 0; i < this.numActions(); i++) {
            this.action(i).setConfusion();
        }
        this.setActionState("waiting");
    };
    Game_Actor.prototype.makeActions = function () {
        GameBattler_1.Game_Battler.prototype.makeActions.call(this);
        if (this.numActions() > 0) {
            this.setActionState("undecided");
        }
        else {
            this.setActionState("waiting");
        }
        if (this.isAutoBattle()) {
            this.makeAutoBattleActions();
        }
        else if (this.isConfused()) {
            this.makeConfusionActions();
        }
    };
    Game_Actor.prototype.onPlayerWalk = function () {
        var _this = this;
        this.clearResult();
        this.checkFloorEffect();
        if (globals_1.$gamePlayer.isNormal()) {
            this.turnEndOnMap();
            this.states().forEach(function (state) {
                _this.updateStateSteps(state);
            });
            this.showAddedStates();
            this.showRemovedStates();
        }
    };
    Game_Actor.prototype.updateStateSteps = function (state) {
        if (state.removeByWalking) {
            if (this._stateSteps[state.id] > 0) {
                if (--this._stateSteps[state.id] === 0) {
                    this.removeState(state.id);
                }
            }
        }
    };
    Game_Actor.prototype.showAddedStates = function () {
        var _this = this;
        this.result()
            .addedStateObjects()
            .forEach(function (state) {
            if (state.message1) {
                globals_1.$gameMessage.add(_this._name + state.message1);
            }
        });
    };
    Game_Actor.prototype.showRemovedStates = function () {
        var _this = this;
        this.result()
            .removedStateObjects()
            .forEach(function (state) {
            if (state.message4) {
                globals_1.$gameMessage.add(_this._name + state.message4);
            }
        });
    };
    Game_Actor.prototype.stepsForTurn = function () {
        return 20;
    };
    Game_Actor.prototype.turnEndOnMap = function () {
        if (globals_1.$gameParty.steps() % this.stepsForTurn() === 0) {
            this.onTurnEnd();
            if (this.result().hpDamage > 0) {
                this.performMapDamage();
            }
        }
    };
    Game_Actor.prototype.checkFloorEffect = function () {
        if (globals_1.$gamePlayer.isOnDamageFloor()) {
            this.executeFloorDamage();
        }
    };
    Game_Actor.prototype.executeFloorDamage = function () {
        var damage = Math.floor(this.basicFloorDamage() * this.fdr);
        damage = Math.min(damage, this.maxFloorDamage());
        this.gainHp(-damage);
        if (damage > 0) {
            this.performMapDamage();
        }
    };
    Game_Actor.prototype.basicFloorDamage = function () {
        return 10;
    };
    Game_Actor.prototype.maxFloorDamage = function () {
        return globals_1.$dataSystem.optFloorDeath ? this.hp : Math.max(this.hp - 1, 0);
    };
    Game_Actor.prototype.performMapDamage = function () {
        if (!globals_1.$gameParty.inBattle()) {
            globals_1.$gameScreen.startFlashForDamage();
        }
    };
    Game_Actor.prototype.clearActions = function () {
        GameBattler_1.Game_Battler.prototype.clearActions.call(this);
        this._actionInputIndex = 0;
    };
    Game_Actor.prototype.inputtingAction = function () {
        return this.action(this._actionInputIndex);
    };
    Game_Actor.prototype.selectNextCommand = function () {
        if (this._actionInputIndex < this.numActions() - 1) {
            this._actionInputIndex++;
            return true;
        }
        else {
            return false;
        }
    };
    Game_Actor.prototype.selectPreviousCommand = function () {
        if (this._actionInputIndex > 0) {
            this._actionInputIndex--;
            return true;
        }
        else {
            return false;
        }
    };
    Game_Actor.prototype.lastMenuSkill = function () {
        return this._lastMenuSkill.object();
    };
    Game_Actor.prototype.setLastMenuSkill = function (skill) {
        this._lastMenuSkill.setObject(skill);
    };
    Game_Actor.prototype.lastBattleSkill = function () {
        return this._lastBattleSkill.object();
    };
    Game_Actor.prototype.setLastBattleSkill = function (skill) {
        this._lastBattleSkill.setObject(skill);
    };
    Game_Actor.prototype.lastCommandSymbol = function () {
        return this._lastCommandSymbol;
    };
    Game_Actor.prototype.setLastCommandSymbol = function (symbol) {
        this._lastCommandSymbol = symbol;
    };
    Game_Actor.prototype.testEscape = function (item) {
        return item.effects.some(function (effect /* , index, ar*/) {
            return effect && effect.code === GameAction_1.Game_Action.EFFECT_SPECIAL;
        });
    };
    Game_Actor.prototype.meetsUsableItemConditions = function (item) {
        // TODO: BattleManager実装
        // if ($gameParty.inBattle() && BattleManager.canEscape() false && this.testEscape(item)) {
        // 	return false;
        // }
        // return Game_BattlerBase.prototype.meetsUsableItemConditions.call(this, item);
        return _super.prototype.meetsUsableItemConditions.call(this, item);
    };
    return Game_Actor;
}(GameBattler_1.Game_Battler));
exports.Game_Actor = Game_Actor;

},{"../core/Utils":28,"../managers/DataManager":36,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./GameAction":44,"./GameBattler":48,"./GameItem":58}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Actors = void 0;
var globals_1 = require("../managers/globals");
var GameActor_1 = require("./GameActor");
var Game_Actors = /** @class */ (function () {
    function Game_Actors() {
        this.initialize();
    }
    Game_Actors.prototype.initialize = function () {
        this._data = [];
    };
    Game_Actors.prototype.actor = function (actorId) {
        if (globals_1.$dataActors[actorId]) {
            if (!this._data[actorId]) {
                this._data[actorId] = new GameActor_1.Game_Actor(actorId);
            }
            return this._data[actorId];
        }
        return null;
    };
    return Game_Actors;
}());
exports.Game_Actors = Game_Actors;
(0, globals_1.set$gameActorsFactory)(function () {
    return new Game_Actors();
});

},{"../managers/globals":43,"./GameActor":46}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Battler = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var GameAction_1 = require("./GameAction");
var GameActionResult_1 = require("./GameActionResult");
var GameBattlerBase_1 = require("./GameBattlerBase");
var Game_Battler = /** @class */ (function (_super) {
    __extends(Game_Battler, _super);
    function Game_Battler() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        if (Object.getPrototypeOf(_this) === Game_Battler.prototype) {
            _this.initialize(args);
        }
        return _this;
    }
    Game_Battler.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        _super.prototype.initialize.apply(this, args);
    };
    Game_Battler.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._actions = [];
        this._speed = 0;
        this._result = new GameActionResult_1.Game_ActionResult();
        this._actionState = "";
        this._lastTargetIndex = 0;
        this._animations = [];
        this._damagePopup = false;
        this._effectType = null;
        this._motionType = null;
        this._weaponImageId = 0;
        this._motionRefresh = false;
        this._selected = false;
    };
    Game_Battler.prototype.clearAnimations = function () {
        this._animations = [];
    };
    Game_Battler.prototype.clearDamagePopup = function () {
        this._damagePopup = false;
    };
    Game_Battler.prototype.clearWeaponAnimation = function () {
        this._weaponImageId = 0;
    };
    Game_Battler.prototype.clearEffect = function () {
        this._effectType = null;
    };
    Game_Battler.prototype.clearMotion = function () {
        this._motionType = null;
        this._motionRefresh = false;
    };
    Game_Battler.prototype.requestEffect = function (effectType) {
        this._effectType = effectType;
    };
    Game_Battler.prototype.requestMotion = function (motionType) {
        this._motionType = motionType;
    };
    Game_Battler.prototype.requestMotionRefresh = function () {
        this._motionRefresh = true;
    };
    Game_Battler.prototype.select = function () {
        this._selected = true;
    };
    Game_Battler.prototype.deselect = function () {
        this._selected = false;
    };
    Game_Battler.prototype.isAnimationRequested = function () {
        return this._animations.length > 0;
    };
    Game_Battler.prototype.isDamagePopupRequested = function () {
        return this._damagePopup;
    };
    Game_Battler.prototype.isEffectRequested = function () {
        return !!this._effectType;
    };
    Game_Battler.prototype.isMotionRequested = function () {
        return !!this._motionType;
    };
    Game_Battler.prototype.isWeaponAnimationRequested = function () {
        return this._weaponImageId > 0;
    };
    Game_Battler.prototype.isMotionRefreshRequested = function () {
        return this._motionRefresh;
    };
    Game_Battler.prototype.isSelected = function () {
        return this._selected;
    };
    Game_Battler.prototype.effectType = function () {
        return this._effectType;
    };
    Game_Battler.prototype.motionType = function () {
        return this._motionType;
    };
    Game_Battler.prototype.weaponImageId = function () {
        return this._weaponImageId;
    };
    Game_Battler.prototype.shiftAnimation = function () {
        return this._animations.shift();
    };
    Game_Battler.prototype.startAnimation = function (animationId, mirror, delay) {
        var data = { animationId: animationId, mirror: mirror, delay: delay };
        this._animations.push(data);
    };
    Game_Battler.prototype.startDamagePopup = function () {
        this._damagePopup = true;
    };
    Game_Battler.prototype.startWeaponAnimation = function (weaponImageId) {
        this._weaponImageId = weaponImageId;
    };
    Game_Battler.prototype.action = function (index) {
        return this._actions[index];
    };
    Game_Battler.prototype.setAction = function (index, action) {
        this._actions[index] = action;
    };
    Game_Battler.prototype.numActions = function () {
        return this._actions.length;
    };
    Game_Battler.prototype.clearActions = function () {
        this._actions = [];
    };
    Game_Battler.prototype.result = function () {
        return this._result;
    };
    Game_Battler.prototype.clearResult = function () {
        this._result.clear();
    };
    Game_Battler.prototype.refresh = function () {
        GameBattlerBase_1.Game_BattlerBase.prototype.refresh.call(this);
        if (this.hp === 0) {
            this.addState(this.deathStateId());
        }
        else {
            this.removeState(this.deathStateId());
        }
    };
    Game_Battler.prototype.addState = function (stateId) {
        if (this.isStateAddable(stateId)) {
            if (!this.isStateAffected(stateId)) {
                this.addNewState(stateId);
                this.refresh();
            }
            this.resetStateCounts(stateId);
            this._result.pushAddedState(stateId);
        }
    };
    Game_Battler.prototype.isStateAddable = function (stateId) {
        return (this.isAlive() &&
            globals_1.$dataStates[stateId] &&
            !this.isStateResist(stateId) &&
            !this._result.isStateRemoved(stateId) &&
            !this.isStateRestrict(stateId));
    };
    Game_Battler.prototype.isStateRestrict = function (stateId) {
        return globals_1.$dataStates[stateId].removeByRestriction && this.isRestricted();
    };
    Game_Battler.prototype.onRestrict = function () {
        var _this = this;
        GameBattlerBase_1.Game_BattlerBase.prototype.onRestrict.call(this);
        this.clearActions();
        this.states().forEach(function (state) {
            if (state.removeByRestriction) {
                _this.removeState(state.id);
            }
        });
    };
    Game_Battler.prototype.removeState = function (stateId) {
        if (this.isStateAffected(stateId)) {
            if (stateId === this.deathStateId()) {
                this.revive();
            }
            this.eraseState(stateId);
            this.refresh();
            this._result.pushRemovedState(stateId);
        }
    };
    Game_Battler.prototype.escape = function () {
        if (globals_1.$gameParty.inBattle()) {
            this.hide();
        }
        this.clearActions();
        this.clearStates();
        SoundManager_1.SoundManager.playEscape();
    };
    Game_Battler.prototype.addBuff = function (paramId, turns) {
        if (this.isAlive()) {
            this.increaseBuff(paramId);
            if (this.isBuffAffected(paramId)) {
                this.overwriteBuffTurns(paramId, turns);
            }
            this._result.pushAddedBuff(paramId);
            this.refresh();
        }
    };
    Game_Battler.prototype.addDebuff = function (paramId, turns) {
        if (this.isAlive()) {
            this.decreaseBuff(paramId);
            if (this.isDebuffAffected(paramId)) {
                this.overwriteBuffTurns(paramId, turns);
            }
            this._result.pushAddedDebuff(paramId);
            this.refresh();
        }
    };
    Game_Battler.prototype.removeBuff = function (paramId) {
        if (this.isAlive() && this.isBuffOrDebuffAffected(paramId)) {
            this.eraseBuff(paramId);
            this._result.pushRemovedBuff(paramId);
            this.refresh();
        }
    };
    Game_Battler.prototype.removeBattleStates = function () {
        var _this = this;
        this.states().forEach(function (state) {
            if (state.removeAtBattleEnd) {
                _this.removeState(state.id);
            }
        });
    };
    Game_Battler.prototype.removeAllBuffs = function () {
        for (var i = 0; i < this.buffLength(); i++) {
            this.removeBuff(i);
        }
    };
    Game_Battler.prototype.removeStatesAuto = function (timing) {
        var _this = this;
        this.states().forEach(function (state) {
            if (_this.isStateExpired(state.id) && state.autoRemovalTiming === timing) {
                _this.removeState(state.id);
            }
        });
    };
    Game_Battler.prototype.removeBuffsAuto = function () {
        for (var i = 0; i < this.buffLength(); i++) {
            if (this.isBuffExpired(i)) {
                this.removeBuff(i);
            }
        }
    };
    Game_Battler.prototype.removeStatesByDamage = function () {
        var _this = this;
        this.states().forEach(function (state) {
            if (state.removeByDamage && Math.floor(100 * g.game.vars.random.generate()) < state.chanceByDamage) {
                _this.removeState(state.id);
            }
        });
    };
    Game_Battler.prototype.makeActionTimes = function () {
        return this.actionPlusSet().reduce(function (r, p) {
            return g.game.vars.random.generate() < p ? r + 1 : r;
        }, 1);
    };
    Game_Battler.prototype.makeActions = function () {
        this.clearActions();
        if (this.canMove()) {
            var actionTimes = this.makeActionTimes();
            this._actions = [];
            for (var i = 0; i < actionTimes; i++) {
                this._actions.push(new GameAction_1.Game_Action(this));
            }
        }
    };
    Game_Battler.prototype.speed = function () {
        return this._speed;
    };
    Game_Battler.prototype.makeSpeed = function () {
        this._speed =
            Math.min.apply(null, this._actions.map(function (action) {
                return action.speed();
            })) || 0;
    };
    Game_Battler.prototype.currentAction = function () {
        return this._actions[0];
    };
    Game_Battler.prototype.removeCurrentAction = function () {
        this._actions.shift();
    };
    Game_Battler.prototype.setLastTarget = function (target) {
        if (target) {
            this._lastTargetIndex = target.index();
        }
        else {
            this._lastTargetIndex = 0;
        }
    };
    Game_Battler.prototype.forceAction = function (skillId, targetIndex) {
        this.clearActions();
        var action = new GameAction_1.Game_Action(this, true);
        action.setSkill(skillId);
        if (targetIndex === -2) {
            action.setTarget(this._lastTargetIndex);
        }
        else if (targetIndex === -1) {
            action.decideRandomTarget();
        }
        else {
            action.setTarget(targetIndex);
        }
        this._actions.push(action);
    };
    Game_Battler.prototype.useItem = function (item) {
        if (DataManager_1.DataManager.isSkill(item)) {
            this.paySkillCost(item);
        }
        else if (DataManager_1.DataManager.isItem(item)) {
            this.consumeItem(item);
        }
    };
    Game_Battler.prototype.consumeItem = function (item) {
        globals_1.$gameParty.consumeItem(item);
    };
    Game_Battler.prototype.gainHp = function (value) {
        this._result.hpDamage = -value;
        this._result.hpAffected = true;
        this.setHp(this.hp + value);
    };
    Game_Battler.prototype.gainMp = function (value) {
        this._result.mpDamage = -value;
        this.setMp(this.mp + value);
    };
    Game_Battler.prototype.gainTp = function (value) {
        this._result.tpDamage = -value;
        this.setTp(this.tp + value);
    };
    Game_Battler.prototype.gainSilentTp = function (value) {
        this.setTp(this.tp + value);
    };
    Game_Battler.prototype.initTp = function () {
        this.setTp(Math.floor(25 * g.game.vars.random.generate()));
    };
    Game_Battler.prototype.clearTp = function () {
        this.setTp(0);
    };
    Game_Battler.prototype.chargeTpByDamage = function (damageRate) {
        var value = Math.floor(50 * damageRate * this.tcr);
        this.gainSilentTp(value);
    };
    Game_Battler.prototype.regenerateHp = function () {
        var value = Math.floor(this.mhp * this.hrg);
        value = Math.max(value, -this.maxSlipDamage());
        if (value !== 0) {
            this.gainHp(value);
        }
    };
    Game_Battler.prototype.maxSlipDamage = function () {
        return globals_1.$dataSystem.optSlipDeath ? this.hp : Math.max(this.hp - 1, 0);
    };
    Game_Battler.prototype.regenerateMp = function () {
        var value = Math.floor(this.mmp * this.mrg);
        if (value !== 0) {
            this.gainMp(value);
        }
    };
    Game_Battler.prototype.regenerateTp = function () {
        var value = Math.floor(100 * this.trg);
        this.gainSilentTp(value);
    };
    Game_Battler.prototype.regenerateAll = function () {
        if (this.isAlive()) {
            this.regenerateHp();
            this.regenerateMp();
            this.regenerateTp();
        }
    };
    Game_Battler.prototype.onBattleStart = function () {
        this.setActionState("undecided");
        this.clearMotion();
        if (!this.isPreserveTp()) {
            this.initTp();
        }
    };
    Game_Battler.prototype.onAllActionsEnd = function () {
        this.clearResult();
        this.removeStatesAuto(1);
        this.removeBuffsAuto();
    };
    Game_Battler.prototype.onTurnEnd = function () {
        this.clearResult();
        this.regenerateAll();
        // if (!BattleManager.isForcedTurn()) {
        // 	this.updateStateTurns();
        // 	this.updateBuffTurns();
        // }
        this.removeStatesAuto(2);
    };
    Game_Battler.prototype.onBattleEnd = function () {
        this.clearResult();
        this.removeBattleStates();
        this.removeAllBuffs();
        this.clearActions();
        if (!this.isPreserveTp()) {
            this.clearTp();
        }
        this.appear();
    };
    Game_Battler.prototype.onDamage = function (value) {
        this.removeStatesByDamage();
        this.chargeTpByDamage(value / this.mhp);
    };
    Game_Battler.prototype.setActionState = function (actionState) {
        this._actionState = actionState;
        this.requestMotionRefresh();
    };
    Game_Battler.prototype.isUndecided = function () {
        return this._actionState === "undecided";
    };
    Game_Battler.prototype.isInputting = function () {
        return this._actionState === "inputting";
    };
    Game_Battler.prototype.isWaiting = function () {
        return this._actionState === "waiting";
    };
    Game_Battler.prototype.isActing = function () {
        return this._actionState === "acting";
    };
    Game_Battler.prototype.isChanting = function () {
        if (this.isWaiting()) {
            return this._actions.some(function (action) {
                return action.isMagicSkill();
            });
        }
        return false;
    };
    Game_Battler.prototype.isGuardWaiting = function () {
        if (this.isWaiting()) {
            return this._actions.some(function (action) {
                return action.isGuard();
            });
        }
        return false;
    };
    Game_Battler.prototype.performActionStart = function (action) {
        if (!action.isGuard()) {
            this.setActionState("acting");
        }
    };
    Game_Battler.prototype.performAction = function (_action) {
        //
    };
    Game_Battler.prototype.performActionEnd = function () {
        this.setActionState("done");
    };
    Game_Battler.prototype.performDamage = function () {
        //
    };
    Game_Battler.prototype.performMiss = function () {
        SoundManager_1.SoundManager.playMiss();
    };
    Game_Battler.prototype.performRecovery = function () {
        SoundManager_1.SoundManager.playRecovery();
    };
    Game_Battler.prototype.performEvasion = function () {
        SoundManager_1.SoundManager.playEvasion();
    };
    Game_Battler.prototype.performMagicEvasion = function () {
        SoundManager_1.SoundManager.playMagicEvasion();
    };
    Game_Battler.prototype.performCounter = function () {
        SoundManager_1.SoundManager.playEvasion();
    };
    Game_Battler.prototype.performReflection = function () {
        SoundManager_1.SoundManager.playReflection();
    };
    Game_Battler.prototype.performSubstitute = function (_target) {
        //
    };
    Game_Battler.prototype.performCollapse = function () {
        //
    };
    return Game_Battler;
}(GameBattlerBase_1.Game_BattlerBase));
exports.Game_Battler = Game_Battler;

},{"../managers/DataManager":36,"../managers/SoundManager":40,"../managers/globals":43,"./GameAction":44,"./GameActionResult":45,"./GameBattlerBase":49}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_BattlerBase = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var Game_BattlerBase = /** @class */ (function () {
    function Game_BattlerBase() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (Object.getPrototypeOf(this) === Game_BattlerBase.prototype) {
            this.initialize(args);
        }
    }
    Object.defineProperty(Game_BattlerBase.prototype, "hp", {
        get: function () {
            return this._hp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mp", {
        get: function () {
            return this._mp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "tp", {
        get: function () {
            return this._tp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mhp", {
        get: function () {
            return this.param(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mmp", {
        get: function () {
            return this.param(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "atk", {
        get: function () {
            return this.param(2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "def", {
        get: function () {
            return this.param(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mat", {
        get: function () {
            return this.param(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mdf", {
        get: function () {
            return this.param(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "agi", {
        get: function () {
            return this.param(6);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "luk", {
        get: function () {
            return this.param(7);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "hit", {
        get: function () {
            return this.xparam(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "eva", {
        get: function () {
            return this.xparam(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "cri", {
        get: function () {
            return this.xparam(2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "cev", {
        get: function () {
            return this.xparam(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mev", {
        get: function () {
            return this.xparam(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mrf", {
        get: function () {
            return this.xparam(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "cnt", {
        get: function () {
            return this.xparam(6);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "hrg", {
        get: function () {
            return this.xparam(7);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mrg", {
        get: function () {
            return this.xparam(8);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "trg", {
        get: function () {
            return this.xparam(9);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "tgr", {
        get: function () {
            return this.sparam(0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "grd", {
        get: function () {
            return this.sparam(1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "rec", {
        get: function () {
            return this.sparam(2);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "pha", {
        get: function () {
            return this.sparam(3);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mcr", {
        get: function () {
            return this.sparam(4);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "tcr", {
        get: function () {
            return this.sparam(5);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "pdr", {
        get: function () {
            return this.sparam(6);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "mdr", {
        get: function () {
            return this.sparam(7);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "fdr", {
        get: function () {
            return this.sparam(8);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_BattlerBase.prototype, "exr", {
        get: function () {
            return this.sparam(9);
        },
        enumerable: false,
        configurable: true
    });
    Game_BattlerBase.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this.initMembers();
    };
    Game_BattlerBase.prototype.initMembers = function () {
        this._hp = 1;
        this._mp = 0;
        this._tp = 0;
        this._hidden = false;
        this.clearParamPlus();
        this.clearStates();
        this.clearBuffs();
    };
    Game_BattlerBase.prototype.clearParamPlus = function () {
        this._paramPlus = [0, 0, 0, 0, 0, 0, 0, 0];
    };
    Game_BattlerBase.prototype.clearStates = function () {
        this._states = [];
        this._stateTurns = {};
    };
    Game_BattlerBase.prototype.eraseState = function (stateId) {
        var index = this._states.indexOf(stateId);
        if (index >= 0) {
            this._states.splice(index, 1);
        }
        delete this._stateTurns[stateId];
    };
    Game_BattlerBase.prototype.isStateAffected = function (stateId) {
        // return this._states.contains(stateId);
        return this._states.indexOf(stateId) >= 0;
    };
    Game_BattlerBase.prototype.isDeathStateAffected = function () {
        return this.isStateAffected(this.deathStateId());
    };
    Game_BattlerBase.prototype.deathStateId = function () {
        return 1;
    };
    Game_BattlerBase.prototype.resetStateCounts = function (stateId) {
        var state = globals_1.$dataStates[stateId];
        var variance = 1 + Math.max(state.maxTurns - state.minTurns, 0);
        this._stateTurns[stateId] = state.minTurns + Math.floor(variance * g.game.vars.random.generate());
    };
    Game_BattlerBase.prototype.isStateExpired = function (stateId) {
        return this._stateTurns[stateId] === 0;
    };
    Game_BattlerBase.prototype.updateStateTurns = function () {
        var _this = this;
        this._states.forEach(function (stateId) {
            if (_this._stateTurns[stateId] > 0) {
                _this._stateTurns[stateId]--;
            }
        });
    };
    Game_BattlerBase.prototype.clearBuffs = function () {
        this._buffs = [0, 0, 0, 0, 0, 0, 0, 0];
        this._buffTurns = [0, 0, 0, 0, 0, 0, 0, 0];
    };
    Game_BattlerBase.prototype.eraseBuff = function (paramId) {
        this._buffs[paramId] = 0;
        this._buffTurns[paramId] = 0;
    };
    Game_BattlerBase.prototype.buffLength = function () {
        return this._buffs.length;
    };
    Game_BattlerBase.prototype.buff = function (paramId) {
        return this._buffs[paramId];
    };
    Game_BattlerBase.prototype.isBuffAffected = function (paramId) {
        return this._buffs[paramId] > 0;
    };
    Game_BattlerBase.prototype.isDebuffAffected = function (paramId) {
        return this._buffs[paramId] < 0;
    };
    Game_BattlerBase.prototype.isBuffOrDebuffAffected = function (paramId) {
        return this._buffs[paramId] !== 0;
    };
    Game_BattlerBase.prototype.isMaxBuffAffected = function (paramId) {
        return this._buffs[paramId] === 2;
    };
    Game_BattlerBase.prototype.isMaxDebuffAffected = function (paramId) {
        return this._buffs[paramId] === -2;
    };
    Game_BattlerBase.prototype.increaseBuff = function (paramId) {
        if (!this.isMaxBuffAffected(paramId)) {
            this._buffs[paramId]++;
        }
    };
    Game_BattlerBase.prototype.decreaseBuff = function (paramId) {
        if (!this.isMaxDebuffAffected(paramId)) {
            this._buffs[paramId]--;
        }
    };
    Game_BattlerBase.prototype.overwriteBuffTurns = function (paramId, turns) {
        if (this._buffTurns[paramId] < turns) {
            this._buffTurns[paramId] = turns;
        }
    };
    Game_BattlerBase.prototype.isBuffExpired = function (paramId) {
        return this._buffTurns[paramId] === 0;
    };
    Game_BattlerBase.prototype.updateBuffTurns = function () {
        for (var i = 0; i < this._buffTurns.length; i++) {
            if (this._buffTurns[i] > 0) {
                this._buffTurns[i]--;
            }
        }
    };
    Game_BattlerBase.prototype.die = function () {
        this._hp = 0;
        this.clearStates();
        this.clearBuffs();
    };
    Game_BattlerBase.prototype.revive = function () {
        if (this._hp === 0) {
            this._hp = 1;
        }
    };
    Game_BattlerBase.prototype.states = function () {
        return this._states.map(function (id) {
            return globals_1.$dataStates[id];
        });
    };
    Game_BattlerBase.prototype.stateIcons = function () {
        // NOTE: SpriteStateIconから number[] と推測
        return this.states()
            .map(function (state) {
            return state.iconIndex;
        })
            .filter(function (iconIndex) {
            return iconIndex > 0;
        });
    };
    Game_BattlerBase.prototype.buffIcons = function () {
        var icons = [];
        for (var i = 0; i < this._buffs.length; i++) {
            if (this._buffs[i] !== 0) {
                icons.push(this.buffIconIndex(this._buffs[i], i));
            }
        }
        return icons;
    };
    Game_BattlerBase.prototype.buffIconIndex = function (buffLevel, paramId) {
        if (buffLevel > 0) {
            return Game_BattlerBase.ICON_BUFF_START + (buffLevel - 1) * 8 + paramId;
        }
        else if (buffLevel < 0) {
            return Game_BattlerBase.ICON_DEBUFF_START + (-buffLevel - 1) * 8 + paramId;
        }
        else {
            return 0;
        }
    };
    Game_BattlerBase.prototype.allIcons = function () {
        return this.stateIcons().concat(this.buffIcons());
    };
    Game_BattlerBase.prototype.traitObjects = function () {
        // Returns an array of the all objects having traits. States only here.
        return this.states();
    };
    Game_BattlerBase.prototype.allTraits = function () {
        return this.traitObjects().reduce(function (r, obj) {
            return r.concat(obj.traits);
        }, []);
    };
    Game_BattlerBase.prototype.traits = function (code) {
        return this.allTraits().filter(function (trait) {
            return trait.code === code;
        });
    };
    Game_BattlerBase.prototype.traitsWithId = function (code, id) {
        return this.allTraits().filter(function (trait) {
            return trait.code === code && trait.dataId === id;
        });
    };
    Game_BattlerBase.prototype.traitsPi = function (code, id) {
        return this.traitsWithId(code, id).reduce(function (r, trait) {
            return r * trait.value;
        }, 1);
    };
    Game_BattlerBase.prototype.traitsSum = function (code, id) {
        return this.traitsWithId(code, id).reduce(function (r, trait) {
            return r + trait.value;
        }, 0);
    };
    Game_BattlerBase.prototype.traitsSumAll = function (code) {
        return this.traits(code).reduce(function (r, trait) {
            return r + trait.value;
        }, 0);
    };
    Game_BattlerBase.prototype.traitsSet = function (code) {
        return this.traits(code).reduce(function (r, trait) {
            return r.concat(trait.dataId);
        }, [] // (optional) コールバックの最初の呼び出しのとき最初の引数になる
        );
    };
    Game_BattlerBase.prototype.paramBase = function (_paramId) {
        return 0;
    };
    Game_BattlerBase.prototype.paramPlus = function (paramId) {
        return this._paramPlus[paramId];
    };
    Game_BattlerBase.prototype.paramMin = function (paramId) {
        if (paramId === 1) {
            return 0; // MMP
        }
        else {
            return 1;
        }
    };
    Game_BattlerBase.prototype.paramMax = function (paramId) {
        if (paramId === 0) {
            return 999999; // MHP
        }
        else if (paramId === 1) {
            return 9999; // MMP
        }
        else {
            return 999;
        }
    };
    Game_BattlerBase.prototype.paramRate = function (paramId) {
        return this.traitsPi(Game_BattlerBase.TRAIT_PARAM, paramId);
    };
    Game_BattlerBase.prototype.paramBuffRate = function (paramId) {
        return this._buffs[paramId] * 0.25 + 1.0;
    };
    Game_BattlerBase.prototype.param = function (paramId) {
        var value = this.paramBase(paramId) + this.paramPlus(paramId);
        value *= this.paramRate(paramId) * this.paramBuffRate(paramId);
        var maxValue = this.paramMax(paramId);
        var minValue = this.paramMin(paramId);
        // return Math.round(value.clamp(minValue, maxValue));
        return Math.round(Math.min(maxValue, Math.max(value, minValue)));
    };
    Game_BattlerBase.prototype.xparam = function (xparamId) {
        return this.traitsSum(Game_BattlerBase.TRAIT_XPARAM, xparamId);
    };
    Game_BattlerBase.prototype.sparam = function (sparamId) {
        return this.traitsPi(Game_BattlerBase.TRAIT_SPARAM, sparamId);
    };
    Game_BattlerBase.prototype.elementRate = function (elementId) {
        return this.traitsPi(Game_BattlerBase.TRAIT_ELEMENT_RATE, elementId);
    };
    Game_BattlerBase.prototype.debuffRate = function (paramId) {
        return this.traitsPi(Game_BattlerBase.TRAIT_DEBUFF_RATE, paramId);
    };
    Game_BattlerBase.prototype.stateRate = function (stateId) {
        return this.traitsPi(Game_BattlerBase.TRAIT_STATE_RATE, stateId);
    };
    Game_BattlerBase.prototype.stateResistSet = function () {
        return this.traitsSet(Game_BattlerBase.TRAIT_STATE_RESIST);
    };
    Game_BattlerBase.prototype.isStateResist = function (stateId) {
        // return this.stateResistSet().contains(stateId);
        return this.stateResistSet().indexOf(stateId) >= 0;
    };
    Game_BattlerBase.prototype.attackElements = function () {
        return this.traitsSet(Game_BattlerBase.TRAIT_ATTACK_ELEMENT);
    };
    Game_BattlerBase.prototype.attackStates = function () {
        return this.traitsSet(Game_BattlerBase.TRAIT_ATTACK_STATE);
    };
    Game_BattlerBase.prototype.attackStatesRate = function (stateId) {
        return this.traitsSum(Game_BattlerBase.TRAIT_ATTACK_STATE, stateId);
    };
    Game_BattlerBase.prototype.attackSpeed = function () {
        return this.traitsSumAll(Game_BattlerBase.TRAIT_ATTACK_SPEED);
    };
    Game_BattlerBase.prototype.attackTimesAdd = function () {
        return Math.max(this.traitsSumAll(Game_BattlerBase.TRAIT_ATTACK_TIMES), 0);
    };
    Game_BattlerBase.prototype.addedSkillTypes = function () {
        return this.traitsSet(Game_BattlerBase.TRAIT_STYPE_ADD);
    };
    Game_BattlerBase.prototype.isSkillTypeSealed = function (stypeId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_STYPE_SEAL).contains(stypeId);
        return this.traitsSet(Game_BattlerBase.TRAIT_STYPE_SEAL).indexOf(stypeId) >= 0;
    };
    Game_BattlerBase.prototype.addedSkills = function () {
        return this.traitsSet(Game_BattlerBase.TRAIT_SKILL_ADD);
    };
    Game_BattlerBase.prototype.isSkillSealed = function (skillId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_SKILL_SEAL).contains(skillId);
        return this.traitsSet(Game_BattlerBase.TRAIT_SKILL_SEAL).indexOf(skillId) >= 0;
    };
    Game_BattlerBase.prototype.isEquipWtypeOk = function (wtypeId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_WTYPE).contains(wtypeId);
        return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_WTYPE).indexOf(wtypeId) >= 0;
    };
    Game_BattlerBase.prototype.isEquipAtypeOk = function (atypeId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_ATYPE).contains(atypeId);
        return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_ATYPE).indexOf(atypeId) >= 0;
    };
    Game_BattlerBase.prototype.isEquipTypeLocked = function (etypeId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_LOCK).contains(etypeId);
        return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_LOCK).indexOf(etypeId) >= 0;
    };
    Game_BattlerBase.prototype.isEquipTypeSealed = function (etypeId) {
        // return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_SEAL).contains(etypeId);
        return this.traitsSet(Game_BattlerBase.TRAIT_EQUIP_SEAL).indexOf(etypeId) >= 0;
    };
    Game_BattlerBase.prototype.slotType = function () {
        var set = this.traitsSet(Game_BattlerBase.TRAIT_SLOT_TYPE);
        return set.length > 0 ? Math.max.apply(null, set) : 0;
    };
    Game_BattlerBase.prototype.isDualWield = function () {
        return this.slotType() === 1;
    };
    Game_BattlerBase.prototype.actionPlusSet = function () {
        return this.traits(Game_BattlerBase.TRAIT_ACTION_PLUS).map(function (trait) {
            return trait.value;
        });
    };
    Game_BattlerBase.prototype.specialFlag = function (flagId) {
        return this.traits(Game_BattlerBase.TRAIT_SPECIAL_FLAG).some(function (trait) {
            return trait.dataId === flagId;
        });
    };
    Game_BattlerBase.prototype.collapseType = function () {
        var set = this.traitsSet(Game_BattlerBase.TRAIT_COLLAPSE_TYPE);
        return set.length > 0 ? Math.max.apply(null, set) : 0;
    };
    Game_BattlerBase.prototype.partyAbility = function (abilityId) {
        return this.traits(Game_BattlerBase.TRAIT_PARTY_ABILITY).some(function (trait) {
            return trait.dataId === abilityId;
        });
    };
    Game_BattlerBase.prototype.isAutoBattle = function () {
        return this.specialFlag(Game_BattlerBase.FLAG_ID_AUTO_BATTLE);
    };
    Game_BattlerBase.prototype.isGuard = function () {
        return this.specialFlag(Game_BattlerBase.FLAG_ID_GUARD) && this.canMove();
    };
    Game_BattlerBase.prototype.isSubstitute = function () {
        return this.specialFlag(Game_BattlerBase.FLAG_ID_SUBSTITUTE) && this.canMove();
    };
    Game_BattlerBase.prototype.isPreserveTp = function () {
        return this.specialFlag(Game_BattlerBase.FLAG_ID_PRESERVE_TP);
    };
    Game_BattlerBase.prototype.addParam = function (paramId, value) {
        this._paramPlus[paramId] += value;
        this.refresh();
    };
    Game_BattlerBase.prototype.setHp = function (hp) {
        this._hp = hp;
        this.refresh();
    };
    Game_BattlerBase.prototype.setMp = function (mp) {
        this._mp = mp;
        this.refresh();
    };
    Game_BattlerBase.prototype.setTp = function (tp) {
        this._tp = tp;
        this.refresh();
    };
    Game_BattlerBase.prototype.maxTp = function () {
        return 100;
    };
    Game_BattlerBase.prototype.refresh = function () {
        var _this = this;
        this.stateResistSet().forEach(function (stateId) {
            _this.eraseState(stateId);
        });
        this._hp = /* this._hp.clamp(0, this.mhp)*/ Math.min(this.mhp, Math.max(this._hp, 0));
        this._mp = /* this._mp.clamp(0, this.mmp)*/ Math.min(this.mmp, Math.max(this._mp, 0));
        this._tp = /* this._tp.clamp(0, this.maxTp())*/ Math.min(this.maxTp(), Math.max(this._tp, 0));
    };
    Game_BattlerBase.prototype.recoverAll = function () {
        this.clearStates();
        this._hp = this.mhp;
        this._mp = this.mmp;
    };
    Game_BattlerBase.prototype.hpRate = function () {
        return this.hp / this.mhp;
    };
    Game_BattlerBase.prototype.mpRate = function () {
        return this.mmp > 0 ? this.mp / this.mmp : 0;
    };
    Game_BattlerBase.prototype.tpRate = function () {
        return this.tp / this.maxTp();
    };
    Game_BattlerBase.prototype.hide = function () {
        this._hidden = true;
    };
    Game_BattlerBase.prototype.appear = function () {
        this._hidden = false;
    };
    Game_BattlerBase.prototype.isHidden = function () {
        return this._hidden;
    };
    Game_BattlerBase.prototype.isAppeared = function () {
        return !this.isHidden();
    };
    Game_BattlerBase.prototype.isDead = function () {
        return this.isAppeared() && this.isDeathStateAffected();
    };
    Game_BattlerBase.prototype.isAlive = function () {
        return this.isAppeared() && !this.isDeathStateAffected();
    };
    Game_BattlerBase.prototype.isDying = function () {
        return this.isAlive() && this._hp < this.mhp / 4;
    };
    Game_BattlerBase.prototype.isRestricted = function () {
        return this.isAppeared() && this.restriction() > 0;
    };
    Game_BattlerBase.prototype.canInput = function () {
        return this.isAppeared() && !this.isRestricted() && !this.isAutoBattle();
    };
    Game_BattlerBase.prototype.canMove = function () {
        return this.isAppeared() && this.restriction() < 4;
    };
    Game_BattlerBase.prototype.isConfused = function () {
        return this.isAppeared() && this.restriction() >= 1 && this.restriction() <= 3;
    };
    Game_BattlerBase.prototype.confusionLevel = function () {
        return this.isConfused() ? this.restriction() : 0;
    };
    Game_BattlerBase.prototype.isActor = function () {
        return false;
    };
    Game_BattlerBase.prototype.isEnemy = function () {
        return false;
    };
    Game_BattlerBase.prototype.sortStates = function () {
        this._states.sort(function (a, b) {
            var p1 = globals_1.$dataStates[a].priority;
            var p2 = globals_1.$dataStates[b].priority;
            if (p1 !== p2) {
                return p2 - p1;
            }
            return a - b;
        });
    };
    Game_BattlerBase.prototype.restriction = function () {
        return Math.max.apply(null, this.states()
            .map(function (state) {
            return state.restriction;
        })
            .concat(0));
    };
    Game_BattlerBase.prototype.addNewState = function (stateId) {
        if (stateId === this.deathStateId()) {
            this.die();
        }
        var restricted = this.isRestricted();
        this._states.push(stateId);
        this.sortStates();
        if (!restricted && this.isRestricted()) {
            this.onRestrict();
        }
    };
    Game_BattlerBase.prototype.onRestrict = function () {
        //
    };
    Game_BattlerBase.prototype.mostImportantStateText = function () {
        var states = this.states();
        for (var i = 0; i < states.length; i++) {
            if (states[i].message3) {
                return states[i].message3;
            }
        }
        return "";
    };
    Game_BattlerBase.prototype.stateMotionIndex = function () {
        var states = this.states();
        if (states.length > 0) {
            return states[0].motion;
        }
        else {
            return 0;
        }
    };
    Game_BattlerBase.prototype.stateOverlayIndex = function () {
        var states = this.states();
        if (states.length > 0) {
            return states[0].overlay;
        }
        else {
            return 0;
        }
    };
    Game_BattlerBase.prototype.isSkillWtypeOk = function (_skill) {
        return true;
    };
    Game_BattlerBase.prototype.skillMpCost = function (skill) {
        return Math.floor(skill.mpCost * this.mcr);
    };
    Game_BattlerBase.prototype.skillTpCost = function (skill) {
        return skill.tpCost;
    };
    Game_BattlerBase.prototype.canPaySkillCost = function (skill) {
        return this._tp >= this.skillTpCost(skill) && this._mp >= this.skillMpCost(skill);
    };
    Game_BattlerBase.prototype.paySkillCost = function (skill) {
        this._mp -= this.skillMpCost(skill);
        this._tp -= this.skillTpCost(skill);
    };
    Game_BattlerBase.prototype.isOccasionOk = function (item) {
        if (globals_1.$gameParty.inBattle()) {
            return item.occasion === 0 || item.occasion === 1;
        }
        else {
            return item.occasion === 0 || item.occasion === 2;
        }
    };
    Game_BattlerBase.prototype.meetsUsableItemConditions = function (item) {
        return this.canMove() && this.isOccasionOk(item);
    };
    Game_BattlerBase.prototype.meetsSkillConditions = function (skill) {
        return (this.meetsUsableItemConditions(skill) &&
            this.isSkillWtypeOk(skill) &&
            this.canPaySkillCost(skill) &&
            !this.isSkillSealed(skill.id) &&
            !this.isSkillTypeSealed(skill.stypeId));
    };
    Game_BattlerBase.prototype.meetsItemConditions = function (item) {
        return this.meetsUsableItemConditions(item) && globals_1.$gameParty.hasItem(item);
    };
    Game_BattlerBase.prototype.canUse = function (item) {
        if (!item) {
            return false;
        }
        else if (DataManager_1.DataManager.isSkill(item)) {
            return this.meetsSkillConditions(item);
        }
        else if (DataManager_1.DataManager.isItem(item)) {
            return this.meetsItemConditions(item);
        }
        else {
            return false;
        }
    };
    Game_BattlerBase.prototype.canEquip = function (item) {
        if (!item) {
            return false;
        }
        else if (DataManager_1.DataManager.isWeapon(item)) {
            return this.canEquipWeapon(item);
        }
        else if (DataManager_1.DataManager.isArmor(item)) {
            return this.canEquipArmor(item);
        }
        else {
            return false;
        }
    };
    Game_BattlerBase.prototype.canEquipWeapon = function (item) {
        return this.isEquipWtypeOk(item.wtypeId) && !this.isEquipTypeSealed(item.etypeId);
    };
    Game_BattlerBase.prototype.canEquipArmor = function (item) {
        return this.isEquipAtypeOk(item.atypeId) && !this.isEquipTypeSealed(item.etypeId);
    };
    Game_BattlerBase.prototype.attackSkillId = function () {
        return 1;
    };
    Game_BattlerBase.prototype.guardSkillId = function () {
        return 2;
    };
    Game_BattlerBase.prototype.canAttack = function () {
        return this.canUse(globals_1.$dataSkills[this.attackSkillId()]);
    };
    Game_BattlerBase.prototype.canGuard = function () {
        return this.canUse(globals_1.$dataSkills[this.guardSkillId()]);
    };
    Game_BattlerBase.TRAIT_ELEMENT_RATE = 11;
    Game_BattlerBase.TRAIT_DEBUFF_RATE = 12;
    Game_BattlerBase.TRAIT_STATE_RATE = 13;
    Game_BattlerBase.TRAIT_STATE_RESIST = 14;
    Game_BattlerBase.TRAIT_PARAM = 21;
    Game_BattlerBase.TRAIT_XPARAM = 22;
    Game_BattlerBase.TRAIT_SPARAM = 23;
    Game_BattlerBase.TRAIT_ATTACK_ELEMENT = 31;
    Game_BattlerBase.TRAIT_ATTACK_STATE = 32;
    Game_BattlerBase.TRAIT_ATTACK_SPEED = 33;
    Game_BattlerBase.TRAIT_ATTACK_TIMES = 34;
    Game_BattlerBase.TRAIT_STYPE_ADD = 41;
    Game_BattlerBase.TRAIT_STYPE_SEAL = 42;
    Game_BattlerBase.TRAIT_SKILL_ADD = 43;
    Game_BattlerBase.TRAIT_SKILL_SEAL = 44;
    Game_BattlerBase.TRAIT_EQUIP_WTYPE = 51;
    Game_BattlerBase.TRAIT_EQUIP_ATYPE = 52;
    Game_BattlerBase.TRAIT_EQUIP_LOCK = 53;
    Game_BattlerBase.TRAIT_EQUIP_SEAL = 54;
    Game_BattlerBase.TRAIT_SLOT_TYPE = 55;
    Game_BattlerBase.TRAIT_ACTION_PLUS = 61;
    Game_BattlerBase.TRAIT_SPECIAL_FLAG = 62;
    Game_BattlerBase.TRAIT_COLLAPSE_TYPE = 63;
    Game_BattlerBase.TRAIT_PARTY_ABILITY = 64;
    Game_BattlerBase.FLAG_ID_AUTO_BATTLE = 0;
    Game_BattlerBase.FLAG_ID_GUARD = 1;
    Game_BattlerBase.FLAG_ID_SUBSTITUTE = 2;
    Game_BattlerBase.FLAG_ID_PRESERVE_TP = 3;
    Game_BattlerBase.ICON_BUFF_START = 32;
    Game_BattlerBase.ICON_DEBUFF_START = 48;
    return Game_BattlerBase;
}());
exports.Game_BattlerBase = Game_BattlerBase;

},{"../managers/DataManager":36,"../managers/globals":43}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Character = void 0;
var Graphics_1 = require("../core/Graphics");
var JsonEx_1 = require("../core/JsonEx");
var Tilemap_1 = require("../core/Tilemap");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var BattleManager_1 = require("../managers/BattleManager");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var GameCharacterBase_1 = require("./GameCharacterBase");
// これらの変数(GameObject)はツクールのスクリプトで利用される可能性があるため、exportせずクラスの外で変数定義
/* eslint-disable @typescript-eslint/no-unused-vars */
var $gameVariables;
var $gameSystem;
var $gameSwitches;
var $gameMessage;
var $gamePlayer;
var $dataCommonEvents;
var $dataTilesets;
var $gameMap;
var $gameTemp;
var $dataEnemies;
var $gameActors;
var $dataAnimations;
var $gameParty;
var $gameTroop;
var $gameTimer;
var $gameSelfSwitches;
var $dataClasses;
var $dataWeapons;
var $dataArmors;
var $dataItems;
var $gameScreen;
var $dataTroops;
var $dataActors;
var $dataSkills;
var $dataStates;
var $dataSystem;
var $dataMapInfos;
var $dataMap;
// これらの変数はツクールのスクリプトでグローバルなクラス名として利用される想定なので、変数の命名規則からは例外的に外すものとする
/* eslint-disable  @typescript-eslint/naming-convention */
var Graphics;
var JsonEx;
var Tilemap;
var TouchInput;
var Utils;
var AudioManager;
var BattleManager;
var DataManager;
var ImageManager;
var SceneManager;
var SoundManager;
var TextManager;
/* eslint-enable @typescript-eslint/naming-convention */
/* eslint-enable @typescript-eslint/no-unused-vars */
// 未定義の全GameObjectに値を代入
function setGameObjects() {
    $gameVariables = globals_1.$gameVariables;
    $gameSystem = globals_1.$gameSystem;
    $gameSwitches = globals_1.$gameSwitches;
    $gameMessage = globals_1.$gameMessage;
    $gamePlayer = globals_1.$gamePlayer;
    $dataCommonEvents = globals_1.$dataCommonEvents;
    $dataTilesets = globals_1.$dataTilesets;
    $gameMap = globals_1.$gameMap;
    $gameTemp = globals_1.$gameTemp;
    $dataEnemies = globals_1.$dataEnemies;
    $gameActors = globals_1.$gameActors;
    $dataAnimations = globals_1.$dataAnimations;
    $gameParty = globals_1.$gameParty;
    $gameTroop = globals_1.$gameTroop;
    $gameTimer = globals_1.$gameTimer;
    $gameSelfSwitches = globals_1.$gameSelfSwitches;
    $dataClasses = globals_1.$dataClasses;
    $dataWeapons = globals_1.$dataWeapons;
    $dataArmors = globals_1.$dataArmors;
    $dataItems = globals_1.$dataItems;
    $gameScreen = globals_1.$gameScreen;
    $dataTroops = globals_1.$dataTroops;
    $dataActors = globals_1.$dataActors;
    $dataSkills = globals_1.$dataSkills;
    $dataStates = globals_1.$dataStates;
    $dataSystem = globals_1.$dataSystem;
    $dataMapInfos = globals_1.$dataMapInfos;
    $dataMap = globals_1.$dataMap;
    Graphics = Graphics_1.Graphics;
    JsonEx = JsonEx_1.JsonEx;
    Tilemap = Tilemap_1.Tilemap;
    TouchInput = TouchInput_1.TouchInput;
    Utils = Utils_1.Utils;
    AudioManager = AudioManager_1.AudioManager;
    BattleManager = BattleManager_1.BattleManager;
    DataManager = DataManager_1.DataManager;
    ImageManager = ImageManager_1.ImageManager;
    SceneManager = SceneManager_1.SceneManager;
    SoundManager = SoundManager_1.SoundManager;
    TextManager = TextManager_1.TextManager;
}
// スクリプト(eval)で利用するグローバル変数の初期化を可能にする
if (!DataManager_1.DataManager._onReset.contains(setGameObjects)) {
    DataManager_1.DataManager._onReset.add(setGameObjects);
}
function randomInt(max) {
    return Math.floor(max * g.game.vars.random.generate());
}
var Game_Character = /** @class */ (function (_super) {
    __extends(Game_Character, _super);
    function Game_Character() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Character.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Game_Character.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        _super.prototype.initialize.call(this);
    };
    Game_Character.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._moveRouteForcing = false;
        this._moveRoute = null;
        this._moveRouteIndex = 0;
        this._originalMoveRoute = null;
        this._originalMoveRouteIndex = 0;
        this._waitCount = 0;
    };
    Game_Character.prototype.memorizeMoveRoute = function () {
        this._originalMoveRoute = this._moveRoute;
        this._originalMoveRouteIndex = this._moveRouteIndex;
    };
    Game_Character.prototype.restoreMoveRoute = function () {
        this._moveRoute = this._originalMoveRoute;
        this._moveRouteIndex = this._originalMoveRouteIndex;
        this._originalMoveRoute = null;
    };
    Game_Character.prototype.isMoveRouteForcing = function () {
        return this._moveRouteForcing;
    };
    Game_Character.prototype.setMoveRoute = function (moveRoute) {
        this._moveRoute = moveRoute;
        this._moveRouteIndex = 0;
        this._moveRouteForcing = false;
    };
    Game_Character.prototype.forceMoveRoute = function (moveRoute) {
        if (!this._originalMoveRoute) {
            this.memorizeMoveRoute();
        }
        this._moveRoute = moveRoute;
        this._moveRouteIndex = 0;
        this._moveRouteForcing = true;
        this._waitCount = 0;
    };
    Game_Character.prototype.updateStop = function () {
        _super.prototype.updateStop.call(this);
        if (this._moveRouteForcing) {
            this.updateRoutineMove();
        }
    };
    Game_Character.prototype.updateRoutineMove = function () {
        if (this._waitCount > 0) {
            this._waitCount--;
        }
        else {
            this.setMovementSuccess(true);
            var command = this._moveRoute.list[this._moveRouteIndex];
            if (command) {
                this.processMoveCommand(command);
                this.advanceMoveRouteIndex();
            }
        }
    };
    Game_Character.prototype.processMoveCommand = function (command) {
        var gc = Game_Character;
        var params = command.parameters;
        switch (command.code) {
            case gc.ROUTE_END:
                this.processRouteEnd();
                break;
            case gc.ROUTE_MOVE_DOWN:
                this.moveStraight(2);
                break;
            case gc.ROUTE_MOVE_LEFT:
                this.moveStraight(4);
                break;
            case gc.ROUTE_MOVE_RIGHT:
                this.moveStraight(6);
                break;
            case gc.ROUTE_MOVE_UP:
                this.moveStraight(8);
                break;
            case gc.ROUTE_MOVE_LOWER_L:
                this.moveDiagonally(4, 2);
                break;
            case gc.ROUTE_MOVE_LOWER_R:
                this.moveDiagonally(6, 2);
                break;
            case gc.ROUTE_MOVE_UPPER_L:
                this.moveDiagonally(4, 8);
                break;
            case gc.ROUTE_MOVE_UPPER_R:
                this.moveDiagonally(6, 8);
                break;
            case gc.ROUTE_MOVE_RANDOM:
                this.moveRandom();
                break;
            case gc.ROUTE_MOVE_TOWARD:
                this.moveTowardPlayer();
                break;
            case gc.ROUTE_MOVE_AWAY:
                this.moveAwayFromPlayer();
                break;
            case gc.ROUTE_MOVE_FORWARD:
                this.moveForward();
                break;
            case gc.ROUTE_MOVE_BACKWARD:
                this.moveBackward();
                break;
            case gc.ROUTE_JUMP:
                this.jump(params[0], params[1]);
                break;
            case gc.ROUTE_WAIT:
                this._waitCount = params[0] - 1;
                break;
            case gc.ROUTE_TURN_DOWN:
                this.setDirection(2);
                break;
            case gc.ROUTE_TURN_LEFT:
                this.setDirection(4);
                break;
            case gc.ROUTE_TURN_RIGHT:
                this.setDirection(6);
                break;
            case gc.ROUTE_TURN_UP:
                this.setDirection(8);
                break;
            case gc.ROUTE_TURN_90D_R:
                this.turnRight90();
                break;
            case gc.ROUTE_TURN_90D_L:
                this.turnLeft90();
                break;
            case gc.ROUTE_TURN_180D:
                this.turn180();
                break;
            case gc.ROUTE_TURN_90D_R_L:
                this.turnRightOrLeft90();
                break;
            case gc.ROUTE_TURN_RANDOM:
                this.turnRandom();
                break;
            case gc.ROUTE_TURN_TOWARD:
                this.turnTowardPlayer();
                break;
            case gc.ROUTE_TURN_AWAY:
                this.turnAwayFromPlayer();
                break;
            case gc.ROUTE_SWITCH_ON:
                globals_1.$gameSwitches.setValue(params[0], true);
                break;
            case gc.ROUTE_SWITCH_OFF:
                globals_1.$gameSwitches.setValue(params[0], false);
                break;
            case gc.ROUTE_CHANGE_SPEED:
                this.setMoveSpeed(params[0]);
                break;
            case gc.ROUTE_CHANGE_FREQ:
                this.setMoveFrequency(params[0]);
                break;
            case gc.ROUTE_WALK_ANIME_ON:
                this.setWalkAnime(true);
                break;
            case gc.ROUTE_WALK_ANIME_OFF:
                this.setWalkAnime(false);
                break;
            case gc.ROUTE_STEP_ANIME_ON:
                this.setStepAnime(true);
                break;
            case gc.ROUTE_STEP_ANIME_OFF:
                this.setStepAnime(false);
                break;
            case gc.ROUTE_DIR_FIX_ON:
                this.setDirectionFix(true);
                break;
            case gc.ROUTE_DIR_FIX_OFF:
                this.setDirectionFix(false);
                break;
            case gc.ROUTE_THROUGH_ON:
                this.setThrough(true);
                break;
            case gc.ROUTE_THROUGH_OFF:
                this.setThrough(false);
                break;
            case gc.ROUTE_TRANSPARENT_ON:
                this.setTransparent(true);
                break;
            case gc.ROUTE_TRANSPARENT_OFF:
                this.setTransparent(false);
                break;
            case gc.ROUTE_CHANGE_IMAGE:
                this.setImage(params[0], params[1]);
                break;
            case gc.ROUTE_CHANGE_OPACITY:
                this.setOpacity(params[0]);
                break;
            case gc.ROUTE_CHANGE_BLEND_MODE:
                this.setBlendMode(params[0]);
                break;
            case gc.ROUTE_PLAY_SE:
                AudioManager_1.AudioManager.playSe(params[0]);
                break;
            case gc.ROUTE_SCRIPT:
                // eslint-disable-next-line no-eval
                eval(params[0]); // TODO: evalしている!!
                break;
        }
    };
    Game_Character.prototype.deltaXFrom = function (x) {
        return globals_1.$gameMap.deltaX(this.x, x);
    };
    Game_Character.prototype.deltaYFrom = function (y) {
        return globals_1.$gameMap.deltaY(this.y, y);
    };
    Game_Character.prototype.moveRandom = function () {
        var d = 2 + randomInt(4) * 2;
        if (this.canPass(this.x, this.y, d)) {
            this.moveStraight(d);
        }
    };
    Game_Character.prototype.moveTowardCharacter = function (character) {
        var sx = this.deltaXFrom(character.x);
        var sy = this.deltaYFrom(character.y);
        if (Math.abs(sx) > Math.abs(sy)) {
            this.moveStraight(sx > 0 ? 4 : 6);
            if (!this.isMovementSucceeded() && sy !== 0) {
                this.moveStraight(sy > 0 ? 8 : 2);
            }
        }
        else if (sy !== 0) {
            this.moveStraight(sy > 0 ? 8 : 2);
            if (!this.isMovementSucceeded() && sx !== 0) {
                this.moveStraight(sx > 0 ? 4 : 6);
            }
        }
    };
    Game_Character.prototype.moveAwayFromCharacter = function (character) {
        var sx = this.deltaXFrom(character.x);
        var sy = this.deltaYFrom(character.y);
        if (Math.abs(sx) > Math.abs(sy)) {
            this.moveStraight(sx > 0 ? 6 : 4);
            if (!this.isMovementSucceeded() && sy !== 0) {
                this.moveStraight(sy > 0 ? 2 : 8);
            }
        }
        else if (sy !== 0) {
            this.moveStraight(sy > 0 ? 2 : 8);
            if (!this.isMovementSucceeded() && sx !== 0) {
                this.moveStraight(sx > 0 ? 6 : 4);
            }
        }
    };
    Game_Character.prototype.turnTowardCharacter = function (character) {
        var sx = this.deltaXFrom(character.x);
        var sy = this.deltaYFrom(character.y);
        if (Math.abs(sx) > Math.abs(sy)) {
            this.setDirection(sx > 0 ? 4 : 6);
        }
        else if (sy !== 0) {
            this.setDirection(sy > 0 ? 8 : 2);
        }
    };
    Game_Character.prototype.turnAwayFromCharacter = function (character) {
        var sx = this.deltaXFrom(character.x);
        var sy = this.deltaYFrom(character.y);
        if (Math.abs(sx) > Math.abs(sy)) {
            this.setDirection(sx > 0 ? 6 : 4);
        }
        else if (sy !== 0) {
            this.setDirection(sy > 0 ? 2 : 8);
        }
    };
    Game_Character.prototype.turnTowardPlayer = function () {
        this.turnTowardCharacter(globals_1.$gamePlayer);
    };
    Game_Character.prototype.turnAwayFromPlayer = function () {
        this.turnAwayFromCharacter(globals_1.$gamePlayer);
    };
    Game_Character.prototype.moveTowardPlayer = function () {
        this.moveTowardCharacter(globals_1.$gamePlayer);
    };
    Game_Character.prototype.moveAwayFromPlayer = function () {
        this.moveAwayFromCharacter(globals_1.$gamePlayer);
    };
    Game_Character.prototype.moveForward = function () {
        this.moveStraight(this.direction());
    };
    Game_Character.prototype.moveBackward = function () {
        var lastDirectionFix = this.isDirectionFixed();
        this.setDirectionFix(true);
        this.moveStraight(this.reverseDir(this.direction()));
        this.setDirectionFix(lastDirectionFix);
    };
    Game_Character.prototype.processRouteEnd = function () {
        if (this._moveRoute.repeat) {
            this._moveRouteIndex = -1;
        }
        else if (this._moveRouteForcing) {
            this._moveRouteForcing = false;
            this.restoreMoveRoute();
        }
    };
    Game_Character.prototype.advanceMoveRouteIndex = function () {
        var moveRoute = this._moveRoute;
        if (moveRoute && (this.isMovementSucceeded() || moveRoute.skippable)) {
            var numCommands = moveRoute.list.length - 1;
            this._moveRouteIndex++;
            if (moveRoute.repeat && this._moveRouteIndex >= numCommands) {
                this._moveRouteIndex = 0;
            }
        }
    };
    Game_Character.prototype.turnRight90 = function () {
        switch (this.direction()) {
            case 2:
                this.setDirection(4);
                break;
            case 4:
                this.setDirection(8);
                break;
            case 6:
                this.setDirection(2);
                break;
            case 8:
                this.setDirection(6);
                break;
        }
    };
    Game_Character.prototype.turnLeft90 = function () {
        switch (this.direction()) {
            case 2:
                this.setDirection(6);
                break;
            case 4:
                this.setDirection(2);
                break;
            case 6:
                this.setDirection(8);
                break;
            case 8:
                this.setDirection(4);
                break;
        }
    };
    Game_Character.prototype.turn180 = function () {
        this.setDirection(this.reverseDir(this.direction()));
    };
    Game_Character.prototype.turnRightOrLeft90 = function () {
        switch (randomInt(2)) {
            case 0:
                this.turnRight90();
                break;
            case 1:
                this.turnLeft90();
                break;
        }
    };
    Game_Character.prototype.turnRandom = function () {
        this.setDirection(2 + randomInt(4) * 2);
    };
    Game_Character.prototype.swap = function (character) {
        var newX = character.x;
        var newY = character.y;
        character.locate(this.x, this.y);
        this.locate(newX, newY);
    };
    Game_Character.prototype.findDirectionTo = function (goalX, goalY) {
        var searchLimit = this.searchLimit();
        var mapWidth = globals_1.$gameMap.width();
        var nodeList = [];
        var openList = [];
        var closedList = [];
        var start = {};
        var best = start;
        if (this.x === goalX && this.y === goalY) {
            return 0;
        }
        start.parent = null;
        start.x = this.x;
        start.y = this.y;
        start.g = 0;
        start.f = globals_1.$gameMap.distance(start.x, start.y, goalX, goalY);
        nodeList.push(start);
        openList.push(start.y * mapWidth + start.x);
        while (nodeList.length > 0) {
            var bestIndex = 0;
            for (var i = 0; i < nodeList.length; i++) {
                if (nodeList[i].f < nodeList[bestIndex].f) {
                    bestIndex = i;
                }
            }
            var current = nodeList[bestIndex];
            var x1 = current.x;
            var y1 = current.y;
            var pos1 = y1 * mapWidth + x1;
            var g1 = current.g;
            nodeList.splice(bestIndex, 1);
            openList.splice(openList.indexOf(pos1), 1);
            closedList.push(pos1);
            if (current.x === goalX && current.y === goalY) {
                best = current;
                break;
            }
            if (g1 >= searchLimit) {
                continue;
            }
            for (var j = 0; j < 4; j++) {
                var direction = 2 + j * 2;
                var x2 = globals_1.$gameMap.roundXWithDirection(x1, direction);
                var y2 = globals_1.$gameMap.roundYWithDirection(y1, direction);
                var pos2 = y2 * mapWidth + x2;
                if (Utils_1.Utils.contains(closedList, pos2)) {
                    continue;
                }
                if (!this.canPass(x1, y1, direction)) {
                    continue;
                }
                var g2 = g1 + 1;
                var index2 = openList.indexOf(pos2);
                if (index2 < 0 || g2 < nodeList[index2].g) {
                    var neighbor = void 0;
                    if (index2 >= 0) {
                        neighbor = nodeList[index2];
                    }
                    else {
                        neighbor = {};
                        nodeList.push(neighbor);
                        openList.push(pos2);
                    }
                    neighbor.parent = current;
                    neighbor.x = x2;
                    neighbor.y = y2;
                    neighbor.g = g2;
                    neighbor.f = g2 + globals_1.$gameMap.distance(x2, y2, goalX, goalY);
                    if (!best || neighbor.f - neighbor.g < best.f - best.g) {
                        best = neighbor;
                    }
                }
            }
        }
        var node = best;
        while (node.parent && node.parent !== start) {
            node = node.parent;
        }
        var deltaX1 = globals_1.$gameMap.deltaX(node.x, start.x);
        var deltaY1 = globals_1.$gameMap.deltaY(node.y, start.y);
        if (deltaY1 > 0) {
            return 2;
        }
        else if (deltaX1 < 0) {
            return 4;
        }
        else if (deltaX1 > 0) {
            return 6;
        }
        else if (deltaY1 < 0) {
            return 8;
        }
        var deltaX2 = this.deltaXFrom(goalX);
        var deltaY2 = this.deltaYFrom(goalY);
        if (Math.abs(deltaX2) > Math.abs(deltaY2)) {
            return deltaX2 > 0 ? 4 : 6;
        }
        else if (deltaY2 !== 0) {
            return deltaY2 > 0 ? 8 : 2;
        }
        return 0;
    };
    Game_Character.prototype.searchLimit = function () {
        return 12;
    };
    Game_Character.ROUTE_END = 0;
    Game_Character.ROUTE_MOVE_DOWN = 1;
    Game_Character.ROUTE_MOVE_LEFT = 2;
    Game_Character.ROUTE_MOVE_RIGHT = 3;
    Game_Character.ROUTE_MOVE_UP = 4;
    Game_Character.ROUTE_MOVE_LOWER_L = 5;
    Game_Character.ROUTE_MOVE_LOWER_R = 6;
    Game_Character.ROUTE_MOVE_UPPER_L = 7;
    Game_Character.ROUTE_MOVE_UPPER_R = 8;
    Game_Character.ROUTE_MOVE_RANDOM = 9;
    Game_Character.ROUTE_MOVE_TOWARD = 10;
    Game_Character.ROUTE_MOVE_AWAY = 11;
    Game_Character.ROUTE_MOVE_FORWARD = 12;
    Game_Character.ROUTE_MOVE_BACKWARD = 13;
    Game_Character.ROUTE_JUMP = 14;
    Game_Character.ROUTE_WAIT = 15;
    Game_Character.ROUTE_TURN_DOWN = 16;
    Game_Character.ROUTE_TURN_LEFT = 17;
    Game_Character.ROUTE_TURN_RIGHT = 18;
    Game_Character.ROUTE_TURN_UP = 19;
    Game_Character.ROUTE_TURN_90D_R = 20;
    Game_Character.ROUTE_TURN_90D_L = 21;
    Game_Character.ROUTE_TURN_180D = 22;
    Game_Character.ROUTE_TURN_90D_R_L = 23;
    Game_Character.ROUTE_TURN_RANDOM = 24;
    Game_Character.ROUTE_TURN_TOWARD = 25;
    Game_Character.ROUTE_TURN_AWAY = 26;
    Game_Character.ROUTE_SWITCH_ON = 27;
    Game_Character.ROUTE_SWITCH_OFF = 28;
    Game_Character.ROUTE_CHANGE_SPEED = 29;
    Game_Character.ROUTE_CHANGE_FREQ = 30;
    Game_Character.ROUTE_WALK_ANIME_ON = 31;
    Game_Character.ROUTE_WALK_ANIME_OFF = 32;
    Game_Character.ROUTE_STEP_ANIME_ON = 33;
    Game_Character.ROUTE_STEP_ANIME_OFF = 34;
    Game_Character.ROUTE_DIR_FIX_ON = 35;
    Game_Character.ROUTE_DIR_FIX_OFF = 36;
    Game_Character.ROUTE_THROUGH_ON = 37;
    Game_Character.ROUTE_THROUGH_OFF = 38;
    Game_Character.ROUTE_TRANSPARENT_ON = 39;
    Game_Character.ROUTE_TRANSPARENT_OFF = 40;
    Game_Character.ROUTE_CHANGE_IMAGE = 41;
    Game_Character.ROUTE_CHANGE_OPACITY = 42;
    Game_Character.ROUTE_CHANGE_BLEND_MODE = 43;
    Game_Character.ROUTE_PLAY_SE = 44;
    Game_Character.ROUTE_SCRIPT = 45;
    return Game_Character;
}(GameCharacterBase_1.Game_CharacterBase));
exports.Game_Character = Game_Character;

},{"../core/Graphics":14,"../core/JsonEx":17,"../core/Tilemap":23,"../core/TouchInput":27,"../core/Utils":28,"../managers/AudioManager":33,"../managers/BattleManager":34,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./GameCharacterBase":51}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_CharacterBase = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var Game_CharacterBase = /** @class */ (function () {
    function Game_CharacterBase() {
        if (Object.getPrototypeOf(this) === Game_CharacterBase.prototype) {
            this.initialize();
        }
    }
    Object.defineProperty(Game_CharacterBase.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game_CharacterBase.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: false,
        configurable: true
    });
    Game_CharacterBase.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this.initMembers();
    };
    Game_CharacterBase.prototype.initMembers = function () {
        this._x = 0;
        this._y = 0;
        this._realX = 0;
        this._realY = 0;
        this._moveSpeed = 4;
        this._moveFrequency = 6;
        this._opacity = 255;
        this._blendMode = 0;
        this._direction = 2;
        this._pattern = 1;
        this._priorityType = 1;
        this._tileId = 0;
        this._characterName = "";
        this._characterIndex = 0;
        this._isObjectCharacter = false;
        this._walkAnime = true;
        this._stepAnime = false;
        this._directionFix = false;
        this._through = false;
        this._transparent = false;
        this._bushDepth = 0;
        this._animationId = 0;
        this._balloonId = 0;
        this._animationPlaying = false;
        this._balloonPlaying = false;
        this._animationCount = 0;
        this._stopCount = 0;
        this._jumpCount = 0;
        this._jumpPeak = 0;
        this._movementSuccess = true;
    };
    Game_CharacterBase.prototype.pos = function (x, y) {
        return this._x === x && this._y === y;
    };
    Game_CharacterBase.prototype.posNt = function (x, y) {
        // No through
        return this.pos(x, y) && !this.isThrough();
    };
    Game_CharacterBase.prototype.moveSpeed = function () {
        return this._moveSpeed;
    };
    Game_CharacterBase.prototype.setMoveSpeed = function (moveSpeed) {
        this._moveSpeed = moveSpeed;
    };
    Game_CharacterBase.prototype.moveFrequency = function () {
        return this._moveFrequency;
    };
    Game_CharacterBase.prototype.setMoveFrequency = function (moveFrequency) {
        this._moveFrequency = moveFrequency;
    };
    Game_CharacterBase.prototype.opacity = function () {
        return this._opacity;
    };
    Game_CharacterBase.prototype.setOpacity = function (opacity) {
        this._opacity = opacity;
    };
    Game_CharacterBase.prototype.blendMode = function () {
        return this._blendMode;
    };
    Game_CharacterBase.prototype.setBlendMode = function (blendMode) {
        this._blendMode = blendMode;
    };
    Game_CharacterBase.prototype.isNormalPriority = function () {
        return this._priorityType === 1;
    };
    Game_CharacterBase.prototype.setPriorityType = function (priorityType) {
        this._priorityType = priorityType;
    };
    Game_CharacterBase.prototype.isMoving = function () {
        return this._realX !== this._x || this._realY !== this._y;
    };
    Game_CharacterBase.prototype.isJumping = function () {
        return this._jumpCount > 0;
    };
    Game_CharacterBase.prototype.jumpHeight = function () {
        return (this._jumpPeak * this._jumpPeak - Math.pow(Math.abs(this._jumpCount - this._jumpPeak), 2)) / 2;
    };
    Game_CharacterBase.prototype.isStopping = function () {
        return !this.isMoving() && !this.isJumping();
    };
    Game_CharacterBase.prototype.checkStop = function (threshold) {
        return this._stopCount > threshold;
    };
    Game_CharacterBase.prototype.resetStopCount = function () {
        this._stopCount = 0;
    };
    Game_CharacterBase.prototype.realMoveSpeed = function () {
        return this._moveSpeed + (this.isDashing() ? 1 : 0);
    };
    Game_CharacterBase.prototype.distancePerFrame = function () {
        return Math.pow(2, this.realMoveSpeed()) / 256;
    };
    Game_CharacterBase.prototype.isDashing = function () {
        return false;
    };
    Game_CharacterBase.prototype.isDebugThrough = function () {
        return false;
    };
    Game_CharacterBase.prototype.straighten = function () {
        if (this.hasWalkAnime() || this.hasStepAnime()) {
            this._pattern = 1;
        }
        this._animationCount = 0;
    };
    Game_CharacterBase.prototype.reverseDir = function (d) {
        return 10 - d;
    };
    Game_CharacterBase.prototype.canPass = function (x, y, d) {
        var x2 = globals_1.$gameMap.roundXWithDirection(x, d);
        var y2 = globals_1.$gameMap.roundYWithDirection(y, d);
        if (!globals_1.$gameMap.isValid(x2, y2)) {
            return false;
        }
        if (this.isThrough() || this.isDebugThrough()) {
            return true;
        }
        if (!this.isMapPassable(x, y, d)) {
            return false;
        }
        if (this.isCollidedWithCharacters(x2, y2)) {
            return false;
        }
        return true;
    };
    Game_CharacterBase.prototype.canPassDiagonally = function (x, y, horz, vert) {
        var x2 = globals_1.$gameMap.roundXWithDirection(x, horz);
        var y2 = globals_1.$gameMap.roundYWithDirection(y, vert);
        if (this.canPass(x, y, vert) && this.canPass(x, y2, horz)) {
            return true;
        }
        if (this.canPass(x, y, horz) && this.canPass(x2, y, vert)) {
            return true;
        }
        return false;
    };
    Game_CharacterBase.prototype.isMapPassable = function (x, y, d) {
        var x2 = globals_1.$gameMap.roundXWithDirection(x, d);
        var y2 = globals_1.$gameMap.roundYWithDirection(y, d);
        var d2 = this.reverseDir(d);
        return globals_1.$gameMap.isPassable(x, y, d) && globals_1.$gameMap.isPassable(x2, y2, d2);
    };
    Game_CharacterBase.prototype.isCollidedWithCharacters = function (x, y) {
        return this.isCollidedWithEvents(x, y) || this.isCollidedWithVehicles(x, y);
    };
    Game_CharacterBase.prototype.isCollidedWithEvents = function (x, y) {
        var events = globals_1.$gameMap.eventsXyNt(x, y);
        return events.some(function (event) {
            return event.isNormalPriority();
        });
    };
    Game_CharacterBase.prototype.isCollidedWithVehicles = function (x, y) {
        return globals_1.$gameMap.boat().posNt(x, y) || globals_1.$gameMap.ship().posNt(x, y);
    };
    Game_CharacterBase.prototype.setPosition = function (x, y) {
        this._x = Math.round(x);
        this._y = Math.round(y);
        this._realX = x;
        this._realY = y;
    };
    Game_CharacterBase.prototype.copyPosition = function (character) {
        this._x = character._x;
        this._y = character._y;
        this._realX = character._realX;
        this._realY = character._realY;
        this._direction = character._direction;
    };
    Game_CharacterBase.prototype.locate = function (x, y) {
        this.setPosition(x, y);
        this.straighten();
        this.refreshBushDepth();
    };
    Game_CharacterBase.prototype.direction = function () {
        return this._direction;
    };
    Game_CharacterBase.prototype.setDirection = function (d) {
        if (!this.isDirectionFixed() && d) {
            this._direction = d;
        }
        this.resetStopCount();
    };
    Game_CharacterBase.prototype.isTile = function () {
        return this._tileId > 0 && this._priorityType === 0;
    };
    Game_CharacterBase.prototype.isObjectCharacter = function () {
        return this._isObjectCharacter;
    };
    Game_CharacterBase.prototype.shiftY = function () {
        return this.isObjectCharacter() ? 0 : 6;
    };
    Game_CharacterBase.prototype.scrolledX = function () {
        return globals_1.$gameMap.adjustX(this._realX);
    };
    Game_CharacterBase.prototype.scrolledY = function () {
        return globals_1.$gameMap.adjustY(this._realY);
    };
    Game_CharacterBase.prototype.screenX = function () {
        var tw = globals_1.$gameMap.tileWidth();
        return Math.round(this.scrolledX() * tw + tw / 2);
    };
    Game_CharacterBase.prototype.screenY = function () {
        var th = globals_1.$gameMap.tileHeight();
        return Math.round(this.scrolledY() * th + th - this.shiftY() - this.jumpHeight());
    };
    Game_CharacterBase.prototype.screenZ = function () {
        return this._priorityType * 2 + 1;
    };
    Game_CharacterBase.prototype.isNearTheScreen = function () {
        var gw = Graphics_1.Graphics.width;
        var gh = Graphics_1.Graphics.height;
        var tw = globals_1.$gameMap.tileWidth();
        var th = globals_1.$gameMap.tileHeight();
        var px = this.scrolledX() * tw + tw / 2 - gw / 2;
        var py = this.scrolledY() * th + th / 2 - gh / 2;
        return px >= -gw && px <= gw && py >= -gh && py <= gh;
    };
    Game_CharacterBase.prototype.update = function (_sceneActive) {
        // 派生クラス Game_Player でオーバーライドする update は引数があるのでこのように
        if (this.isStopping()) {
            this.updateStop();
        }
        if (this.isJumping()) {
            this.updateJump();
        }
        else if (this.isMoving()) {
            this.updateMove();
        }
        this.updateAnimation();
    };
    Game_CharacterBase.prototype.updateStop = function () {
        this._stopCount++;
    };
    Game_CharacterBase.prototype.updateJump = function () {
        this._jumpCount--;
        this._realX = (this._realX * this._jumpCount + this._x) / (this._jumpCount + 1.0);
        this._realY = (this._realY * this._jumpCount + this._y) / (this._jumpCount + 1.0);
        this.refreshBushDepth();
        if (this._jumpCount === 0) {
            this._realX = this._x = globals_1.$gameMap.roundX(this._x);
            this._realY = this._y = globals_1.$gameMap.roundY(this._y);
        }
    };
    Game_CharacterBase.prototype.updateMove = function () {
        if (this._x < this._realX) {
            this._realX = Math.max(this._realX - this.distancePerFrame(), this._x);
        }
        if (this._x > this._realX) {
            this._realX = Math.min(this._realX + this.distancePerFrame(), this._x);
        }
        if (this._y < this._realY) {
            this._realY = Math.max(this._realY - this.distancePerFrame(), this._y);
        }
        if (this._y > this._realY) {
            this._realY = Math.min(this._realY + this.distancePerFrame(), this._y);
        }
        if (!this.isMoving()) {
            this.refreshBushDepth();
        }
    };
    Game_CharacterBase.prototype.updateAnimation = function () {
        this.updateAnimationCount();
        if (this._animationCount >= this.animationWait()) {
            this.updatePattern();
            this._animationCount = 0;
        }
    };
    Game_CharacterBase.prototype.animationWait = function () {
        return (9 - this.realMoveSpeed()) * 3;
    };
    Game_CharacterBase.prototype.updateAnimationCount = function () {
        if (this.isMoving() && this.hasWalkAnime()) {
            this._animationCount += 1.5;
        }
        else if (this.hasStepAnime() || !this.isOriginalPattern()) {
            this._animationCount++;
        }
    };
    Game_CharacterBase.prototype.updatePattern = function () {
        if (!this.hasStepAnime() && this._stopCount > 0) {
            this.resetPattern();
        }
        else {
            this._pattern = (this._pattern + 1) % this.maxPattern();
        }
    };
    Game_CharacterBase.prototype.maxPattern = function () {
        return 4;
    };
    Game_CharacterBase.prototype.pattern = function () {
        return this._pattern < 3 ? this._pattern : 1;
    };
    Game_CharacterBase.prototype.setPattern = function (pattern) {
        this._pattern = pattern;
    };
    Game_CharacterBase.prototype.isOriginalPattern = function () {
        return this.pattern() === 1;
    };
    Game_CharacterBase.prototype.resetPattern = function () {
        this.setPattern(1);
    };
    Game_CharacterBase.prototype.refreshBushDepth = function () {
        if (this.isNormalPriority() && !this.isObjectCharacter() && this.isOnBush() && !this.isJumping()) {
            if (!this.isMoving()) {
                this._bushDepth = 12;
            }
        }
        else {
            this._bushDepth = 0;
        }
    };
    Game_CharacterBase.prototype.isOnLadder = function () {
        return globals_1.$gameMap.isLadder(this._x, this._y);
    };
    Game_CharacterBase.prototype.isOnBush = function () {
        return globals_1.$gameMap.isBush(this._x, this._y);
    };
    Game_CharacterBase.prototype.terrainTag = function () {
        return globals_1.$gameMap.terrainTag(this._x, this._y);
    };
    Game_CharacterBase.prototype.regionId = function () {
        return globals_1.$gameMap.regionId(this._x, this._y);
    };
    Game_CharacterBase.prototype.increaseSteps = function () {
        if (this.isOnLadder()) {
            this.setDirection(8);
        }
        this.resetStopCount();
        this.refreshBushDepth();
    };
    Game_CharacterBase.prototype.tileId = function () {
        return this._tileId;
    };
    Game_CharacterBase.prototype.characterName = function () {
        return this._characterName;
    };
    Game_CharacterBase.prototype.characterIndex = function () {
        return this._characterIndex;
    };
    Game_CharacterBase.prototype.setImage = function (characterName, characterIndex) {
        this._tileId = 0;
        this._characterName = characterName;
        this._characterIndex = characterIndex;
        this._isObjectCharacter = ImageManager_1.ImageManager.isObjectCharacter(characterName);
    };
    Game_CharacterBase.prototype.setTileImage = function (tileId) {
        this._tileId = tileId;
        this._characterName = "";
        this._characterIndex = 0;
        this._isObjectCharacter = true;
    };
    Game_CharacterBase.prototype.checkEventTriggerTouchFront = function (d) {
        var x2 = globals_1.$gameMap.roundXWithDirection(this._x, d);
        var y2 = globals_1.$gameMap.roundYWithDirection(this._y, d);
        this.checkEventTriggerTouch(x2, y2);
    };
    Game_CharacterBase.prototype.checkEventTriggerTouch = function (_x, _y) {
        // return false;
        // `checkEventTriggerTouch` の利用箇所を見ると、どれも返り値を見ていないし派生側の実装は何も返さない
    };
    Game_CharacterBase.prototype.isMovementSucceeded = function (_x, _y) {
        return this._movementSuccess;
    };
    Game_CharacterBase.prototype.setMovementSuccess = function (success) {
        this._movementSuccess = success;
    };
    Game_CharacterBase.prototype.moveStraight = function (d) {
        this.setMovementSuccess(this.canPass(this._x, this._y, d));
        if (this.isMovementSucceeded()) {
            this.setDirection(d);
            this._x = globals_1.$gameMap.roundXWithDirection(this._x, d);
            this._y = globals_1.$gameMap.roundYWithDirection(this._y, d);
            this._realX = globals_1.$gameMap.xWithDirection(this._x, this.reverseDir(d));
            this._realY = globals_1.$gameMap.yWithDirection(this._y, this.reverseDir(d));
            this.increaseSteps();
        }
        else {
            this.setDirection(d);
            this.checkEventTriggerTouchFront(d);
        }
    };
    Game_CharacterBase.prototype.moveDiagonally = function (horz, vert) {
        this.setMovementSuccess(this.canPassDiagonally(this._x, this._y, horz, vert));
        if (this.isMovementSucceeded()) {
            this._x = globals_1.$gameMap.roundXWithDirection(this._x, horz);
            this._y = globals_1.$gameMap.roundYWithDirection(this._y, vert);
            this._realX = globals_1.$gameMap.xWithDirection(this._x, this.reverseDir(horz));
            this._realY = globals_1.$gameMap.yWithDirection(this._y, this.reverseDir(vert));
            this.increaseSteps();
        }
        if (this._direction === this.reverseDir(horz)) {
            this.setDirection(horz);
        }
        if (this._direction === this.reverseDir(vert)) {
            this.setDirection(vert);
        }
    };
    Game_CharacterBase.prototype.jump = function (xPlus, yPlus) {
        if (Math.abs(xPlus) > Math.abs(yPlus)) {
            if (xPlus !== 0) {
                this.setDirection(xPlus < 0 ? 4 : 6);
            }
        }
        else {
            if (yPlus !== 0) {
                this.setDirection(yPlus < 0 ? 8 : 2);
            }
        }
        this._x += xPlus;
        this._y += yPlus;
        var distance = Math.round(Math.sqrt(xPlus * xPlus + yPlus * yPlus));
        this._jumpPeak = 10 + distance - this._moveSpeed;
        this._jumpCount = this._jumpPeak * 2;
        this.resetStopCount();
        this.straighten();
    };
    Game_CharacterBase.prototype.hasWalkAnime = function () {
        return this._walkAnime;
    };
    Game_CharacterBase.prototype.setWalkAnime = function (walkAnime) {
        this._walkAnime = walkAnime;
    };
    Game_CharacterBase.prototype.hasStepAnime = function () {
        return this._stepAnime;
    };
    Game_CharacterBase.prototype.setStepAnime = function (stepAnime) {
        this._stepAnime = stepAnime;
    };
    Game_CharacterBase.prototype.isDirectionFixed = function () {
        return this._directionFix;
    };
    Game_CharacterBase.prototype.setDirectionFix = function (directionFix) {
        this._directionFix = directionFix;
    };
    Game_CharacterBase.prototype.isThrough = function () {
        return this._through;
    };
    Game_CharacterBase.prototype.setThrough = function (through) {
        this._through = through;
    };
    Game_CharacterBase.prototype.isTransparent = function () {
        return this._transparent;
    };
    Game_CharacterBase.prototype.bushDepth = function () {
        return this._bushDepth;
    };
    Game_CharacterBase.prototype.setTransparent = function (transparent) {
        this._transparent = transparent;
    };
    Game_CharacterBase.prototype.requestAnimation = function (animationId) {
        this._animationId = animationId;
    };
    Game_CharacterBase.prototype.requestBalloon = function (balloonId) {
        this._balloonId = balloonId;
    };
    Game_CharacterBase.prototype.animationId = function () {
        return this._animationId;
    };
    Game_CharacterBase.prototype.balloonId = function () {
        return this._balloonId;
    };
    Game_CharacterBase.prototype.startAnimation = function () {
        this._animationId = 0;
        this._animationPlaying = true;
    };
    Game_CharacterBase.prototype.startBalloon = function () {
        this._balloonId = 0;
        this._balloonPlaying = true;
    };
    Game_CharacterBase.prototype.isAnimationPlaying = function () {
        return this._animationId > 0 || this._animationPlaying;
    };
    Game_CharacterBase.prototype.isBalloonPlaying = function () {
        return this._balloonId > 0 || this._balloonPlaying;
    };
    Game_CharacterBase.prototype.endAnimation = function () {
        this._animationPlaying = false;
    };
    Game_CharacterBase.prototype.endBalloon = function () {
        this._balloonPlaying = false;
    };
    return Game_CharacterBase;
}());
exports.Game_CharacterBase = Game_CharacterBase;

},{"../core/Graphics":14,"../managers/ImageManager":37,"../managers/globals":43}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_CommonEvent = void 0;
var globals_1 = require("../managers/globals");
var GameInterpreter_1 = require("./GameInterpreter");
var Game_CommonEvent = /** @class */ (function () {
    function Game_CommonEvent(commonEventId) {
        this.initialize(commonEventId);
    }
    Game_CommonEvent.prototype.initialize = function (commonEventId) {
        this._commonEventId = commonEventId;
        this.refresh();
    };
    Game_CommonEvent.prototype.event = function () {
        return globals_1.$dataCommonEvents[this._commonEventId];
    };
    Game_CommonEvent.prototype.list = function () {
        return this.event().list;
    };
    Game_CommonEvent.prototype.refresh = function () {
        if (this.isActive()) {
            if (!this._interpreter) {
                this._interpreter = new GameInterpreter_1.Game_Interpreter();
            }
        }
        else {
            this._interpreter = null;
        }
    };
    Game_CommonEvent.prototype.isActive = function () {
        var event = this.event();
        return event.trigger === 2 && globals_1.$gameSwitches.value(event.switchId);
    };
    Game_CommonEvent.prototype.update = function () {
        if (this._interpreter) {
            if (!this._interpreter.isRunning()) {
                this._interpreter.setup(this.list());
            }
            this._interpreter.update();
        }
    };
    return Game_CommonEvent;
}());
exports.Game_CommonEvent = Game_CommonEvent;

},{"../managers/globals":43,"./GameInterpreter":57}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Enemy = void 0;
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var GameBattler_1 = require("./GameBattler");
var Game_Enemy = /** @class */ (function (_super) {
    __extends(Game_Enemy, _super);
    function Game_Enemy(enemyId, x, y) {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Enemy.prototype) {
            _this.initialize(enemyId, x, y);
        }
        return _this;
    }
    Game_Enemy.prototype.initialize = function (enemyId, x, y) {
        _super.prototype.initialize.call(this);
        GameBattler_1.Game_Battler.prototype.initialize.call(this);
        this.setup(enemyId, x, y);
    };
    Game_Enemy.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._enemyId = 0;
        this._letter = "";
        this._plural = false;
        this._screenX = 0;
        this._screenY = 0;
    };
    Game_Enemy.prototype.setup = function (enemyId, x, y) {
        this._enemyId = enemyId;
        this._screenX = x;
        this._screenY = y;
        this.recoverAll();
    };
    Game_Enemy.prototype.isEnemy = function () {
        return true;
    };
    Game_Enemy.prototype.friendsUnit = function () {
        return globals_1.$gameTroop;
    };
    Game_Enemy.prototype.opponentsUnit = function () {
        return globals_1.$gameParty;
    };
    Game_Enemy.prototype.index = function () {
        return globals_1.$gameTroop.members().indexOf(this);
    };
    Game_Enemy.prototype.isBattleMember = function () {
        return this.index() >= 0;
    };
    Game_Enemy.prototype.enemyId = function () {
        return this._enemyId;
    };
    Game_Enemy.prototype.enemy = function () {
        return globals_1.$dataEnemies[this._enemyId];
    };
    Game_Enemy.prototype.traitObjects = function () {
        return GameBattler_1.Game_Battler.prototype.traitObjects.call(this).concat(this.enemy());
    };
    Game_Enemy.prototype.paramBase = function (paramId) {
        return this.enemy().params[paramId];
    };
    Game_Enemy.prototype.exp = function () {
        return this.enemy().exp;
    };
    Game_Enemy.prototype.gold = function () {
        return this.enemy().gold;
    };
    Game_Enemy.prototype.makeDropItems = function () {
        var _this = this;
        return this.enemy().dropItems.reduce(function (r, di) {
            if (di.kind > 0 && g.game.vars.random.generate() * di.denominator < _this.dropItemRate()) {
                return r.concat(_this.itemObject(di.kind, di.dataId));
            }
            else {
                return r;
            }
        }, []);
    };
    Game_Enemy.prototype.dropItemRate = function () {
        return globals_1.$gameParty.hasDropItemDouble() ? 2 : 1;
    };
    Game_Enemy.prototype.itemObject = function (kind, dataId) {
        if (kind === 1) {
            return globals_1.$dataItems[dataId];
        }
        else if (kind === 2) {
            return globals_1.$dataWeapons[dataId];
        }
        else if (kind === 3) {
            return globals_1.$dataArmors[dataId];
        }
        else {
            return null;
        }
    };
    Game_Enemy.prototype.isSpriteVisible = function () {
        return true;
    };
    Game_Enemy.prototype.screenX = function () {
        return this._screenX;
    };
    Game_Enemy.prototype.screenY = function () {
        return this._screenY;
    };
    Game_Enemy.prototype.battlerName = function () {
        return this.enemy().battlerName;
    };
    Game_Enemy.prototype.battlerHue = function () {
        return this.enemy().battlerHue;
    };
    Game_Enemy.prototype.originalName = function () {
        return this.enemy().name;
    };
    Game_Enemy.prototype.name = function () {
        return this.originalName() + (this._plural ? this._letter : "");
    };
    Game_Enemy.prototype.isLetterEmpty = function () {
        return this._letter === "";
    };
    Game_Enemy.prototype.setLetter = function (letter) {
        this._letter = letter;
    };
    Game_Enemy.prototype.setPlural = function (plural) {
        this._plural = plural;
    };
    Game_Enemy.prototype.performActionStart = function (action) {
        _super.prototype.performActionStart.call(this, action);
        this.requestEffect("whiten");
    };
    Game_Enemy.prototype.performAction = function (action) {
        _super.prototype.performAction.call(this, action);
    };
    Game_Enemy.prototype.performActionEnd = function () {
        _super.prototype.performActionEnd.call(this);
    };
    Game_Enemy.prototype.performDamage = function () {
        _super.prototype.performDamage.call(this);
        SoundManager_1.SoundManager.playEnemyDamage();
        this.requestEffect("blink");
    };
    Game_Enemy.prototype.performCollapse = function () {
        GameBattler_1.Game_Battler.prototype.performCollapse.call(this);
        switch (this.collapseType()) {
            case 0:
                this.requestEffect("collapse");
                SoundManager_1.SoundManager.playEnemyCollapse();
                break;
            case 1:
                this.requestEffect("bossCollapse");
                SoundManager_1.SoundManager.playBossCollapse1();
                break;
            case 2:
                this.requestEffect("instantCollapse");
                break;
        }
    };
    Game_Enemy.prototype.transform = function (enemyId) {
        var name = this.originalName();
        this._enemyId = enemyId;
        if (this.originalName() !== name) {
            this._letter = "";
            this._plural = false;
        }
        this.refresh();
        if (this.numActions() > 0) {
            this.makeActions();
        }
    };
    Game_Enemy.prototype.meetsCondition = function (action) {
        var param1 = action.conditionParam1;
        var param2 = action.conditionParam2;
        switch (action.conditionType) {
            case 1:
                return this.meetsTurnCondition(param1, param2);
            case 2:
                return this.meetsHpCondition(param1, param2);
            case 3:
                return this.meetsMpCondition(param1, param2);
            case 4:
                return this.meetsStateCondition(param1);
            case 5:
                return this.meetsPartyLevelCondition(param1);
            case 6:
                return this.meetsSwitchCondition(param1);
            default:
                return true;
        }
    };
    Game_Enemy.prototype.meetsTurnCondition = function (param1, param2) {
        var n = globals_1.$gameTroop.turnCount();
        if (param2 === 0) {
            return n === param1;
        }
        else {
            return n > 0 && n >= param1 && n % param2 === param1 % param2;
        }
    };
    Game_Enemy.prototype.meetsHpCondition = function (param1, param2) {
        return this.hpRate() >= param1 && this.hpRate() <= param2;
    };
    Game_Enemy.prototype.meetsMpCondition = function (param1, param2) {
        return this.mpRate() >= param1 && this.mpRate() <= param2;
    };
    Game_Enemy.prototype.meetsStateCondition = function (param) {
        return this.isStateAffected(param);
    };
    Game_Enemy.prototype.meetsPartyLevelCondition = function (param) {
        return globals_1.$gameParty.highestLevel() >= param;
    };
    Game_Enemy.prototype.meetsSwitchCondition = function (param) {
        return globals_1.$gameSwitches.value(param);
    };
    Game_Enemy.prototype.isActionValid = function (action) {
        return this.meetsCondition(action) && this.canUse(globals_1.$dataSkills[action.skillId]);
    };
    Game_Enemy.prototype.selectAction = function (actionList, ratingZero) {
        var sum = actionList.reduce(function (r, a) {
            return r + a.rating - ratingZero;
        }, 0);
        if (sum > 0) {
            var value = Utils_1.Utils.randomInt(sum);
            for (var i = 0; i < actionList.length; i++) {
                var action = actionList[i];
                value -= action.rating - ratingZero;
                if (value < 0) {
                    return action;
                }
            }
        }
        else {
            return null;
        }
    };
    Game_Enemy.prototype.selectAllActions = function (actionList) {
        var ratingMax = Math.max.apply(null, actionList.map(function (a) {
            return a.rating;
        }));
        var ratingZero = ratingMax - 3;
        actionList = actionList.filter(function (a) {
            return a.rating > ratingZero;
        });
        for (var i = 0; i < this.numActions(); i++) {
            this.action(i).setEnemyAction(this.selectAction(actionList, ratingZero));
        }
    };
    Game_Enemy.prototype.makeActions = function () {
        var _this = this;
        GameBattler_1.Game_Battler.prototype.makeActions.call(this);
        if (this.numActions() > 0) {
            var actionList = this.enemy().actions.filter(function (a) {
                return _this.isActionValid(a);
            });
            if (actionList.length > 0) {
                this.selectAllActions(actionList);
            }
        }
        this.setActionState("waiting");
    };
    return Game_Enemy;
}(GameBattler_1.Game_Battler));
exports.Game_Enemy = Game_Enemy;

},{"../core/Utils":28,"../managers/SoundManager":40,"../managers/globals":43,"./GameBattler":48}],54:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Event = void 0;
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var GameCharacter_1 = require("./GameCharacter");
var GameInterpreter_1 = require("./GameInterpreter");
var Game_Event = /** @class */ (function (_super) {
    __extends(Game_Event, _super);
    function Game_Event(mapId, eventId) {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Event.prototype) {
            _this.initialize(mapId, eventId);
        }
        return _this;
    }
    Game_Event.prototype.initialize = function (mapId, eventId) {
        _super.prototype.initialize.call(this);
        this._mapId = mapId;
        this._eventId = eventId;
        this.locate(this.event().x, this.event().y);
        this.refresh();
    };
    Game_Event.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._moveType = 0;
        this._trigger = 0;
        this._starting = false;
        this._erased = false;
        this._pageIndex = -2;
        this._originalPattern = 1;
        this._originalDirection = 2;
        this._prelockDirection = 0;
        this._locked = false;
    };
    Game_Event.prototype.eventId = function () {
        return this._eventId;
    };
    Game_Event.prototype.event = function () {
        return globals_1.$dataMap.events[this._eventId];
    };
    Game_Event.prototype.page = function () {
        return this.event().pages[this._pageIndex];
    };
    Game_Event.prototype.list = function () {
        return this.page().list;
    };
    Game_Event.prototype.isCollidedWithCharacters = function (x, y) {
        return _super.prototype.isCollidedWithCharacters.call(this, x, y) || this.isCollidedWithPlayerCharacters(x, y);
    };
    Game_Event.prototype.isCollidedWithEvents = function (x, y) {
        var events = globals_1.$gameMap.eventsXyNt(x, y);
        return events.length > 0;
    };
    Game_Event.prototype.isCollidedWithPlayerCharacters = function (x, y) {
        return this.isNormalPriority() && globals_1.$gamePlayer.isCollided(x, y);
    };
    Game_Event.prototype.lock = function () {
        if (!this._locked) {
            this._prelockDirection = this.direction();
            this.turnTowardPlayer();
            this._locked = true;
        }
    };
    Game_Event.prototype.unlock = function () {
        if (this._locked) {
            this._locked = false;
            this.setDirection(this._prelockDirection);
        }
    };
    Game_Event.prototype.updateStop = function () {
        if (this._locked) {
            this.resetStopCount();
        }
        GameCharacter_1.Game_Character.prototype.updateStop.call(this);
        if (!this.isMoveRouteForcing()) {
            this.updateSelfMovement();
        }
    };
    Game_Event.prototype.updateSelfMovement = function () {
        if (!this._locked && this.isNearTheScreen() && this.checkStop(this.stopCountThreshold())) {
            switch (this._moveType) {
                case 1:
                    this.moveTypeRandom();
                    break;
                case 2:
                    this.moveTypeTowardPlayer();
                    break;
                case 3:
                    this.moveTypeCustom();
                    break;
            }
        }
    };
    Game_Event.prototype.stopCountThreshold = function () {
        return 30 * (5 - this.moveFrequency());
    };
    Game_Event.prototype.moveTypeRandom = function () {
        switch (Utils_1.Utils.randomInt(6)) {
            case 0:
            case 1:
                this.moveRandom();
                break;
            case 2:
            case 3:
            case 4:
                this.moveForward();
                break;
            case 5:
                this.resetStopCount();
                break;
        }
    };
    Game_Event.prototype.moveTypeTowardPlayer = function () {
        if (this.isNearThePlayer()) {
            switch (Utils_1.Utils.randomInt(6)) {
                case 0:
                case 1:
                case 2:
                case 3:
                    this.moveTowardPlayer();
                    break;
                case 4:
                    this.moveRandom();
                    break;
                case 5:
                    this.moveForward();
                    break;
            }
        }
        else {
            this.moveRandom();
        }
    };
    Game_Event.prototype.isNearThePlayer = function () {
        var sx = Math.abs(this.deltaXFrom(globals_1.$gamePlayer.x));
        var sy = Math.abs(this.deltaYFrom(globals_1.$gamePlayer.y));
        return sx + sy < 20;
    };
    Game_Event.prototype.moveTypeCustom = function () {
        this.updateRoutineMove();
    };
    Game_Event.prototype.isStarting = function () {
        return this._starting;
    };
    Game_Event.prototype.clearStartingFlag = function () {
        this._starting = false;
    };
    Game_Event.prototype.isTriggerIn = function (triggers) {
        return Utils_1.Utils.contains(triggers, this._trigger);
    };
    Game_Event.prototype.start = function () {
        var list = this.list();
        if (list && list.length > 1) {
            this._starting = true;
            if (this.isTriggerIn([0, 1, 2])) {
                this.lock();
            }
        }
    };
    Game_Event.prototype.erase = function () {
        this._erased = true;
        this.refresh();
    };
    Game_Event.prototype.refresh = function () {
        var newPageIndex = this._erased ? -1 : this.findProperPageIndex();
        if (this._pageIndex !== newPageIndex) {
            this._pageIndex = newPageIndex;
            this.setupPage();
        }
    };
    Game_Event.prototype.findProperPageIndex = function () {
        var pages = this.event().pages;
        for (var i = pages.length - 1; i >= 0; i--) {
            var page = pages[i];
            if (this.meetsConditions(page)) {
                return i;
            }
        }
        return -1;
    };
    Game_Event.prototype.meetsConditions = function (page) {
        var c = page.conditions;
        if (c.switch1Valid) {
            if (!globals_1.$gameSwitches.value(c.switch1Id)) {
                return false;
            }
        }
        if (c.switch2Valid) {
            if (!globals_1.$gameSwitches.value(c.switch2Id)) {
                return false;
            }
        }
        if (c.variableValid) {
            if (globals_1.$gameVariables.value(c.variableId) < c.variableValue) {
                return false;
            }
        }
        if (c.selfSwitchValid) {
            var key = [this._mapId, this._eventId, c.selfSwitchCh];
            if (globals_1.$gameSelfSwitches.value(key) !== true) {
                return false;
            }
        }
        if (c.itemValid) {
            var item = globals_1.$dataItems[c.itemId];
            if (!globals_1.$gameParty.hasItem(item)) {
                return false;
            }
        }
        if (c.actorValid) {
            var actor = globals_1.$gameActors.actor(c.actorId);
            if (!Utils_1.Utils.contains(globals_1.$gameParty.members(), actor)) {
                return false;
            }
        }
        return true;
    };
    Game_Event.prototype.setupPage = function () {
        if (this._pageIndex >= 0) {
            this.setupPageSettings();
        }
        else {
            this.clearPageSettings();
        }
        this.refreshBushDepth();
        this.clearStartingFlag();
        this.checkEventTriggerAuto();
    };
    Game_Event.prototype.clearPageSettings = function () {
        this.setImage("", 0);
        this._moveType = 0;
        this._trigger = null;
        this._interpreter = null;
        this.setThrough(true);
    };
    Game_Event.prototype.setupPageSettings = function () {
        var page = this.page();
        var image = page.image;
        if (image.tileId > 0) {
            this.setTileImage(image.tileId);
        }
        else {
            this.setImage(image.characterName, image.characterIndex);
        }
        if (this._originalDirection !== image.direction) {
            this._originalDirection = image.direction;
            this._prelockDirection = 0;
            this.setDirectionFix(false);
            this.setDirection(image.direction);
        }
        if (this._originalPattern !== image.pattern) {
            this._originalPattern = image.pattern;
            this.setPattern(image.pattern);
        }
        this.setMoveSpeed(page.moveSpeed);
        this.setMoveFrequency(page.moveFrequency);
        this.setPriorityType(page.priorityType);
        this.setWalkAnime(page.walkAnime);
        this.setStepAnime(page.stepAnime);
        this.setDirectionFix(page.directionFix);
        this.setThrough(page.through);
        this.setMoveRoute(page.moveRoute);
        this._moveType = page.moveType;
        this._trigger = page.trigger;
        if (this._trigger === 4) {
            this._interpreter = new GameInterpreter_1.Game_Interpreter();
        }
        else {
            this._interpreter = null;
        }
    };
    Game_Event.prototype.isOriginalPattern = function () {
        return this.pattern() === this._originalPattern;
    };
    Game_Event.prototype.resetPattern = function () {
        this.setPattern(this._originalPattern);
    };
    Game_Event.prototype.checkEventTriggerTouch = function (x, y) {
        if (!globals_1.$gameMap.isEventRunning()) {
            if (this._trigger === 2 && globals_1.$gamePlayer.pos(x, y)) {
                if (!this.isJumping() && this.isNormalPriority()) {
                    this.start();
                }
            }
        }
    };
    Game_Event.prototype.checkEventTriggerAuto = function () {
        if (this._trigger === 3) {
            this.start();
        }
    };
    Game_Event.prototype.update = function () {
        _super.prototype.update.call(this);
        this.checkEventTriggerAuto();
        this.updateParallel();
    };
    Game_Event.prototype.updateParallel = function () {
        if (this._interpreter) {
            if (!this._interpreter.isRunning()) {
                this._interpreter.setup(this.list(), this._eventId);
            }
            this._interpreter.update();
        }
    };
    Game_Event.prototype.locate = function (x, y) {
        _super.prototype.locate.call(this, x, y);
        this._prelockDirection = 0;
    };
    Game_Event.prototype.forceMoveRoute = function (moveRoute) {
        _super.prototype.forceMoveRoute.call(this, moveRoute);
        this._prelockDirection = 0;
    };
    return Game_Event;
}(GameCharacter_1.Game_Character));
exports.Game_Event = Game_Event;

},{"../core/Utils":28,"../managers/globals":43,"./GameCharacter":50,"./GameInterpreter":57}],55:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Follower = void 0;
var globals_1 = require("../managers/globals");
var GameCharacter_1 = require("./GameCharacter");
var Game_Follower = /** @class */ (function (_super) {
    __extends(Game_Follower, _super);
    function Game_Follower(memberIndex) {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Follower.prototype) {
            _this.initialize(memberIndex);
        }
        return _this;
    }
    Game_Follower.prototype.initialize = function (memberIndex) {
        _super.prototype.initialize.call(this);
        this._memberIndex = memberIndex;
        this.setTransparent(globals_1.$dataSystem.optTransparent);
        this.setThrough(true);
    };
    Game_Follower.prototype.refresh = function () {
        var characterName = this.isVisible() ? this.actor().characterName() : "";
        var characterIndex = this.isVisible() ? this.actor().characterIndex() : 0;
        this.setImage(characterName, characterIndex);
    };
    Game_Follower.prototype.actor = function () {
        return globals_1.$gameParty.battleMembers()[this._memberIndex];
    };
    Game_Follower.prototype.isVisible = function () {
        return this.actor() && globals_1.$gamePlayer.followers().isVisible();
    };
    Game_Follower.prototype.update = function () {
        GameCharacter_1.Game_Character.prototype.update.call(this);
        this.setMoveSpeed(globals_1.$gamePlayer.realMoveSpeed());
        this.setOpacity(globals_1.$gamePlayer.opacity());
        this.setBlendMode(globals_1.$gamePlayer.blendMode());
        this.setWalkAnime(globals_1.$gamePlayer.hasWalkAnime());
        this.setStepAnime(globals_1.$gamePlayer.hasStepAnime());
        this.setDirectionFix(globals_1.$gamePlayer.isDirectionFixed());
        this.setTransparent(globals_1.$gamePlayer.isTransparent());
    };
    Game_Follower.prototype.chaseCharacter = function (character) {
        var sx = this.deltaXFrom(character.x);
        var sy = this.deltaYFrom(character.y);
        if (sx !== 0 && sy !== 0) {
            this.moveDiagonally(sx > 0 ? 4 : 6, sy > 0 ? 8 : 2);
        }
        else if (sx !== 0) {
            this.moveStraight(sx > 0 ? 4 : 6);
        }
        else if (sy !== 0) {
            this.moveStraight(sy > 0 ? 8 : 2);
        }
        this.setMoveSpeed(globals_1.$gamePlayer.realMoveSpeed());
    };
    return Game_Follower;
}(GameCharacter_1.Game_Character));
exports.Game_Follower = Game_Follower;

},{"../managers/globals":43,"./GameCharacter":50}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Followers = void 0;
var globals_1 = require("../managers/globals");
var GameFollower_1 = require("./GameFollower");
var Game_Followers = /** @class */ (function () {
    function Game_Followers() {
        this.initialize();
    }
    Game_Followers.prototype.initialize = function () {
        this._visible = globals_1.$dataSystem.optFollowers;
        this._gathering = false;
        this._data = [];
        for (var i = 1; i < globals_1.$gameParty.maxBattleMembers(); i++) {
            this._data.push(new GameFollower_1.Game_Follower(i));
        }
    };
    Game_Followers.prototype.isVisible = function () {
        return this._visible;
    };
    Game_Followers.prototype.show = function () {
        this._visible = true;
    };
    Game_Followers.prototype.hide = function () {
        this._visible = false;
    };
    Game_Followers.prototype.follower = function (index) {
        return this._data[index];
    };
    Game_Followers.prototype.forEach = function (callback, thisObject) {
        this._data.forEach(callback, thisObject);
    };
    Game_Followers.prototype.reverseEach = function (callback, thisObject) {
        this._data.reverse();
        this._data.forEach(callback, thisObject);
        this._data.reverse();
    };
    Game_Followers.prototype.refresh = function () {
        this.forEach(function (follower) {
            return follower.refresh();
        }, this);
    };
    Game_Followers.prototype.update = function () {
        if (this.areGathering()) {
            if (!this.areMoving()) {
                this.updateMove();
            }
            if (this.areGathered()) {
                this._gathering = false;
            }
        }
        this.forEach(function (follower) {
            follower.update();
        }, this);
    };
    Game_Followers.prototype.updateMove = function () {
        for (var i = this._data.length - 1; i >= 0; i--) {
            var precedingCharacter = i > 0 ? this._data[i - 1] : globals_1.$gamePlayer;
            this._data[i].chaseCharacter(precedingCharacter);
        }
    };
    Game_Followers.prototype.jumpAll = function () {
        if (globals_1.$gamePlayer.isJumping()) {
            for (var i = 0; i < this._data.length; i++) {
                var follower = this._data[i];
                var sx = globals_1.$gamePlayer.deltaXFrom(follower.x);
                var sy = globals_1.$gamePlayer.deltaYFrom(follower.y);
                follower.jump(sx, sy);
            }
        }
    };
    Game_Followers.prototype.synchronize = function (x, y, d) {
        this.forEach(function (follower) {
            follower.locate(x, y);
            follower.setDirection(d);
        }, this);
    };
    Game_Followers.prototype.gather = function () {
        this._gathering = true;
    };
    Game_Followers.prototype.areGathering = function () {
        return this._gathering;
    };
    Game_Followers.prototype.visibleFollowers = function () {
        return this._data.filter(function (follower) {
            return follower.isVisible();
        }, this);
    };
    Game_Followers.prototype.areMoving = function () {
        return this.visibleFollowers().some(function (follower) {
            return follower.isMoving();
        }, this);
    };
    Game_Followers.prototype.areGathered = function () {
        return this.visibleFollowers().every(function (follower) {
            return !follower.isMoving() && follower.pos(globals_1.$gamePlayer.x, globals_1.$gamePlayer.y);
        }, this);
    };
    Game_Followers.prototype.isSomeoneCollided = function (x, y) {
        return this.visibleFollowers().some(function (follower) {
            return follower.pos(x, y);
        }, this);
    };
    return Game_Followers;
}());
exports.Game_Followers = Game_Followers;

},{"../managers/globals":43,"./GameFollower":55}],57:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Interpreter = void 0;
var Graphics_1 = require("../core/Graphics");
var JsonEx_1 = require("../core/JsonEx");
var Tilemap_1 = require("../core/Tilemap");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var BattleManager_1 = require("../managers/BattleManager");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var SceneBattle_1 = require("../scenes/SceneBattle");
var SceneGameOver_1 = require("../scenes/SceneGameOver");
var SceneMenu_1 = require("../scenes/SceneMenu");
var SceneShop_1 = require("../scenes/SceneShop");
var SceneTitle_1 = require("../scenes/SceneTitle");
var WindowMenuCommand_1 = require("../windows/WindowMenuCommand");
var GameCharacter_1 = require("./GameCharacter");
// これらの変数(GameObject)はツクールのスクリプトで利用される可能性があるため、exportせずクラスの外で変数定義
/* eslint-disable @typescript-eslint/no-unused-vars */
var $gameVariables;
var $gameSystem;
var $gameSwitches;
var $gameMessage;
var $gamePlayer;
var $dataCommonEvents;
var $dataTilesets;
var $gameMap;
var $gameTemp;
var $dataEnemies;
var $gameActors;
var $dataAnimations;
var $gameParty;
var $gameTroop;
var $gameTimer;
var $gameSelfSwitches;
var $dataClasses;
var $dataWeapons;
var $dataArmors;
var $dataItems;
var $gameScreen;
var $dataTroops;
var $dataActors;
var $dataSkills;
var $dataStates;
var $dataSystem;
var $dataMapInfos;
var $dataMap;
// これらの変数はツクールのスクリプトでグローバルなクラス名として利用される想定なので、変数の命名規則からは例外的に外すものとする
/* eslint-disable  @typescript-eslint/naming-convention */
var Graphics;
var JsonEx;
var Tilemap;
var TouchInput;
var Utils;
var AudioManager;
var BattleManager;
var DataManager;
var ImageManager;
var SceneManager;
var SoundManager;
var TextManager;
/* eslint-enable @typescript-eslint/naming-convention */
/* eslint-enable @typescript-eslint/no-unused-vars */
// 未定義の全GameObjectに値を代入
function setGameObjects() {
    $gameVariables = globals_1.$gameVariables;
    $gameSystem = globals_1.$gameSystem;
    $gameSwitches = globals_1.$gameSwitches;
    $gameMessage = globals_1.$gameMessage;
    $gamePlayer = globals_1.$gamePlayer;
    $dataCommonEvents = globals_1.$dataCommonEvents;
    $dataTilesets = globals_1.$dataTilesets;
    $gameMap = globals_1.$gameMap;
    $gameTemp = globals_1.$gameTemp;
    $dataEnemies = globals_1.$dataEnemies;
    $gameActors = globals_1.$gameActors;
    $dataAnimations = globals_1.$dataAnimations;
    $gameParty = globals_1.$gameParty;
    $gameTroop = globals_1.$gameTroop;
    $gameTimer = globals_1.$gameTimer;
    $gameSelfSwitches = globals_1.$gameSelfSwitches;
    $dataClasses = globals_1.$dataClasses;
    $dataWeapons = globals_1.$dataWeapons;
    $dataArmors = globals_1.$dataArmors;
    $dataItems = globals_1.$dataItems;
    $gameScreen = globals_1.$gameScreen;
    $dataTroops = globals_1.$dataTroops;
    $dataActors = globals_1.$dataActors;
    $dataSkills = globals_1.$dataSkills;
    $dataStates = globals_1.$dataStates;
    $dataSystem = globals_1.$dataSystem;
    $dataMapInfos = globals_1.$dataMapInfos;
    $dataMap = globals_1.$dataMap;
    Graphics = Graphics_1.Graphics;
    JsonEx = JsonEx_1.JsonEx;
    Tilemap = Tilemap_1.Tilemap;
    TouchInput = TouchInput_1.TouchInput;
    Utils = Utils_1.Utils;
    AudioManager = AudioManager_1.AudioManager;
    BattleManager = BattleManager_1.BattleManager;
    DataManager = DataManager_1.DataManager;
    ImageManager = ImageManager_1.ImageManager;
    SceneManager = SceneManager_1.SceneManager;
    SoundManager = SoundManager_1.SoundManager;
    TextManager = TextManager_1.TextManager;
}
// スクリプト(eval)で利用するグローバル変数の初期化を可能にする
if (!DataManager_1.DataManager._onReset.contains(setGameObjects)) {
    DataManager_1.DataManager._onReset.add(setGameObjects);
}
var Game_Interpreter = /** @class */ (function () {
    function Game_Interpreter(depth) {
        this.initialize(depth);
    }
    Game_Interpreter.requestImages = function (list, commonList) {
        if (!list)
            return;
        list.forEach(function (command) {
            var params = command.parameters;
            switch (command.code) {
                // Show Text
                case 101:
                    ImageManager_1.ImageManager.requestFace(params[0]);
                    break;
                // Common Event
                case 117:
                    var commonEvent = globals_1.$dataCommonEvents[params[0]];
                    if (commonEvent) {
                        if (!commonList) {
                            commonList = [];
                        }
                        if (!Utils_1.Utils.contains(commonList, params[0])) {
                            commonList.push(params[0]);
                            Game_Interpreter.requestImages(commonEvent.list, commonList);
                        }
                    }
                    break;
                // Change Party Member
                case 129:
                    var actor = globals_1.$gameActors.actor(params[0]);
                    if (actor && params[1] === 0) {
                        var name_1 = actor.characterName();
                        ImageManager_1.ImageManager.requestCharacter(name_1);
                    }
                    break;
                // Set Movement Route
                case 205:
                    if (params[1]) {
                        params[1].list.forEach(function (command) {
                            var params = command.parameters;
                            if (command.code === GameCharacter_1.Game_Character.ROUTE_CHANGE_IMAGE) {
                                ImageManager_1.ImageManager.requestCharacter(params[0]);
                            }
                        });
                    }
                    break;
                // Show Animation, Show Battle Animation
                case 212:
                case 337:
                    if (params[1]) {
                        var animation = globals_1.$dataAnimations[params[1]];
                        var name1 = animation.animation1Name;
                        var name2 = animation.animation2Name;
                        var hue1 = animation.animation1Hue;
                        var hue2 = animation.animation2Hue;
                        ImageManager_1.ImageManager.requestAnimation(name1, hue1);
                        ImageManager_1.ImageManager.requestAnimation(name2, hue2);
                    }
                    break;
                // Change Player Followers
                case 216:
                    if (params[0] === 0) {
                        globals_1.$gamePlayer.followers().forEach(function (follower) {
                            var name = follower.characterName();
                            ImageManager_1.ImageManager.requestCharacter(name);
                        });
                    }
                    break;
                // Show Picture
                case 231:
                    ImageManager_1.ImageManager.requestPicture(params[1]);
                    break;
                // Change Tileset
                case 282:
                    var tileset = globals_1.$dataTilesets[params[0]];
                    tileset.tilesetNames.forEach(function (tilesetName) {
                        ImageManager_1.ImageManager.requestTileset(tilesetName);
                    });
                    break;
                // Change Battle Back
                case 283:
                    if (globals_1.$gameParty.inBattle()) {
                        ImageManager_1.ImageManager.requestBattleback1(params[0]);
                        ImageManager_1.ImageManager.requestBattleback2(params[1]);
                    }
                    break;
                // Change Parallax
                case 284:
                    if (!globals_1.$gameParty.inBattle()) {
                        ImageManager_1.ImageManager.requestParallax(params[0]);
                    }
                    break;
                // Change Actor Images
                case 322:
                    ImageManager_1.ImageManager.requestCharacter(params[1]);
                    ImageManager_1.ImageManager.requestFace(params[3]);
                    ImageManager_1.ImageManager.requestSvActor(params[5]);
                    break;
                // Change Vehicle Image
                case 323:
                    var vehicle = globals_1.$gameMap.vehicle(params[0]);
                    if (vehicle) {
                        ImageManager_1.ImageManager.requestCharacter(params[1]);
                    }
                    break;
                // Enemy Transform
                case 336:
                    var enemy = globals_1.$dataEnemies[params[1]];
                    var name = enemy.battlerName;
                    var hue = enemy.battlerHue;
                    if (globals_1.$gameSystem.isSideView()) {
                        ImageManager_1.ImageManager.requestSvEnemy(name, hue);
                    }
                    else {
                        ImageManager_1.ImageManager.requestEnemy(name, hue);
                    }
                    break;
            }
        });
    };
    Game_Interpreter.prototype.initialize = function (depth) {
        this._depth = depth || 0;
        this.checkOverflow();
        this.clear();
        this._branch = {};
        this._params = [];
        this._indent = 0;
        this._frameCount = 0;
        this._freezeChecker = 0;
    };
    Game_Interpreter.prototype.checkOverflow = function () {
        if (this._depth >= 100) {
            throw new Error("Common event calls exceeded the limit");
        }
    };
    Game_Interpreter.prototype.clear = function () {
        this._mapId = 0;
        this._eventId = 0;
        this._list = null;
        this._index = 0;
        this._waitCount = 0;
        this._waitMode = "";
        this._comments = "";
        this._character = null;
        this._childInterpreter = null;
    };
    Game_Interpreter.prototype.setup = function (list, eventId) {
        this.clear();
        this._mapId = globals_1.$gameMap.mapId();
        this._eventId = eventId || 0;
        this._list = list;
        Game_Interpreter.requestImages(list);
    };
    Game_Interpreter.prototype.eventId = function () {
        return this._eventId;
    };
    Game_Interpreter.prototype.isOnCurrentMap = function () {
        return this._mapId === globals_1.$gameMap.mapId();
    };
    Game_Interpreter.prototype.setupReservedCommonEvent = function () {
        if (globals_1.$gameTemp.isCommonEventReserved()) {
            this.setup(globals_1.$gameTemp.reservedCommonEvent().list);
            globals_1.$gameTemp.clearCommonEvent();
            return true;
        }
        else {
            return false;
        }
    };
    Game_Interpreter.prototype.isRunning = function () {
        return !!this._list;
    };
    Game_Interpreter.prototype.update = function () {
        while (this.isRunning()) {
            if (this.updateChild() || this.updateWait()) {
                break;
            }
            if (SceneManager_1.SceneManager.isSceneChanging()) {
                break;
            }
            if (!this.executeCommand()) {
                break;
            }
            if (this.checkFreeze()) {
                break;
            }
        }
    };
    Game_Interpreter.prototype.updateChild = function () {
        if (this._childInterpreter) {
            this._childInterpreter.update();
            if (this._childInterpreter.isRunning()) {
                return true;
            }
            else {
                this._childInterpreter = null;
            }
        }
        return false;
    };
    Game_Interpreter.prototype.updateWait = function () {
        return this.updateWaitCount() || this.updateWaitMode();
    };
    Game_Interpreter.prototype.updateWaitCount = function () {
        if (this._waitCount > 0) {
            this._waitCount--;
            return true;
        }
        return false;
    };
    Game_Interpreter.prototype.updateWaitMode = function () {
        var waiting = false;
        switch (this._waitMode) {
            case "message":
                waiting = globals_1.$gameMessage.isBusy();
                break;
            case "transfer":
                waiting = globals_1.$gamePlayer.isTransferring();
                break;
            case "scroll":
                waiting = globals_1.$gameMap.isScrolling();
                break;
            case "route":
                waiting = this._character.isMoveRouteForcing();
                break;
            case "animation":
                waiting = this._character.isAnimationPlaying();
                break;
            case "balloon":
                waiting = this._character.isBalloonPlaying();
                break;
            case "gather":
                waiting = globals_1.$gamePlayer.areFollowersGathering();
                break;
            case "action":
                waiting = BattleManager_1.BattleManager.isActionForced();
                break;
            case "video":
                waiting = Graphics_1.Graphics.isVideoPlaying();
                break;
            case "image":
                waiting = !ImageManager_1.ImageManager.isReady();
                break;
        }
        if (!waiting) {
            this._waitMode = "";
        }
        return waiting;
    };
    Game_Interpreter.prototype.setWaitMode = function (waitMode) {
        this._waitMode = waitMode;
    };
    Game_Interpreter.prototype.wait = function (duration) {
        this._waitCount = duration;
    };
    Game_Interpreter.prototype.fadeSpeed = function () {
        return 24;
    };
    Game_Interpreter.prototype.executeCommand = function () {
        var command = this.currentCommand();
        if (command) {
            this._params = command.parameters;
            this._indent = command.indent;
            var methodName = "command" + command.code;
            if (typeof this[methodName] === "function") {
                if (!this[methodName]()) {
                    return false;
                }
            }
            this._index++;
        }
        else {
            this.terminate();
        }
        return true;
    };
    Game_Interpreter.prototype.checkFreeze = function () {
        if (this._frameCount !== Graphics_1.Graphics.frameCount) {
            this._frameCount = Graphics_1.Graphics.frameCount;
            this._freezeChecker = 0;
        }
        if (this._freezeChecker++ >= 100000) {
            return true;
        }
        else {
            return false;
        }
    };
    Game_Interpreter.prototype.terminate = function () {
        this._list = null;
        this._comments = "";
    };
    Game_Interpreter.prototype.skipBranch = function () {
        while (this._list[this._index + 1].indent > this._indent) {
            this._index++;
        }
    };
    Game_Interpreter.prototype.currentCommand = function () {
        return this._list[this._index];
    };
    Game_Interpreter.prototype.nextEventCode = function () {
        var command = this._list[this._index + 1];
        if (command) {
            return command.code;
        }
        else {
            return 0;
        }
    };
    Game_Interpreter.prototype.iterateActorId = function (param, callback) {
        if (param === 0) {
            globals_1.$gameParty.members().forEach(callback);
        }
        else {
            var actor = globals_1.$gameActors.actor(param);
            if (actor) {
                callback(actor);
            }
        }
    };
    Game_Interpreter.prototype.iterateActorEx = function (param1, param2, callback) {
        if (param1 === 0) {
            this.iterateActorId(param2, callback);
        }
        else {
            this.iterateActorId(globals_1.$gameVariables.value(param2), callback);
        }
    };
    Game_Interpreter.prototype.iterateActorIndex = function (param, callback) {
        if (param < 0) {
            globals_1.$gameParty.members().forEach(callback);
        }
        else {
            var actor = globals_1.$gameParty.members()[param];
            if (actor) {
                callback(actor);
            }
        }
    };
    Game_Interpreter.prototype.iterateEnemyIndex = function (param, callback) {
        if (param < 0) {
            globals_1.$gameTroop.members().forEach(callback);
        }
        else {
            var enemy = globals_1.$gameTroop.members()[param];
            if (enemy) {
                callback(enemy);
            }
        }
    };
    Game_Interpreter.prototype.iterateBattler = function (param1, param2, callback) {
        if (globals_1.$gameParty.inBattle()) {
            if (param1 === 0) {
                this.iterateEnemyIndex(param2, callback);
            }
            else {
                this.iterateActorId(param2, callback);
            }
        }
    };
    Game_Interpreter.prototype.character = function (param) {
        if (globals_1.$gameParty.inBattle()) {
            return null;
        }
        else if (param < 0) {
            return globals_1.$gamePlayer;
        }
        else if (this.isOnCurrentMap()) {
            return globals_1.$gameMap.event(param > 0 ? param : this._eventId);
        }
        else {
            return null;
        }
    };
    Game_Interpreter.prototype.operateValue = function (operation, operandType, operand) {
        var value = operandType === 0 ? operand : globals_1.$gameVariables.value(operand);
        return operation === 0 ? value : -value;
    };
    Game_Interpreter.prototype.changeHp = function (target, value, allowDeath) {
        if (target.isAlive()) {
            if (!allowDeath && target.hp <= -value) {
                value = 1 - target.hp;
            }
            target.gainHp(value);
            if (target.isDead()) {
                target.performCollapse();
            }
        }
    };
    // Show Text
    Game_Interpreter.prototype.command101 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            globals_1.$gameMessage.setFaceImage(this._params[0], this._params[1]);
            globals_1.$gameMessage.setBackground(this._params[2]);
            globals_1.$gameMessage.setPositionType(this._params[3]);
            while (this.nextEventCode() === 401) {
                // Text data
                this._index++;
                globals_1.$gameMessage.add(this.currentCommand().parameters[0]);
            }
            switch (this.nextEventCode()) {
                case 102: // Show Choices
                    this._index++;
                    this.setupChoices(this.currentCommand().parameters);
                    break;
                case 103: // Input Number
                    this._index++;
                    this.setupNumInput(this.currentCommand().parameters);
                    break;
                case 104: // Select Item
                    this._index++;
                    this.setupItemChoice(this.currentCommand().parameters);
                    break;
            }
            this._index++;
            this.setWaitMode("message");
        }
        return false;
    };
    // Show Choices
    Game_Interpreter.prototype.command102 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            this.setupChoices(this._params);
            this._index++;
            this.setWaitMode("message");
        }
        return false;
    };
    Game_Interpreter.prototype.setupChoices = function (params) {
        var _this = this;
        var choices = __spreadArray([], params[0], true);
        var cancelType = params[1];
        var defaultType = params.length > 2 ? params[2] : 0;
        var positionType = params.length > 3 ? params[3] : 2;
        var background = params.length > 4 ? params[4] : 0;
        if (cancelType >= choices.length) {
            cancelType = -2;
        }
        globals_1.$gameMessage.setChoices(choices, defaultType, cancelType);
        globals_1.$gameMessage.setChoiceBackground(background);
        globals_1.$gameMessage.setChoicePositionType(positionType);
        globals_1.$gameMessage.setChoiceCallback(function (n) {
            _this._branch[_this._indent] = n;
        });
    };
    // When [**]
    Game_Interpreter.prototype.command402 = function () {
        if (this._branch[this._indent] !== this._params[0]) {
            this.skipBranch();
        }
        return true;
    };
    // When Cancel
    Game_Interpreter.prototype.command403 = function () {
        if (this._branch[this._indent] >= 0) {
            this.skipBranch();
        }
        return true;
    };
    // Input Number
    Game_Interpreter.prototype.command103 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            this.setupNumInput(this._params);
            this._index++;
            this.setWaitMode("message");
        }
        return false;
    };
    Game_Interpreter.prototype.setupNumInput = function (params) {
        globals_1.$gameMessage.setNumberInput(params[0], params[1]);
    };
    // Select Item
    Game_Interpreter.prototype.command104 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            this.setupItemChoice(this._params);
            this._index++;
            this.setWaitMode("message");
        }
        return false;
    };
    Game_Interpreter.prototype.setupItemChoice = function (params) {
        globals_1.$gameMessage.setItemChoice(params[0], params[1] || 2);
    };
    // Show Scrolling Text
    Game_Interpreter.prototype.command105 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            globals_1.$gameMessage.setScroll(this._params[0], this._params[1]);
            while (this.nextEventCode() === 405) {
                this._index++;
                globals_1.$gameMessage.add(this.currentCommand().parameters[0]);
            }
            this._index++;
            this.setWaitMode("message");
        }
        return false;
    };
    // Comment
    Game_Interpreter.prototype.command108 = function () {
        this._comments = [this._params[0]];
        while (this.nextEventCode() === 408) {
            this._index++;
            this._comments.push(this.currentCommand().parameters[0]);
        }
        return true;
    };
    // Conditional Branch
    Game_Interpreter.prototype.command111 = function () {
        var result = false;
        switch (this._params[0]) {
            case 0: // Switch
                result = globals_1.$gameSwitches.value(this._params[1]) === (this._params[2] === 0);
                break;
            case 1: // Variable
                var value1 = globals_1.$gameVariables.value(this._params[1]);
                var value2 = void 0;
                if (this._params[2] === 0) {
                    value2 = this._params[3];
                }
                else {
                    value2 = globals_1.$gameVariables.value(this._params[3]);
                }
                switch (this._params[4]) {
                    case 0: // Equal to
                        result = value1 === value2;
                        break;
                    case 1: // Greater than or Equal to
                        result = value1 >= value2;
                        break;
                    case 2: // Less than or Equal to
                        result = value1 <= value2;
                        break;
                    case 3: // Greater than
                        result = value1 > value2;
                        break;
                    case 4: // Less than
                        result = value1 < value2;
                        break;
                    case 5: // Not Equal to
                        result = value1 !== value2;
                        break;
                }
                break;
            case 2: // Self Switch
                if (this._eventId > 0) {
                    var key = [this._mapId, this._eventId, this._params[1]];
                    result = globals_1.$gameSelfSwitches.value(key) === (this._params[2] === 0);
                }
                break;
            case 3: // Timer
                if (globals_1.$gameTimer.isWorking()) {
                    if (this._params[2] === 0) {
                        result = globals_1.$gameTimer.seconds() >= this._params[1];
                    }
                    else {
                        result = globals_1.$gameTimer.seconds() <= this._params[1];
                    }
                }
                break;
            case 4: // Actor
                var actor = globals_1.$gameActors.actor(this._params[1]);
                if (actor) {
                    var n = this._params[3];
                    switch (this._params[2]) {
                        case 0: // In the Party
                            result = Utils_1.Utils.contains(globals_1.$gameParty.members(), actor);
                            break;
                        case 1: // Name
                            result = actor.name() === n;
                            break;
                        case 2: // Class
                            result = actor.isClass(globals_1.$dataClasses[n]);
                            break;
                        case 3: // Skill
                            result = actor.hasSkill(n);
                            break;
                        case 4: // Weapon
                            result = actor.hasWeapon(globals_1.$dataWeapons[n]);
                            break;
                        case 5: // Armor
                            result = actor.hasArmor(globals_1.$dataArmors[n]);
                            break;
                        case 6: // State
                            result = actor.isStateAffected(n);
                            break;
                    }
                }
                break;
            case 5: // Enemy
                var enemy = globals_1.$gameTroop.members()[this._params[1]];
                if (enemy) {
                    switch (this._params[2]) {
                        case 0: // Appeared
                            result = enemy.isAlive();
                            break;
                        case 1: // State
                            result = enemy.isStateAffected(this._params[3]);
                            break;
                    }
                }
                break;
            case 6: // Character
                var character = this.character(this._params[1]);
                if (character) {
                    result = character.direction() === this._params[2];
                }
                break;
            case 7: // Gold
                switch (this._params[2]) {
                    case 0: // Greater than or equal to
                        result = globals_1.$gameParty.gold() >= this._params[1];
                        break;
                    case 1: // Less than or equal to
                        result = globals_1.$gameParty.gold() <= this._params[1];
                        break;
                    case 2: // Less than
                        result = globals_1.$gameParty.gold() < this._params[1];
                        break;
                }
                break;
            case 8: // Item
                result = globals_1.$gameParty.hasItem(globals_1.$dataItems[this._params[1]]);
                break;
            case 9: // Weapon
                result = globals_1.$gameParty.hasItem(globals_1.$dataWeapons[this._params[1]], this._params[2]);
                break;
            case 10: // Armor
                result = globals_1.$gameParty.hasItem(globals_1.$dataArmors[this._params[1]], this._params[2]);
                break;
            case 11: // Button
                // result = Input.isPressed(this._params[1]);
                result = false; // TODO: impl
                break;
            case 12: // Script
                // eslint-disable-next-line no-eval
                result = !!eval(this._params[1]);
                break;
            case 13: // Vehicle
                result = globals_1.$gamePlayer.vehicle() === globals_1.$gameMap.vehicle(this._params[1]);
                break;
        }
        this._branch[this._indent] = result;
        if (this._branch[this._indent] === false) {
            this.skipBranch();
        }
        return true;
    };
    // Else
    Game_Interpreter.prototype.command411 = function () {
        if (this._branch[this._indent] !== false) {
            this.skipBranch();
        }
        return true;
    };
    // Loop
    Game_Interpreter.prototype.command112 = function () {
        return true;
    };
    // Repeat Above
    Game_Interpreter.prototype.command413 = function () {
        do {
            this._index--;
        } while (this.currentCommand().indent !== this._indent);
        return true;
    };
    // Break Loop
    Game_Interpreter.prototype.command113 = function () {
        var depth = 0;
        while (this._index < this._list.length - 1) {
            this._index++;
            var command = this.currentCommand();
            if (command.code === 112)
                depth++;
            if (command.code === 413) {
                if (depth > 0)
                    depth--;
                else
                    break;
            }
        }
        return true;
    };
    // Exit Event Processing
    Game_Interpreter.prototype.command115 = function () {
        this._index = this._list.length;
        return true;
    };
    // Common Event
    Game_Interpreter.prototype.command117 = function () {
        var commonEvent = globals_1.$dataCommonEvents[this._params[0]];
        if (commonEvent) {
            var eventId = this.isOnCurrentMap() ? this._eventId : 0;
            this.setupChild(commonEvent.list, eventId);
        }
        return true;
    };
    Game_Interpreter.prototype.setupChild = function (list, eventId) {
        this._childInterpreter = new Game_Interpreter(this._depth + 1);
        this._childInterpreter.setup(list, eventId);
    };
    // Label
    Game_Interpreter.prototype.command118 = function () {
        return true;
    };
    // Jump to Label
    Game_Interpreter.prototype.command119 = function () {
        var labelName = this._params[0];
        for (var i = 0; i < this._list.length; i++) {
            var command = this._list[i];
            if (command.code === 118 && command.parameters[0] === labelName) {
                this.jumpTo(i);
                return;
            }
        }
        return true;
    };
    Game_Interpreter.prototype.jumpTo = function (index) {
        var lastIndex = this._index;
        var startIndex = Math.min(index, lastIndex);
        var endIndex = Math.max(index, lastIndex);
        var indent = this._indent;
        for (var i = startIndex; i <= endIndex; i++) {
            var newIndent = this._list[i].indent;
            if (newIndent !== indent) {
                this._branch[indent] = null;
                indent = newIndent;
            }
        }
        this._index = index;
    };
    // Control Switches
    Game_Interpreter.prototype.command121 = function () {
        for (var i = this._params[0]; i <= this._params[1]; i++) {
            globals_1.$gameSwitches.setValue(i, this._params[2] === 0);
        }
        return true;
    };
    // Control Variables
    Game_Interpreter.prototype.command122 = function () {
        var value = 0;
        switch (this._params[3] // Operand
        ) {
            case 0: // Constant
                value = this._params[4];
                break;
            case 1: // Variable
                value = globals_1.$gameVariables.value(this._params[4]);
                break;
            case 2: // Random
                value = this._params[5] - this._params[4] + 1;
                for (var i = this._params[0]; i <= this._params[1]; i++) {
                    this.operateVariable(i, this._params[2], this._params[4] + Utils_1.Utils.randomInt(value));
                }
                return true;
            // break; // Unreachable code detected.
            case 3: // Game Data
                value = this.gameDataOperand(this._params[4], this._params[5], this._params[6]);
                break;
            case 4: // Script
                // eslint-disable-next-line no-eval
                value = eval(this._params[4]);
                break;
        }
        for (var i = this._params[0]; i <= this._params[1]; i++) {
            this.operateVariable(i, this._params[2], value);
        }
        return true;
    };
    Game_Interpreter.prototype.gameDataOperand = function (type, param1, param2) {
        switch (type) {
            case 0: // Item
                return globals_1.$gameParty.numItems(globals_1.$dataItems[param1]);
            case 1: // Weapon
                return globals_1.$gameParty.numItems(globals_1.$dataWeapons[param1]);
            case 2: // Armor
                return globals_1.$gameParty.numItems(globals_1.$dataArmors[param1]);
            case 3: // Actor
                var actor = globals_1.$gameActors.actor(param1);
                if (actor) {
                    switch (param2) {
                        case 0: // Level
                            return actor.level;
                        case 1: // EXP
                            return actor.currentExp();
                        case 2: // HP
                            return actor.hp;
                        case 3: // MP
                            return actor.mp;
                        default: // Parameter
                            if (param2 >= 4 && param2 <= 11) {
                                return actor.param(param2 - 4);
                            }
                    }
                }
                break;
            case 4: // Enemy
                var enemy = globals_1.$gameTroop.members()[param1];
                if (enemy) {
                    switch (param2) {
                        case 0: // HP
                            return enemy.hp;
                        case 1: // MP
                            return enemy.mp;
                        default: // Parameter
                            if (param2 >= 2 && param2 <= 9) {
                                return enemy.param(param2 - 2);
                            }
                    }
                }
                break;
            case 5: // Character
                var character = this.character(param1);
                if (character) {
                    switch (param2) {
                        case 0: // Map X
                            return character.x;
                        case 1: // Map Y
                            return character.y;
                        case 2: // Direction
                            return character.direction();
                        case 3: // Screen X
                            return character.screenX();
                        case 4: // Screen Y
                            return character.screenY();
                    }
                }
                break;
            case 6: // Party
                actor = globals_1.$gameParty.members()[param1];
                return actor ? actor.actorId() : 0;
            case 7: // Other
                switch (param1) {
                    case 0: // Map ID
                        return globals_1.$gameMap.mapId();
                    case 1: // Party Members
                        return globals_1.$gameParty.size();
                    case 2: // Gold
                        return globals_1.$gameParty.gold();
                    case 3: // Steps
                        return globals_1.$gameParty.steps();
                    case 4: // Play Time
                        return globals_1.$gameSystem.playtime();
                    case 5: // Timer
                        return globals_1.$gameTimer.seconds();
                    case 6: // Save Count
                        return globals_1.$gameSystem.saveCount();
                    case 7: // Battle Count
                        return globals_1.$gameSystem.battleCount();
                    case 8: // Win Count
                        return globals_1.$gameSystem.winCount();
                    case 9: // Escape Count
                        return globals_1.$gameSystem.escapeCount();
                }
                break;
        }
        return 0;
    };
    Game_Interpreter.prototype.operateVariable = function (variableId, operationType, value) {
        try {
            var oldValue = globals_1.$gameVariables.value(variableId);
            switch (operationType) {
                case 0: // Set
                    globals_1.$gameVariables.setValue(variableId, (oldValue = value));
                    break;
                case 1: // Add
                    globals_1.$gameVariables.setValue(variableId, oldValue + value);
                    break;
                case 2: // Sub
                    globals_1.$gameVariables.setValue(variableId, oldValue - value);
                    break;
                case 3: // Mul
                    globals_1.$gameVariables.setValue(variableId, oldValue * value);
                    break;
                case 4: // Div
                    globals_1.$gameVariables.setValue(variableId, oldValue / value);
                    break;
                case 5: // Mod
                    globals_1.$gameVariables.setValue(variableId, oldValue % value);
                    break;
            }
        }
        catch (e) {
            globals_1.$gameVariables.setValue(variableId, 0);
        }
    };
    // Control Self Switch
    Game_Interpreter.prototype.command123 = function () {
        if (this._eventId > 0) {
            var key = [this._mapId, this._eventId, this._params[0]];
            globals_1.$gameSelfSwitches.setValue(key, this._params[1] === 0);
        }
        return true;
    };
    // Control Timer
    Game_Interpreter.prototype.command124 = function () {
        if (this._params[0] === 0) {
            // Start
            globals_1.$gameTimer.start(this._params[1] * 60);
        }
        else {
            // Stop
            globals_1.$gameTimer.stop();
        }
        return true;
    };
    // Change Gold
    Game_Interpreter.prototype.command125 = function () {
        var value = this.operateValue(this._params[0], this._params[1], this._params[2]);
        globals_1.$gameParty.gainGold(value);
        return true;
    };
    // Change Items
    Game_Interpreter.prototype.command126 = function () {
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        globals_1.$gameParty.gainItem(globals_1.$dataItems[this._params[0]], value);
        return true;
    };
    // Change Weapons
    Game_Interpreter.prototype.command127 = function () {
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        globals_1.$gameParty.gainItem(globals_1.$dataWeapons[this._params[0]], value, this._params[4]);
        return true;
    };
    // Change Armors
    Game_Interpreter.prototype.command128 = function () {
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        globals_1.$gameParty.gainItem(globals_1.$dataArmors[this._params[0]], value, this._params[4]);
        return true;
    };
    // Change Party Member
    Game_Interpreter.prototype.command129 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            if (this._params[1] === 0) {
                // Add
                if (this._params[2]) {
                    // Initialize
                    globals_1.$gameActors.actor(this._params[0]).setup(this._params[0]);
                }
                globals_1.$gameParty.addActor(this._params[0]);
            }
            else {
                // Remove
                globals_1.$gameParty.removeActor(this._params[0]);
            }
        }
        return true;
    };
    // Change Battle BGM
    Game_Interpreter.prototype.command132 = function () {
        globals_1.$gameSystem.setBattleBgm(this._params[0]);
        return true;
    };
    // Change Victory ME
    Game_Interpreter.prototype.command133 = function () {
        globals_1.$gameSystem.setVictoryMe(this._params[0]);
        return true;
    };
    // Change Save Access
    Game_Interpreter.prototype.command134 = function () {
        if (this._params[0] === 0) {
            globals_1.$gameSystem.disableSave();
        }
        else {
            globals_1.$gameSystem.enableSave();
        }
        return true;
    };
    // Change Menu Access
    Game_Interpreter.prototype.command135 = function () {
        if (this._params[0] === 0) {
            globals_1.$gameSystem.disableMenu();
        }
        else {
            globals_1.$gameSystem.enableMenu();
        }
        return true;
    };
    // Change Encounter Disable
    Game_Interpreter.prototype.command136 = function () {
        if (this._params[0] === 0) {
            globals_1.$gameSystem.disableEncounter();
        }
        else {
            globals_1.$gameSystem.enableEncounter();
        }
        globals_1.$gamePlayer.makeEncounterCount();
        return true;
    };
    // Change Formation Access
    Game_Interpreter.prototype.command137 = function () {
        if (this._params[0] === 0) {
            globals_1.$gameSystem.disableFormation();
        }
        else {
            globals_1.$gameSystem.enableFormation();
        }
        return true;
    };
    // Change Window Color
    Game_Interpreter.prototype.command138 = function () {
        globals_1.$gameSystem.setWindowTone(this._params[0]);
        return true;
    };
    // Change Defeat ME
    Game_Interpreter.prototype.command139 = function () {
        globals_1.$gameSystem.setDefeatMe(this._params[0]);
        return true;
    };
    // Change Vehicle BGM
    Game_Interpreter.prototype.command140 = function () {
        var vehicle = globals_1.$gameMap.vehicle(this._params[0]);
        if (vehicle) {
            vehicle.setBgm(this._params[1]);
        }
        return true;
    };
    // Transfer Player
    Game_Interpreter.prototype.command201 = function () {
        if (!globals_1.$gameParty.inBattle() && !globals_1.$gameMessage.isBusy()) {
            var mapId = void 0;
            var x = void 0;
            var y = void 0;
            if (this._params[0] === 0) {
                // Direct designation
                mapId = this._params[1];
                x = this._params[2];
                y = this._params[3];
            }
            else {
                // Designation with variables
                mapId = globals_1.$gameVariables.value(this._params[1]);
                x = globals_1.$gameVariables.value(this._params[2]);
                y = globals_1.$gameVariables.value(this._params[3]);
            }
            globals_1.$gamePlayer.reserveTransfer(mapId, x, y, this._params[4], this._params[5]);
            this.setWaitMode("transfer");
            this._index++;
        }
        return false;
    };
    // Set Vehicle Location
    Game_Interpreter.prototype.command202 = function () {
        var mapId;
        var x;
        var y;
        if (this._params[1] === 0) {
            // Direct designation
            mapId = this._params[2];
            x = this._params[3];
            y = this._params[4];
        }
        else {
            // Designation with variables
            mapId = globals_1.$gameVariables.value(this._params[2]);
            x = globals_1.$gameVariables.value(this._params[3]);
            y = globals_1.$gameVariables.value(this._params[4]);
        }
        var vehicle = globals_1.$gameMap.vehicle(this._params[0]);
        if (vehicle) {
            vehicle.setLocation(mapId, x, y);
        }
        return true;
    };
    // Set Event Location
    Game_Interpreter.prototype.command203 = function () {
        var character = this.character(this._params[0]);
        if (character) {
            if (this._params[1] === 0) {
                // Direct designation
                character.locate(this._params[2], this._params[3]);
            }
            else if (this._params[1] === 1) {
                // Designation with variables
                var x = globals_1.$gameVariables.value(this._params[2]);
                var y = globals_1.$gameVariables.value(this._params[3]);
                character.locate(x, y);
            }
            else {
                // Exchange with another event
                var character2 = this.character(this._params[2]);
                if (character2) {
                    character.swap(character2);
                }
            }
            if (this._params[4] > 0) {
                character.setDirection(this._params[4]);
            }
        }
        return true;
    };
    // Scroll Map
    Game_Interpreter.prototype.command204 = function () {
        if (!globals_1.$gameParty.inBattle()) {
            if (globals_1.$gameMap.isScrolling()) {
                this.setWaitMode("scroll");
                return false;
            }
            globals_1.$gameMap.startScroll(this._params[0], this._params[1], this._params[2]);
        }
        return true;
    };
    // Set Movement Route
    Game_Interpreter.prototype.command205 = function () {
        globals_1.$gameMap.refreshIfNeeded();
        this._character = this.character(this._params[0]);
        if (this._character) {
            this._character.forceMoveRoute(this._params[1]);
            if (this._params[1].wait) {
                this.setWaitMode("route");
            }
        }
        return true;
    };
    // Getting On and Off Vehicles
    Game_Interpreter.prototype.command206 = function () {
        globals_1.$gamePlayer.getOnOffVehicle();
        return true;
    };
    // Change Transparency
    Game_Interpreter.prototype.command211 = function () {
        globals_1.$gamePlayer.setTransparent(this._params[0] === 0);
        return true;
    };
    // Show Animation
    Game_Interpreter.prototype.command212 = function () {
        this._character = this.character(this._params[0]);
        if (this._character) {
            this._character.requestAnimation(this._params[1]);
            if (this._params[2]) {
                this.setWaitMode("animation");
            }
        }
        return true;
    };
    // Show Balloon Icon
    Game_Interpreter.prototype.command213 = function () {
        this._character = this.character(this._params[0]);
        if (this._character) {
            this._character.requestBalloon(this._params[1]);
            if (this._params[2]) {
                this.setWaitMode("balloon");
            }
        }
        return true;
    };
    // Erase Event
    Game_Interpreter.prototype.command214 = function () {
        if (this.isOnCurrentMap() && this._eventId > 0) {
            globals_1.$gameMap.eraseEvent(this._eventId);
        }
        return true;
    };
    // Change Player Followers
    Game_Interpreter.prototype.command216 = function () {
        if (this._params[0] === 0) {
            globals_1.$gamePlayer.showFollowers();
        }
        else {
            globals_1.$gamePlayer.hideFollowers();
        }
        globals_1.$gamePlayer.refresh();
        return true;
    };
    // Gather Followers
    Game_Interpreter.prototype.command217 = function () {
        if (!globals_1.$gameParty.inBattle()) {
            globals_1.$gamePlayer.gatherFollowers();
            this.setWaitMode("gather");
        }
        return true;
    };
    // Fadeout Screen
    Game_Interpreter.prototype.command221 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            globals_1.$gameScreen.startFadeOut(this.fadeSpeed());
            this.wait(this.fadeSpeed());
            this._index++;
        }
        return false;
    };
    // Fadein Screen
    Game_Interpreter.prototype.command222 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            globals_1.$gameScreen.startFadeIn(this.fadeSpeed());
            this.wait(this.fadeSpeed());
            this._index++;
        }
        return false;
    };
    // Tint Screen
    Game_Interpreter.prototype.command223 = function () {
        globals_1.$gameScreen.startTint(this._params[0], this._params[1]);
        if (this._params[2]) {
            this.wait(this._params[1]);
        }
        return true;
    };
    // Flash Screen
    Game_Interpreter.prototype.command224 = function () {
        globals_1.$gameScreen.startFlash(this._params[0], this._params[1]);
        if (this._params[2]) {
            this.wait(this._params[1]);
        }
        return true;
    };
    // Shake Screen
    Game_Interpreter.prototype.command225 = function () {
        globals_1.$gameScreen.startShake(this._params[0], this._params[1], this._params[2]);
        if (this._params[3]) {
            this.wait(this._params[2]);
        }
        return true;
    };
    // Wait
    Game_Interpreter.prototype.command230 = function () {
        this.wait(this._params[0]);
        return true;
    };
    // Show Picture
    Game_Interpreter.prototype.command231 = function () {
        var x;
        var y;
        if (this._params[3] === 0) {
            // Direct designation
            x = this._params[4];
            y = this._params[5];
        }
        else {
            // Designation with variables
            x = globals_1.$gameVariables.value(this._params[4]);
            y = globals_1.$gameVariables.value(this._params[5]);
        }
        globals_1.$gameScreen.showPicture(this._params[0], this._params[1], this._params[2], x, y, this._params[6], this._params[7], this._params[8], this._params[9]);
        return true;
    };
    // Move Picture
    Game_Interpreter.prototype.command232 = function () {
        var x;
        var y;
        if (this._params[3] === 0) {
            // Direct designation
            x = this._params[4];
            y = this._params[5];
        }
        else {
            // Designation with variables
            x = globals_1.$gameVariables.value(this._params[4]);
            y = globals_1.$gameVariables.value(this._params[5]);
        }
        globals_1.$gameScreen.movePicture(this._params[0], this._params[2], x, y, this._params[6], this._params[7], this._params[8], this._params[9], this._params[10]);
        if (this._params[11]) {
            this.wait(this._params[10]);
        }
        return true;
    };
    // Rotate Picture
    Game_Interpreter.prototype.command233 = function () {
        globals_1.$gameScreen.rotatePicture(this._params[0], this._params[1]);
        return true;
    };
    // Tint Picture
    Game_Interpreter.prototype.command234 = function () {
        globals_1.$gameScreen.tintPicture(this._params[0], this._params[1], this._params[2]);
        if (this._params[3]) {
            this.wait(this._params[2]);
        }
        return true;
    };
    // Erase Picture
    Game_Interpreter.prototype.command235 = function () {
        globals_1.$gameScreen.erasePicture(this._params[0]);
        return true;
    };
    // Set Weather Effect
    Game_Interpreter.prototype.command236 = function () {
        if (!globals_1.$gameParty.inBattle()) {
            globals_1.$gameScreen.changeWeather(this._params[0], this._params[1], this._params[2]);
            if (this._params[3]) {
                this.wait(this._params[2]);
            }
        }
        return true;
    };
    // Play BGM
    Game_Interpreter.prototype.command241 = function () {
        AudioManager_1.AudioManager.playBgm(this._params[0]);
        return true;
    };
    // Fadeout BGM
    Game_Interpreter.prototype.command242 = function () {
        AudioManager_1.AudioManager.fadeOutBgm(this._params[0]);
        return true;
    };
    // Save BGM
    Game_Interpreter.prototype.command243 = function () {
        globals_1.$gameSystem.saveBgm();
        return true;
    };
    // Resume BGM
    Game_Interpreter.prototype.command244 = function () {
        globals_1.$gameSystem.replayBgm();
        return true;
    };
    // Play BGS
    Game_Interpreter.prototype.command245 = function () {
        AudioManager_1.AudioManager.playBgs(this._params[0]);
        return true;
    };
    // Fadeout BGS
    Game_Interpreter.prototype.command246 = function () {
        AudioManager_1.AudioManager.fadeOutBgs(this._params[0]);
        return true;
    };
    // Play ME
    Game_Interpreter.prototype.command249 = function () {
        AudioManager_1.AudioManager.playMe(this._params[0]);
        return true;
    };
    // Play SE
    Game_Interpreter.prototype.command250 = function () {
        AudioManager_1.AudioManager.playSe(this._params[0]);
        return true;
    };
    // Stop SE
    Game_Interpreter.prototype.command251 = function () {
        AudioManager_1.AudioManager.stopSe();
        return true;
    };
    // Play Movie
    Game_Interpreter.prototype.command261 = function () {
        if (!globals_1.$gameMessage.isBusy()) {
            var name = this._params[0];
            if (name.length > 0) {
                var ext = this.videoFileExt();
                Graphics_1.Graphics.playVideo("movies/" + name + ext);
                this.setWaitMode("video");
            }
            this._index++;
        }
        return false;
    };
    Game_Interpreter.prototype.videoFileExt = function () {
        if (Graphics_1.Graphics.canPlayVideoType("video/webm") && !Utils_1.Utils.isMobileDevice()) {
            return ".webm";
        }
        else {
            return ".mp4";
        }
    };
    // Change Map Name Display
    Game_Interpreter.prototype.command281 = function () {
        if (this._params[0] === 0) {
            globals_1.$gameMap.enableNameDisplay();
        }
        else {
            globals_1.$gameMap.disableNameDisplay();
        }
        return true;
    };
    // Change Tileset
    Game_Interpreter.prototype.command282 = function () {
        var _this = this;
        var tileset = globals_1.$dataTilesets[this._params[0]];
        if (!this._imageReservationId) {
            this._imageReservationId = Utils_1.Utils.generateRuntimeId();
        }
        var allReady = tileset.tilesetNames
            .map(function (tilesetName) {
            return ImageManager_1.ImageManager.reserveTileset(tilesetName, 0, _this._imageReservationId);
        })
            .every(function (bitmap) { return bitmap.isReady(); });
        if (allReady) {
            globals_1.$gameMap.changeTileset(this._params[0]);
            ImageManager_1.ImageManager.releaseReservation(this._imageReservationId);
            this._imageReservationId = null;
            return true;
        }
        else {
            return false;
        }
    };
    // Change Battle Back
    Game_Interpreter.prototype.command283 = function () {
        globals_1.$gameMap.changeBattleback(this._params[0], this._params[1]);
        return true;
    };
    // Change Parallax
    Game_Interpreter.prototype.command284 = function () {
        globals_1.$gameMap.changeParallax(this._params[0], this._params[1], this._params[2], this._params[3], this._params[4]);
        return true;
    };
    // Get Location Info
    Game_Interpreter.prototype.command285 = function () {
        var x;
        var y;
        var value;
        if (this._params[2] === 0) {
            // Direct designation
            x = this._params[3];
            y = this._params[4];
        }
        else {
            // Designation with variables
            x = globals_1.$gameVariables.value(this._params[3]);
            y = globals_1.$gameVariables.value(this._params[4]);
        }
        switch (this._params[1]) {
            case 0: // Terrain Tag
                value = globals_1.$gameMap.terrainTag(x, y);
                break;
            case 1: // Event ID
                value = globals_1.$gameMap.eventIdXy(x, y);
                break;
            case 2: // Tile ID (Layer 1)
            case 3: // Tile ID (Layer 2)
            case 4: // Tile ID (Layer 3)
            case 5: // Tile ID (Layer 4)
                value = globals_1.$gameMap.tileId(x, y, this._params[1] - 2);
                break;
            default: // Region ID
                value = globals_1.$gameMap.regionId(x, y);
                break;
        }
        globals_1.$gameVariables.setValue(this._params[0], value);
        return true;
    };
    // Battle Processing
    Game_Interpreter.prototype.command301 = function () {
        var _this = this;
        if (!globals_1.$gameParty.inBattle()) {
            var troopId = void 0;
            if (this._params[0] === 0) {
                // Direct designation
                troopId = this._params[1];
            }
            else if (this._params[0] === 1) {
                // Designation with a variable
                troopId = globals_1.$gameVariables.value(this._params[1]);
            }
            else {
                // Same as Random Encounter
                troopId = globals_1.$gamePlayer.makeEncounterTroopId();
            }
            if (globals_1.$dataTroops[troopId]) {
                BattleManager_1.BattleManager.setup(troopId, this._params[2], this._params[3]);
                BattleManager_1.BattleManager.setEventCallback(function (n) {
                    _this._branch[_this._indent] = n;
                });
                globals_1.$gamePlayer.makeEncounterCount();
                SceneManager_1.SceneManager.push(SceneBattle_1.Scene_Battle);
            }
        }
        return true;
    };
    // If Win
    Game_Interpreter.prototype.command601 = function () {
        if (this._branch[this._indent] !== 0) {
            this.skipBranch();
        }
        return true;
    };
    // If Escape
    Game_Interpreter.prototype.command602 = function () {
        if (this._branch[this._indent] !== 1) {
            this.skipBranch();
        }
        return true;
    };
    // If Lose
    Game_Interpreter.prototype.command603 = function () {
        if (this._branch[this._indent] !== 2) {
            this.skipBranch();
        }
        return true;
    };
    // Shop Processing
    Game_Interpreter.prototype.command302 = function () {
        if (!globals_1.$gameParty.inBattle()) {
            var goods = [this._params];
            while (this.nextEventCode() === 605) {
                this._index++;
                goods.push(this.currentCommand().parameters);
            }
            SceneManager_1.SceneManager.push(SceneShop_1.Scene_Shop);
            SceneManager_1.SceneManager.prepareNextScene(goods, this._params[4]);
        }
        return true;
    };
    // Name Input Processing
    Game_Interpreter.prototype.command303 = function () {
        // 名前入力も今の所サポートしていないのでコメントアウト
        // if (!$gameParty.inBattle()) {
        // 	if ($dataActors[this._params[0]]) {
        // 		SceneManager_.push(Scene_Name);
        // 		SceneManager_.prepareNextScene(this._params[0], this._params[1]);
        // 	}
        // }
        return true;
    };
    // Change HP
    Game_Interpreter.prototype.command311 = function () {
        var _this = this;
        var value = this.operateValue(this._params[2], this._params[3], this._params[4]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            _this.changeHp(actor, value, _this._params[5]);
        });
        return true;
    };
    // Change MP
    Game_Interpreter.prototype.command312 = function () {
        var value = this.operateValue(this._params[2], this._params[3], this._params[4]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.gainMp(value);
        });
        return true;
    };
    // Change TP
    Game_Interpreter.prototype.command326 = function () {
        var value = this.operateValue(this._params[2], this._params[3], this._params[4]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.gainTp(value);
        });
        return true;
    };
    // Change State
    Game_Interpreter.prototype.command313 = function () {
        var _this = this;
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            var alreadyDead = actor.isDead();
            if (_this._params[2] === 0) {
                actor.addState(_this._params[3]);
            }
            else {
                actor.removeState(_this._params[3]);
            }
            if (actor.isDead() && !alreadyDead) {
                actor.performCollapse();
            }
            actor.clearResult();
        });
        return true;
    };
    // Recover All
    Game_Interpreter.prototype.command314 = function () {
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.recoverAll();
        });
        return true;
    };
    // Change EXP
    Game_Interpreter.prototype.command315 = function () {
        var _this = this;
        var value = this.operateValue(this._params[2], this._params[3], this._params[4]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.changeExp(actor.currentExp() + value, _this._params[5]);
        });
        return true;
    };
    // Change Level
    Game_Interpreter.prototype.command316 = function () {
        var _this = this;
        var value = this.operateValue(this._params[2], this._params[3], this._params[4]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.changeLevel(actor.level + value, _this._params[5]);
        });
        return true;
    };
    // Change Parameter
    Game_Interpreter.prototype.command317 = function () {
        var _this = this;
        var value = this.operateValue(this._params[3], this._params[4], this._params[5]);
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            actor.addParam(_this._params[2], value);
        });
        return true;
    };
    // Change Skill
    Game_Interpreter.prototype.command318 = function () {
        var _this = this;
        this.iterateActorEx(this._params[0], this._params[1], function (actor) {
            if (_this._params[2] === 0) {
                actor.learnSkill(_this._params[3]);
            }
            else {
                actor.forgetSkill(_this._params[3]);
            }
        });
        return true;
    };
    // Change Equipment
    Game_Interpreter.prototype.command319 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            actor.changeEquipById(this._params[1], this._params[2]);
        }
        return true;
    };
    // Change Name
    Game_Interpreter.prototype.command320 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            actor.setName(this._params[1]);
        }
        return true;
    };
    // Change Class
    Game_Interpreter.prototype.command321 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor && globals_1.$dataClasses[this._params[1]]) {
            actor.changeClass(this._params[1], this._params[2]);
        }
        return true;
    };
    // Change Actor Images
    Game_Interpreter.prototype.command322 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            actor.setCharacterImage(this._params[1], this._params[2]);
            actor.setFaceImage(this._params[3], this._params[4]);
            actor.setBattlerImage(this._params[5]);
        }
        globals_1.$gamePlayer.refresh();
        return true;
    };
    // Change Vehicle Image
    Game_Interpreter.prototype.command323 = function () {
        var vehicle = globals_1.$gameMap.vehicle(this._params[0]);
        if (vehicle) {
            vehicle.setImage(this._params[1], this._params[2]);
        }
        return true;
    };
    // Change Nickname
    Game_Interpreter.prototype.command324 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            actor.setNickname(this._params[1]);
        }
        return true;
    };
    // Change Profile
    Game_Interpreter.prototype.command325 = function () {
        var actor = globals_1.$gameActors.actor(this._params[0]);
        if (actor) {
            actor.setProfile(this._params[1]);
        }
        return true;
    };
    // Change Enemy HP
    Game_Interpreter.prototype.command331 = function () {
        var _this = this;
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            _this.changeHp(enemy, value, _this._params[4]);
        });
        return true;
    };
    // Change Enemy MP
    Game_Interpreter.prototype.command332 = function () {
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            enemy.gainMp(value);
        });
        return true;
    };
    // Change Enemy TP
    Game_Interpreter.prototype.command342 = function () {
        var value = this.operateValue(this._params[1], this._params[2], this._params[3]);
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            enemy.gainTp(value);
        });
        return true;
    };
    // Change Enemy State
    Game_Interpreter.prototype.command333 = function () {
        var _this = this;
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            var alreadyDead = enemy.isDead();
            if (_this._params[1] === 0) {
                enemy.addState(_this._params[2]);
            }
            else {
                enemy.removeState(_this._params[2]);
            }
            if (enemy.isDead() && !alreadyDead) {
                enemy.performCollapse();
            }
            enemy.clearResult();
        });
        return true;
    };
    // Enemy Recover All
    Game_Interpreter.prototype.command334 = function () {
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            enemy.recoverAll();
        });
        return true;
    };
    // Enemy Appear
    Game_Interpreter.prototype.command335 = function () {
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            enemy.appear();
            globals_1.$gameTroop.makeUniqueNames();
        });
        return true;
    };
    // Enemy Transform
    Game_Interpreter.prototype.command336 = function () {
        var _this = this;
        this.iterateEnemyIndex(this._params[0], function (enemy) {
            enemy.transform(_this._params[1]);
            globals_1.$gameTroop.makeUniqueNames();
        });
        return true;
    };
    // Show Battle Animation
    Game_Interpreter.prototype.command337 = function () {
        var _this = this;
        if (this._params[2] === true) {
            this.iterateEnemyIndex(-1, function (enemy) {
                if (enemy.isAlive()) {
                    enemy.startAnimation(_this._params[1], false, 0);
                }
            });
        }
        else {
            this.iterateEnemyIndex(this._params[0], function (enemy) {
                if (enemy.isAlive()) {
                    enemy.startAnimation(_this._params[1], false, 0);
                }
            });
        }
        return true;
    };
    // Force Action
    Game_Interpreter.prototype.command339 = function () {
        var _this = this;
        this.iterateBattler(this._params[0], this._params[1], function (battler) {
            if (!battler.isDeathStateAffected()) {
                battler.forceAction(_this._params[2], _this._params[3]);
                BattleManager_1.BattleManager.forceAction(battler);
                _this.setWaitMode("action");
            }
        });
        return true;
    };
    // Abort Battle
    Game_Interpreter.prototype.command340 = function () {
        BattleManager_1.BattleManager.abort();
        return true;
    };
    // Open Menu Screen
    Game_Interpreter.prototype.command351 = function () {
        if (!globals_1.$gameParty.inBattle()) {
            SceneManager_1.SceneManager.push(SceneMenu_1.Scene_Menu);
            WindowMenuCommand_1.Window_MenuCommand.initCommandPosition();
        }
        return true;
    };
    // Open Save Screen
    Game_Interpreter.prototype.command352 = function () {
        // セーブ機能は今の所サポートしていないのでコメントアウト
        // if (!$gameParty.inBattle()) {
        // 	SceneManager_.push(Scene_Save);
        // }
        return true;
    };
    // Game Over
    Game_Interpreter.prototype.command353 = function () {
        SceneManager_1.SceneManager.goto(SceneGameOver_1.Scene_Gameover);
        return true;
    };
    // Return to Title Screen
    Game_Interpreter.prototype.command354 = function () {
        SceneManager_1.SceneManager.goto(SceneTitle_1.Scene_Title);
        return true;
    };
    // Script
    Game_Interpreter.prototype.command355 = function () {
        var script = this.currentCommand().parameters[0] + "\n";
        while (this.nextEventCode() === 655) {
            this._index++;
            script += this.currentCommand().parameters[0] + "\n";
        }
        // eslint-disable-next-line no-eval
        eval(script);
        return true;
    };
    // Plugin Command
    Game_Interpreter.prototype.command356 = function () {
        var args = this._params[0].split(" ");
        var command = args.shift();
        this.pluginCommand(command, args);
        return true;
    };
    Game_Interpreter.prototype.pluginCommand = function (_command, _args) {
        // to be overridden by plugins
    };
    return Game_Interpreter;
}());
exports.Game_Interpreter = Game_Interpreter;

},{"../core/Graphics":14,"../core/JsonEx":17,"../core/Tilemap":23,"../core/TouchInput":27,"../core/Utils":28,"../managers/AudioManager":33,"../managers/BattleManager":34,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"../scenes/SceneBattle":75,"../scenes/SceneGameOver":80,"../scenes/SceneMenu":85,"../scenes/SceneShop":89,"../scenes/SceneTitle":92,"../windows/WindowMenuCommand":134,"./GameCharacter":50}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Item = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var Game_Item = /** @class */ (function () {
    function Game_Item(item) {
        this.initialize(item);
    }
    Game_Item.prototype.initialize = function (item) {
        this._dataClass = "";
        this._itemId = 0;
        if (item) {
            this.setObject(item);
        }
    };
    Game_Item.prototype.isSkill = function () {
        return this._dataClass === "skill";
    };
    Game_Item.prototype.isItem = function () {
        return this._dataClass === "item";
    };
    Game_Item.prototype.isUsableItem = function () {
        return this.isSkill() || this.isItem();
    };
    Game_Item.prototype.isWeapon = function () {
        return this._dataClass === "weapon";
    };
    Game_Item.prototype.isArmor = function () {
        return this._dataClass === "armor";
    };
    Game_Item.prototype.isEquipItem = function () {
        return this.isWeapon() || this.isArmor();
    };
    Game_Item.prototype.isNull = function () {
        return this._dataClass === "";
    };
    Game_Item.prototype.itemId = function () {
        return this._itemId;
    };
    Game_Item.prototype.object = function () {
        if (this.isSkill()) {
            return globals_1.$dataSkills[this._itemId];
        }
        else if (this.isItem()) {
            return globals_1.$dataItems[this._itemId];
        }
        else if (this.isWeapon()) {
            return globals_1.$dataWeapons[this._itemId];
        }
        else if (this.isArmor()) {
            return globals_1.$dataArmors[this._itemId];
        }
        else {
            return null;
        }
    };
    Game_Item.prototype.setObject = function (item) {
        if (DataManager_1.DataManager.isSkill(item)) {
            this._dataClass = "skill";
        }
        else if (DataManager_1.DataManager.isItem(item)) {
            this._dataClass = "item";
        }
        else if (DataManager_1.DataManager.isWeapon(item)) {
            this._dataClass = "weapon";
        }
        else if (DataManager_1.DataManager.isArmor(item)) {
            this._dataClass = "armor";
        }
        else {
            this._dataClass = "";
        }
        this._itemId = item ? item.id : 0;
    };
    Game_Item.prototype.setEquip = function (isWeapon, itemId) {
        this._dataClass = isWeapon ? "weapon" : "armor";
        this._itemId = itemId;
    };
    return Game_Item;
}());
exports.Game_Item = Game_Item;

},{"../managers/DataManager":36,"../managers/globals":43}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Map = void 0;
var Graphics_1 = require("../core/Graphics");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var GameCommonEvent_1 = require("./GameCommonEvent");
var GameEvent_1 = require("./GameEvent");
var GameInterpreter_1 = require("./GameInterpreter");
var GameVehicle_1 = require("./GameVehicle");
var Game_Map = /** @class */ (function () {
    function Game_Map() {
        this.initialize();
    }
    Game_Map.prototype.initialize = function () {
        this._interpreter = new GameInterpreter_1.Game_Interpreter();
        this._mapId = 0;
        this._tilesetId = 0;
        this._events = [];
        this._commonEvents = [];
        this._vehicles = [];
        this._displayX = 0;
        this._displayY = 0;
        this._nameDisplay = true;
        this._scrollDirection = 2;
        this._scrollRest = 0;
        this._scrollSpeed = 4;
        this._parallaxName = "";
        this._parallaxZero = false;
        this._parallaxLoopX = false;
        this._parallaxLoopY = false;
        this._parallaxSx = 0;
        this._parallaxSy = 0;
        this._parallaxX = 0;
        this._parallaxY = 0;
        this._battleback1Name = null;
        this._battleback2Name = null;
        this.createVehicles();
    };
    Game_Map.prototype.setup = function (mapId) {
        if (!globals_1.$dataMap) {
            throw new Error("The map data is not available");
        }
        this._mapId = mapId;
        this._tilesetId = globals_1.$dataMap.tilesetId;
        this._displayX = 0;
        this._displayY = 0;
        this.refereshVehicles();
        this.setupEvents();
        this.setupScroll();
        this.setupParallax();
        this.setupBattleback();
        this._needsRefresh = false;
    };
    Game_Map.prototype.isEventRunning = function () {
        return this._interpreter.isRunning() || this.isAnyEventStarting();
    };
    Game_Map.prototype.tileWidth = function () {
        return 48;
    };
    Game_Map.prototype.tileHeight = function () {
        return 48;
    };
    Game_Map.prototype.mapId = function () {
        return this._mapId;
    };
    Game_Map.prototype.tilesetId = function () {
        return this._tilesetId;
    };
    Game_Map.prototype.displayX = function () {
        return this._displayX;
    };
    Game_Map.prototype.displayY = function () {
        return this._displayY;
    };
    Game_Map.prototype.parallaxName = function () {
        return this._parallaxName;
    };
    Game_Map.prototype.battleback1Name = function () {
        return this._battleback1Name;
    };
    Game_Map.prototype.battleback2Name = function () {
        return this._battleback2Name;
    };
    Game_Map.prototype.requestRefresh = function (_mapId) {
        this._needsRefresh = true;
    };
    Game_Map.prototype.isNameDisplayEnabled = function () {
        return this._nameDisplay;
    };
    Game_Map.prototype.disableNameDisplay = function () {
        this._nameDisplay = false;
    };
    Game_Map.prototype.enableNameDisplay = function () {
        this._nameDisplay = true;
    };
    Game_Map.prototype.createVehicles = function () {
        this._vehicles = [];
        this._vehicles[0] = new GameVehicle_1.Game_Vehicle("boat");
        this._vehicles[1] = new GameVehicle_1.Game_Vehicle("ship");
        this._vehicles[2] = new GameVehicle_1.Game_Vehicle("airship");
    };
    Game_Map.prototype.refereshVehicles = function () {
        this._vehicles.forEach(function (vehicle) {
            vehicle.refresh();
        });
    };
    Game_Map.prototype.vehicles = function () {
        return this._vehicles;
    };
    Game_Map.prototype.vehicle = function (type) {
        if (type === 0 || type === "boat") {
            return this.boat();
        }
        else if (type === 1 || type === "ship") {
            return this.ship();
        }
        else if (type === 2 || type === "airship") {
            return this.airship();
        }
        else {
            return null;
        }
    };
    Game_Map.prototype.boat = function () {
        return this._vehicles[0];
    };
    Game_Map.prototype.ship = function () {
        return this._vehicles[1];
    };
    Game_Map.prototype.airship = function () {
        return this._vehicles[2];
    };
    Game_Map.prototype.setupEvents = function () {
        this._events = [];
        for (var i = 0; i < globals_1.$dataMap.events.length; i++) {
            if (globals_1.$dataMap.events[i]) {
                this._events[i] = new GameEvent_1.Game_Event(this._mapId, i);
            }
        }
        this._commonEvents = this.parallelCommonEvents().map(function (commonEvent) {
            return new GameCommonEvent_1.Game_CommonEvent(commonEvent.id);
        });
        this.refreshTileEvents();
    };
    Game_Map.prototype.events = function () {
        return this._events.filter(function (event) {
            return !!event;
        });
    };
    Game_Map.prototype.event = function (eventId) {
        return this._events[eventId];
    };
    Game_Map.prototype.eraseEvent = function (eventId) {
        this._events[eventId].erase();
    };
    Game_Map.prototype.parallelCommonEvents = function () {
        return globals_1.$dataCommonEvents.filter(function (commonEvent) {
            return commonEvent && commonEvent.trigger === 2;
        });
    };
    Game_Map.prototype.setupScroll = function () {
        this._scrollDirection = 2;
        this._scrollRest = 0;
        this._scrollSpeed = 4;
    };
    Game_Map.prototype.setupParallax = function () {
        this._parallaxName = globals_1.$dataMap.parallaxName || "";
        this._parallaxZero = ImageManager_1.ImageManager.isZeroParallax(this._parallaxName);
        this._parallaxLoopX = globals_1.$dataMap.parallaxLoopX;
        this._parallaxLoopY = globals_1.$dataMap.parallaxLoopY;
        this._parallaxSx = globals_1.$dataMap.parallaxSx;
        this._parallaxSy = globals_1.$dataMap.parallaxSy;
        this._parallaxX = 0;
        this._parallaxY = 0;
    };
    Game_Map.prototype.setupBattleback = function () {
        if (globals_1.$dataMap.specifyBattleback) {
            this._battleback1Name = globals_1.$dataMap.battleback1Name;
            this._battleback2Name = globals_1.$dataMap.battleback2Name;
        }
        else {
            this._battleback1Name = null;
            this._battleback2Name = null;
        }
    };
    Game_Map.prototype.setDisplayPos = function (x, y) {
        if (this.isLoopHorizontal()) {
            this._displayX = Utils_1.Utils.mod(x, this.width());
            this._parallaxX = x;
        }
        else {
            var endX = this.width() - this.screenTileX();
            this._displayX = endX < 0 ? endX / 2 : Utils_1.Utils.clamp(x, 0, endX);
            this._parallaxX = this._displayX;
        }
        if (this.isLoopVertical()) {
            this._displayY = Utils_1.Utils.mod(y, this.height());
            this._parallaxY = y;
        }
        else {
            var endY = this.height() - this.screenTileY();
            this._displayY = endY < 0 ? endY / 2 : Utils_1.Utils.clamp(y, 0, endY);
            this._parallaxY = this._displayY;
        }
    };
    Game_Map.prototype.parallaxOx = function () {
        if (this._parallaxZero) {
            return this._parallaxX * this.tileWidth();
        }
        else if (this._parallaxLoopX) {
            return (this._parallaxX * this.tileWidth()) / 2;
        }
        else {
            return 0;
        }
    };
    Game_Map.prototype.parallaxOy = function () {
        if (this._parallaxZero) {
            return this._parallaxY * this.tileHeight();
        }
        else if (this._parallaxLoopY) {
            return (this._parallaxY * this.tileHeight()) / 2;
        }
        else {
            return 0;
        }
    };
    Game_Map.prototype.tileset = function () {
        return globals_1.$dataTilesets[this._tilesetId];
    };
    Game_Map.prototype.tilesetFlags = function () {
        var tileset = this.tileset();
        if (tileset) {
            return tileset.flags;
        }
        else {
            return [];
        }
    };
    Game_Map.prototype.displayName = function () {
        return globals_1.$dataMap.displayName;
    };
    Game_Map.prototype.width = function () {
        return globals_1.$dataMap.width;
    };
    Game_Map.prototype.height = function () {
        return globals_1.$dataMap.height;
    };
    Game_Map.prototype.data = function () {
        return globals_1.$dataMap.data;
    };
    Game_Map.prototype.isLoopHorizontal = function () {
        return globals_1.$dataMap.scrollType === 2 || globals_1.$dataMap.scrollType === 3;
    };
    Game_Map.prototype.isLoopVertical = function () {
        return globals_1.$dataMap.scrollType === 1 || globals_1.$dataMap.scrollType === 3;
    };
    Game_Map.prototype.isDashDisabled = function () {
        return globals_1.$dataMap.disableDashing;
    };
    Game_Map.prototype.encounterList = function () {
        return globals_1.$dataMap.encounterList;
    };
    Game_Map.prototype.encounterStep = function () {
        return globals_1.$dataMap.encounterStep;
    };
    Game_Map.prototype.isOverworld = function () {
        return this.tileset() && this.tileset().mode === 0;
    };
    Game_Map.prototype.screenTileX = function () {
        return Graphics_1.Graphics.width / this.tileWidth();
    };
    Game_Map.prototype.screenTileY = function () {
        return Graphics_1.Graphics.height / this.tileHeight();
    };
    Game_Map.prototype.adjustX = function (x) {
        if (this.isLoopHorizontal() && x < this._displayX - (this.width() - this.screenTileX()) / 2) {
            return x - this._displayX + globals_1.$dataMap.width;
        }
        else {
            return x - this._displayX;
        }
    };
    Game_Map.prototype.adjustY = function (y) {
        if (this.isLoopVertical() && y < this._displayY - (this.height() - this.screenTileY()) / 2) {
            return y - this._displayY + globals_1.$dataMap.height;
        }
        else {
            return y - this._displayY;
        }
    };
    Game_Map.prototype.roundX = function (x) {
        return this.isLoopHorizontal() ? Utils_1.Utils.mod(x, this.width()) : x;
    };
    Game_Map.prototype.roundY = function (y) {
        return this.isLoopVertical() ? Utils_1.Utils.mod(y, this.height()) : y;
    };
    Game_Map.prototype.xWithDirection = function (x, d) {
        return x + (d === 6 ? 1 : d === 4 ? -1 : 0);
    };
    Game_Map.prototype.yWithDirection = function (y, d) {
        return y + (d === 2 ? 1 : d === 8 ? -1 : 0);
    };
    Game_Map.prototype.roundXWithDirection = function (x, d) {
        return this.roundX(x + (d === 6 ? 1 : d === 4 ? -1 : 0));
    };
    Game_Map.prototype.roundYWithDirection = function (y, d) {
        return this.roundY(y + (d === 2 ? 1 : d === 8 ? -1 : 0));
    };
    Game_Map.prototype.deltaX = function (x1, x2) {
        var result = x1 - x2;
        if (this.isLoopHorizontal() && Math.abs(result) > this.width() / 2) {
            if (result < 0) {
                result += this.width();
            }
            else {
                result -= this.width();
            }
        }
        return result;
    };
    Game_Map.prototype.deltaY = function (y1, y2) {
        var result = y1 - y2;
        if (this.isLoopVertical() && Math.abs(result) > this.height() / 2) {
            if (result < 0) {
                result += this.height();
            }
            else {
                result -= this.height();
            }
        }
        return result;
    };
    Game_Map.prototype.distance = function (x1, y1, x2, y2) {
        return Math.abs(this.deltaX(x1, x2)) + Math.abs(this.deltaY(y1, y2));
    };
    Game_Map.prototype.canvasToMapX = function (x) {
        var tileWidth = this.tileWidth();
        var originX = this._displayX * tileWidth;
        var mapX = Math.floor((originX + x) / tileWidth);
        return this.roundX(mapX);
    };
    Game_Map.prototype.canvasToMapY = function (y) {
        var tileHeight = this.tileHeight();
        var originY = this._displayY * tileHeight;
        var mapY = Math.floor((originY + y) / tileHeight);
        return this.roundY(mapY);
    };
    Game_Map.prototype.autoplay = function () {
        if (globals_1.$dataMap.autoplayBgm) {
            if (globals_1.$gamePlayer.isInVehicle()) {
                globals_1.$gameSystem.saveWalkingBgm2();
            }
            else {
                AudioManager_1.AudioManager.playBgm(globals_1.$dataMap.bgm);
            }
        }
        if (globals_1.$dataMap.autoplayBgs) {
            AudioManager_1.AudioManager.playBgs(globals_1.$dataMap.bgs);
        }
    };
    Game_Map.prototype.refreshIfNeeded = function () {
        if (this._needsRefresh) {
            this.refresh();
        }
    };
    Game_Map.prototype.refresh = function () {
        this.events().forEach(function (event) {
            event.refresh();
        });
        this._commonEvents.forEach(function (event) {
            event.refresh();
        });
        this.refreshTileEvents();
        this._needsRefresh = false;
    };
    Game_Map.prototype.refreshTileEvents = function () {
        this.tileEvents = this.events().filter(function (event) {
            return event.isTile();
        });
    };
    Game_Map.prototype.eventsXy = function (x, y) {
        return this.events().filter(function (event) {
            return event.pos(x, y);
        });
    };
    Game_Map.prototype.eventsXyNt = function (x, y) {
        return this.events().filter(function (event) {
            return event.posNt(x, y);
        });
    };
    Game_Map.prototype.tileEventsXy = function (x, y) {
        return this.tileEvents.filter(function (event) {
            return event.posNt(x, y);
        });
    };
    Game_Map.prototype.eventIdXy = function (x, y) {
        var list = this.eventsXy(x, y);
        return list.length === 0 ? 0 : list[0].eventId();
    };
    Game_Map.prototype.scrollDown = function (distance) {
        if (this.isLoopVertical()) {
            this._displayY += distance;
            this._displayY %= globals_1.$dataMap.height;
            if (this._parallaxLoopY) {
                this._parallaxY += distance;
            }
        }
        else if (this.height() >= this.screenTileY()) {
            var lastY = this._displayY;
            this._displayY = Math.min(this._displayY + distance, this.height() - this.screenTileY());
            this._parallaxY += this._displayY - lastY;
        }
    };
    Game_Map.prototype.scrollLeft = function (distance) {
        if (this.isLoopHorizontal()) {
            this._displayX += globals_1.$dataMap.width - distance;
            this._displayX %= globals_1.$dataMap.width;
            if (this._parallaxLoopX) {
                this._parallaxX -= distance;
            }
        }
        else if (this.width() >= this.screenTileX()) {
            var lastX = this._displayX;
            this._displayX = Math.max(this._displayX - distance, 0);
            this._parallaxX += this._displayX - lastX;
        }
    };
    Game_Map.prototype.scrollRight = function (distance) {
        if (this.isLoopHorizontal()) {
            this._displayX += distance;
            this._displayX %= globals_1.$dataMap.width;
            if (this._parallaxLoopX) {
                this._parallaxX += distance;
            }
        }
        else if (this.width() >= this.screenTileX()) {
            var lastX = this._displayX;
            this._displayX = Math.min(this._displayX + distance, this.width() - this.screenTileX());
            this._parallaxX += this._displayX - lastX;
        }
    };
    Game_Map.prototype.scrollUp = function (distance) {
        if (this.isLoopVertical()) {
            this._displayY += globals_1.$dataMap.height - distance;
            this._displayY %= globals_1.$dataMap.height;
            if (this._parallaxLoopY) {
                this._parallaxY -= distance;
            }
        }
        else if (this.height() >= this.screenTileY()) {
            var lastY = this._displayY;
            this._displayY = Math.max(this._displayY - distance, 0);
            this._parallaxY += this._displayY - lastY;
        }
    };
    Game_Map.prototype.isValid = function (x, y) {
        return x >= 0 && x < this.width() && y >= 0 && y < this.height();
    };
    Game_Map.prototype.checkPassage = function (x, y, bit) {
        var flags = this.tilesetFlags();
        var tiles = this.allTiles(x, y);
        for (var i = 0; i < tiles.length; i++) {
            var flag = flags[tiles[i]];
            if ((flag & 0x10) !== 0)
                // [*] No effect on passage
                continue;
            if ((flag & bit) === 0)
                // [o] Passable
                return true;
            if ((flag & bit) === bit)
                // [x] Impassable
                return false;
        }
        return false;
    };
    Game_Map.prototype.tileId = function (x, y, z) {
        var width = globals_1.$dataMap.width;
        var height = globals_1.$dataMap.height;
        return globals_1.$dataMap.data[(z * height + y) * width + x] || 0;
    };
    Game_Map.prototype.layeredTiles = function (x, y) {
        var tiles = [];
        for (var i = 0; i < 4; i++) {
            tiles.push(this.tileId(x, y, 3 - i));
        }
        return tiles;
    };
    Game_Map.prototype.allTiles = function (x, y) {
        var tiles = this.tileEventsXy(x, y).map(function (event) {
            return event.tileId();
        });
        return tiles.concat(this.layeredTiles(x, y));
    };
    Game_Map.prototype.autotileType = function (x, y, z) {
        var tileId = this.tileId(x, y, z);
        return tileId >= 2048 ? Math.floor((tileId - 2048) / 48) : -1;
    };
    Game_Map.prototype.isPassable = function (x, y, d) {
        return this.checkPassage(x, y, (1 << (d / 2 - 1)) & 0x0f);
    };
    Game_Map.prototype.isBoatPassable = function (x, y) {
        return this.checkPassage(x, y, 0x0200);
    };
    Game_Map.prototype.isShipPassable = function (x, y) {
        return this.checkPassage(x, y, 0x0400);
    };
    Game_Map.prototype.isAirshipLandOk = function (x, y) {
        return this.checkPassage(x, y, 0x0800) && this.checkPassage(x, y, 0x0f);
    };
    Game_Map.prototype.checkLayeredTilesFlags = function (x, y, bit) {
        var flags = this.tilesetFlags();
        return this.layeredTiles(x, y).some(function (tileId) {
            return (flags[tileId] & bit) !== 0;
        });
    };
    Game_Map.prototype.isLadder = function (x, y) {
        return this.isValid(x, y) && this.checkLayeredTilesFlags(x, y, 0x20);
    };
    Game_Map.prototype.isBush = function (x, y) {
        return this.isValid(x, y) && this.checkLayeredTilesFlags(x, y, 0x40);
    };
    Game_Map.prototype.isCounter = function (x, y) {
        return this.isValid(x, y) && this.checkLayeredTilesFlags(x, y, 0x80);
    };
    Game_Map.prototype.isDamageFloor = function (x, y) {
        return this.isValid(x, y) && this.checkLayeredTilesFlags(x, y, 0x100);
    };
    Game_Map.prototype.terrainTag = function (x, y) {
        if (this.isValid(x, y)) {
            var flags = this.tilesetFlags();
            var tiles = this.layeredTiles(x, y);
            for (var i = 0; i < tiles.length; i++) {
                var tag = flags[tiles[i]] >> 12;
                if (tag > 0) {
                    return tag;
                }
            }
        }
        return 0;
    };
    Game_Map.prototype.regionId = function (x, y) {
        return this.isValid(x, y) ? this.tileId(x, y, 5) : 0;
    };
    Game_Map.prototype.startScroll = function (direction, distance, speed) {
        this._scrollDirection = direction;
        this._scrollRest = distance;
        this._scrollSpeed = speed;
    };
    Game_Map.prototype.isScrolling = function () {
        return this._scrollRest > 0;
    };
    Game_Map.prototype.update = function (sceneActive) {
        this.refreshIfNeeded();
        if (sceneActive) {
            this.updateInterpreter();
        }
        this.updateScroll();
        this.updateEvents();
        this.updateVehicles();
        this.updateParallax();
    };
    Game_Map.prototype.updateScroll = function () {
        if (this.isScrolling()) {
            var lastX = this._displayX;
            var lastY = this._displayY;
            this.doScroll(this._scrollDirection, this.scrollDistance());
            if (this._displayX === lastX && this._displayY === lastY) {
                this._scrollRest = 0;
            }
            else {
                this._scrollRest -= this.scrollDistance();
            }
        }
    };
    Game_Map.prototype.scrollDistance = function () {
        return Math.pow(2, this._scrollSpeed) / 256;
    };
    Game_Map.prototype.doScroll = function (direction, distance) {
        switch (direction) {
            case 2:
                this.scrollDown(distance);
                break;
            case 4:
                this.scrollLeft(distance);
                break;
            case 6:
                this.scrollRight(distance);
                break;
            case 8:
                this.scrollUp(distance);
                break;
        }
    };
    Game_Map.prototype.updateEvents = function () {
        this.events().forEach(function (event) {
            event.update();
        });
        this._commonEvents.forEach(function (event) {
            event.update();
        });
    };
    Game_Map.prototype.updateVehicles = function () {
        this._vehicles.forEach(function (vehicle) {
            vehicle.update();
        });
    };
    Game_Map.prototype.updateParallax = function () {
        if (this._parallaxLoopX) {
            this._parallaxX += this._parallaxSx / this.tileWidth() / 2;
        }
        if (this._parallaxLoopY) {
            this._parallaxY += this._parallaxSy / this.tileHeight() / 2;
        }
    };
    Game_Map.prototype.changeTileset = function (tilesetId) {
        this._tilesetId = tilesetId;
        this.refresh();
    };
    Game_Map.prototype.changeBattleback = function (battleback1Name, battleback2Name) {
        this._battleback1Name = battleback1Name;
        this._battleback2Name = battleback2Name;
    };
    Game_Map.prototype.changeParallax = function (name, loopX, loopY, sx, sy) {
        this._parallaxName = name;
        this._parallaxZero = ImageManager_1.ImageManager.isZeroParallax(this._parallaxName);
        if (this._parallaxLoopX && !loopX) {
            this._parallaxX = 0;
        }
        if (this._parallaxLoopY && !loopY) {
            this._parallaxY = 0;
        }
        this._parallaxLoopX = loopX;
        this._parallaxLoopY = loopY;
        this._parallaxSx = sx;
        this._parallaxSy = sy;
    };
    Game_Map.prototype.updateInterpreter = function () {
        for (;;) {
            this._interpreter.update();
            if (this._interpreter.isRunning()) {
                return;
            }
            if (this._interpreter.eventId() > 0) {
                this.unlockEvent(this._interpreter.eventId());
                this._interpreter.clear();
            }
            if (!this.setupStartingEvent()) {
                return;
            }
        }
    };
    Game_Map.prototype.unlockEvent = function (eventId) {
        if (this._events[eventId]) {
            this._events[eventId].unlock();
        }
    };
    Game_Map.prototype.setupStartingEvent = function () {
        this.refreshIfNeeded();
        if (this._interpreter.setupReservedCommonEvent()) {
            return true;
        }
        if (this.setupTestEvent()) {
            return true;
        }
        if (this.setupStartingMapEvent()) {
            return true;
        }
        if (this.setupAutorunCommonEvent()) {
            return true;
        }
        return false;
    };
    Game_Map.prototype.setupTestEvent = function () {
        if (globals_1.$testEvent) {
            this._interpreter.setup(globals_1.$testEvent, 0);
            // TODO: 代入できないのでなんとかする
            // $testEvent は DataManager.$testEvent への参照でだから代入しても意味がない、というエラーかと
            // $testEvent = null;
            return true;
        }
        return false;
    };
    Game_Map.prototype.setupStartingMapEvent = function () {
        var events = this.events();
        for (var i = 0; i < events.length; i++) {
            var event = events[i];
            if (event.isStarting()) {
                event.clearStartingFlag();
                this._interpreter.setup(event.list(), event.eventId());
                return true;
            }
        }
        return false;
    };
    Game_Map.prototype.setupAutorunCommonEvent = function () {
        for (var i = 0; i < globals_1.$dataCommonEvents.length; i++) {
            var event = globals_1.$dataCommonEvents[i];
            if (event && event.trigger === 1 && globals_1.$gameSwitches.value(event.switchId)) {
                this._interpreter.setup(event.list);
                return true;
            }
        }
        return false;
    };
    Game_Map.prototype.isAnyEventStarting = function () {
        return this.events().some(function (event) {
            return event.isStarting();
        });
    };
    return Game_Map;
}());
exports.Game_Map = Game_Map;
(0, globals_1.set$gameMapFactory)(function () {
    return new Game_Map();
});

},{"../core/Graphics":14,"../core/Utils":28,"../managers/AudioManager":33,"../managers/ImageManager":37,"../managers/globals":43,"./GameCommonEvent":52,"./GameEvent":54,"./GameInterpreter":57,"./GameVehicle":73}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Message = void 0;
var globals_1 = require("../managers/globals");
var Game_Message = /** @class */ (function () {
    function Game_Message() {
        this.initialize();
    }
    Game_Message.prototype.initialize = function () {
        this.clear();
    };
    Game_Message.prototype.clear = function () {
        this._texts = [];
        this._choices = [];
        this._faceName = "";
        this._faceIndex = 0;
        this._background = 0;
        this._positionType = 2;
        this._choiceDefaultType = 0;
        this._choiceCancelType = 0;
        this._choiceBackground = 0;
        this._choicePositionType = 2;
        this._numInputVariableId = 0;
        this._numInputMaxDigits = 0;
        this._itemChoiceVariableId = 0;
        this._itemChoiceItypeId = 0;
        this._scrollMode = false;
        this._scrollSpeed = 2;
        this._scrollNoFast = false;
        this._choiceCallback = null;
    };
    Game_Message.prototype.choices = function () {
        return this._choices;
    };
    Game_Message.prototype.faceName = function () {
        return this._faceName;
    };
    Game_Message.prototype.faceIndex = function () {
        return this._faceIndex;
    };
    Game_Message.prototype.background = function () {
        return this._background;
    };
    Game_Message.prototype.positionType = function () {
        return this._positionType;
    };
    Game_Message.prototype.choiceDefaultType = function () {
        return this._choiceDefaultType;
    };
    Game_Message.prototype.choiceCancelType = function () {
        return this._choiceCancelType;
    };
    Game_Message.prototype.choiceBackground = function () {
        return this._choiceBackground;
    };
    Game_Message.prototype.choicePositionType = function () {
        return this._choicePositionType;
    };
    Game_Message.prototype.numInputVariableId = function () {
        return this._numInputVariableId;
    };
    Game_Message.prototype.numInputMaxDigits = function () {
        return this._numInputMaxDigits;
    };
    Game_Message.prototype.itemChoiceVariableId = function () {
        return this._itemChoiceVariableId;
    };
    Game_Message.prototype.itemChoiceItypeId = function () {
        return this._itemChoiceItypeId;
    };
    Game_Message.prototype.scrollMode = function () {
        return this._scrollMode;
    };
    Game_Message.prototype.scrollSpeed = function () {
        return this._scrollSpeed;
    };
    Game_Message.prototype.scrollNoFast = function () {
        return this._scrollNoFast;
    };
    Game_Message.prototype.add = function (text) {
        this._texts.push(text);
    };
    Game_Message.prototype.setFaceImage = function (faceName, faceIndex) {
        this._faceName = faceName;
        this._faceIndex = faceIndex;
    };
    Game_Message.prototype.setBackground = function (background) {
        this._background = background;
    };
    Game_Message.prototype.setPositionType = function (positionType) {
        this._positionType = positionType;
    };
    Game_Message.prototype.setChoices = function (choices, defaultType, cancelType) {
        this._choices = choices;
        this._choiceDefaultType = defaultType;
        this._choiceCancelType = cancelType;
    };
    Game_Message.prototype.setChoiceBackground = function (background) {
        this._choiceBackground = background;
    };
    Game_Message.prototype.setChoicePositionType = function (positionType) {
        this._choicePositionType = positionType;
    };
    Game_Message.prototype.setNumberInput = function (variableId, maxDigits) {
        this._numInputVariableId = variableId;
        this._numInputMaxDigits = maxDigits;
    };
    Game_Message.prototype.setItemChoice = function (variableId, itemType) {
        this._itemChoiceVariableId = variableId;
        this._itemChoiceItypeId = itemType;
    };
    Game_Message.prototype.setScroll = function (speed, noFast) {
        this._scrollMode = true;
        this._scrollSpeed = speed;
        this._scrollNoFast = noFast;
    };
    Game_Message.prototype.setChoiceCallback = function (callback) {
        this._choiceCallback = callback;
    };
    Game_Message.prototype.onChoice = function (n) {
        if (this._choiceCallback) {
            this._choiceCallback(n);
            this._choiceCallback = null;
        }
    };
    Game_Message.prototype.hasText = function () {
        return this._texts.length > 0;
    };
    Game_Message.prototype.isChoice = function () {
        return this._choices.length > 0;
    };
    Game_Message.prototype.isNumberInput = function () {
        return this._numInputVariableId > 0;
    };
    Game_Message.prototype.isItemChoice = function () {
        return this._itemChoiceVariableId > 0;
    };
    Game_Message.prototype.isBusy = function () {
        return this.hasText() || this.isChoice() || this.isNumberInput() || this.isItemChoice();
    };
    Game_Message.prototype.newPage = function () {
        if (this._texts.length > 0) {
            this._texts[this._texts.length - 1] += "\f";
        }
    };
    Game_Message.prototype.allText = function () {
        return this._texts.join("\n");
    };
    return Game_Message;
}());
exports.Game_Message = Game_Message;
(0, globals_1.set$gameMessageFactory)(function () {
    return new Game_Message();
});

},{"../managers/globals":43}],61:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Party = void 0;
var Utils_1 = require("../core/Utils");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var TextManager_1 = require("../managers/TextManager");
var GameItem_1 = require("./GameItem");
var GameUnit_1 = require("./GameUnit");
var Game_Party = /** @class */ (function (_super) {
    __extends(Game_Party, _super);
    function Game_Party() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Party.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Game_Party.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._gold = 0;
        this._steps = 0;
        this._lastItem = new GameItem_1.Game_Item();
        this._menuActorId = 0;
        this._targetActorId = 0;
        this._actors = [];
        this.initAllItems();
    };
    Game_Party.prototype.initAllItems = function () {
        this._items = {};
        this._weapons = {};
        this._armors = {};
    };
    Game_Party.prototype.exists = function () {
        return this._actors.length > 0;
    };
    Game_Party.prototype.size = function () {
        return this.members().length;
    };
    Game_Party.prototype.isEmpty = function () {
        return this.size() === 0;
    };
    Game_Party.prototype.members = function () {
        return this.inBattle() ? this.battleMembers() : this.allMembers();
    };
    Game_Party.prototype.allMembers = function () {
        return this._actors.map(function (id) {
            return globals_1.$gameActors.actor(id);
        });
    };
    Game_Party.prototype.battleMembers = function () {
        return this.allMembers()
            .slice(0, this.maxBattleMembers())
            .filter(function (actor) {
            return actor.isAppeared();
        });
    };
    Game_Party.prototype.maxBattleMembers = function () {
        return 4;
    };
    Game_Party.prototype.leader = function () {
        return this.battleMembers()[0];
    };
    Game_Party.prototype.reviveBattleMembers = function () {
        this.battleMembers().forEach(function (actor) {
            if (actor.isDead()) {
                actor.setHp(1);
            }
        });
    };
    Game_Party.prototype.items = function () {
        var list = [];
        for (var id in this._items) {
            if (this._items.hasOwnProperty(id)) {
                list.push(globals_1.$dataItems[id]);
            }
        }
        return list;
    };
    Game_Party.prototype.weapons = function () {
        var list = [];
        for (var id in this._weapons) {
            if (this._weapons.hasOwnProperty(id)) {
                list.push(globals_1.$dataWeapons[id]);
            }
        }
        return list;
    };
    Game_Party.prototype.armors = function () {
        var list = [];
        for (var id in this._armors) {
            if (this._armors.hasOwnProperty(id)) {
                list.push(globals_1.$dataArmors[id]);
            }
        }
        return list;
    };
    Game_Party.prototype.equipItems = function () {
        return this.weapons().concat(this.armors());
    };
    Game_Party.prototype.allItems = function () {
        return this.items().concat(this.equipItems());
    };
    Game_Party.prototype.itemContainer = function (item) {
        if (!item) {
            return null;
        }
        else if (DataManager_1.DataManager.isItem(item)) {
            return this._items;
        }
        else if (DataManager_1.DataManager.isWeapon(item)) {
            return this._weapons;
        }
        else if (DataManager_1.DataManager.isArmor(item)) {
            return this._armors;
        }
        else {
            return null;
        }
    };
    Game_Party.prototype.setupStartingMembers = function () {
        var _this = this;
        this._actors = [];
        globals_1.$dataSystem.partyMembers.forEach(function (actorId) {
            if (globals_1.$gameActors.actor(actorId)) {
                _this._actors.push(actorId);
            }
        });
    };
    Game_Party.prototype.name = function () {
        var numBattleMembers = this.battleMembers().length;
        if (numBattleMembers === 0) {
            return "";
        }
        else if (numBattleMembers === 1) {
            return this.leader().name();
        }
        else {
            return Utils_1.Utils.format(TextManager_1.TextManager.partyName, this.leader().name());
        }
    };
    Game_Party.prototype.setupBattleTest = function () {
        this.setupBattleTestMembers();
        this.setupBattleTestItems();
    };
    Game_Party.prototype.setupBattleTestMembers = function () {
        var _this = this;
        globals_1.$dataSystem.testBattlers.forEach(function (battler) {
            var actor = globals_1.$gameActors.actor(battler.actorId);
            if (actor) {
                actor.changeLevel(battler.level, false);
                actor.initEquips(battler.equips);
                actor.recoverAll();
                _this.addActor(battler.actorId);
            }
        });
    };
    Game_Party.prototype.setupBattleTestItems = function () {
        var _this = this;
        globals_1.$dataItems.forEach(function (item) {
            if (item && item.name.length > 0) {
                _this.gainItem(item, _this.maxItems(item));
            }
        });
    };
    Game_Party.prototype.highestLevel = function () {
        return Math.max.apply(null, this.members().map(function (actor) {
            return actor.level;
        }));
    };
    Game_Party.prototype.addActor = function (actorId) {
        if ( /* !this._actors.contains(actorId)*/this._actors.indexOf(actorId) < 0) {
            this._actors.push(actorId);
            globals_1.$gamePlayer.refresh();
            globals_1.$gameMap.requestRefresh();
        }
    };
    Game_Party.prototype.removeActor = function (actorId) {
        if ( /* this._actors.contains(actorId)*/this._actors.indexOf(actorId) >= 0) {
            this._actors.splice(this._actors.indexOf(actorId), 1);
            globals_1.$gamePlayer.refresh();
            globals_1.$gameMap.requestRefresh();
        }
    };
    Game_Party.prototype.gold = function () {
        return this._gold;
    };
    Game_Party.prototype.gainGold = function (amount) {
        this._gold = Utils_1.Utils.clamp(0, Math.min(this._gold + amount), this.maxGold());
    };
    Game_Party.prototype.loseGold = function (amount) {
        this.gainGold(-amount);
    };
    Game_Party.prototype.maxGold = function () {
        return 99999999;
    };
    Game_Party.prototype.steps = function () {
        return this._steps;
    };
    Game_Party.prototype.increaseSteps = function () {
        this._steps++;
    };
    Game_Party.prototype.numItems = function (item) {
        var container = this.itemContainer(item);
        return container ? container[item.id] || 0 : 0;
    };
    Game_Party.prototype.maxItems = function (_item) {
        return 99;
    };
    Game_Party.prototype.hasMaxItems = function (item) {
        return this.numItems(item) >= this.maxItems(item);
    };
    Game_Party.prototype.hasItem = function (item, includeEquip) {
        if (includeEquip === undefined) {
            includeEquip = false;
        }
        if (this.numItems(item) > 0) {
            return true;
        }
        else if (includeEquip && this.isAnyMemberEquipped(item)) {
            return true;
        }
        else {
            return false;
        }
    };
    Game_Party.prototype.isAnyMemberEquipped = function (item) {
        return this.members().some(function (actor) {
            return Utils_1.Utils.contains(actor.equips(), item);
        });
    };
    Game_Party.prototype.gainItem = function (item, amount, includeEquip) {
        var container = this.itemContainer(item);
        if (container) {
            var lastNumber = this.numItems(item);
            var newNumber = lastNumber + amount;
            container[item.id] = Utils_1.Utils.clamp(newNumber, 0, this.maxItems(item));
            if (container[item.id] === 0) {
                delete container[item.id];
            }
            if (includeEquip && newNumber < 0) {
                this.discardMembersEquip(item, -newNumber);
            }
            globals_1.$gameMap.requestRefresh();
        }
    };
    Game_Party.prototype.discardMembersEquip = function (item, amount) {
        var n = amount;
        this.members().forEach(function (actor) {
            while (n > 0 && actor.isEquipped(item)) {
                actor.discardEquip(item);
                n--;
            }
        });
    };
    Game_Party.prototype.loseItem = function (item, amount, includeEquip) {
        this.gainItem(item, -amount, includeEquip);
    };
    Game_Party.prototype.consumeItem = function (item) {
        if (DataManager_1.DataManager.isItem(item) && item.consumable) {
            this.loseItem(item, 1);
        }
    };
    Game_Party.prototype.canUse = function (item) {
        return this.members().some(function (actor) {
            return actor.canUse(item);
        });
    };
    Game_Party.prototype.canInput = function () {
        return this.members().some(function (actor) {
            return actor.canInput();
        });
    };
    Game_Party.prototype.isAllDead = function () {
        if ( /* Game_Unit.prototype.isAllDead.call(this)*/_super.prototype.isAllDead.call(this)) {
            return this.inBattle() || !this.isEmpty();
        }
        else {
            return false;
        }
    };
    Game_Party.prototype.onPlayerWalk = function () {
        this.members().forEach(function (actor) {
            return actor.onPlayerWalk();
        });
    };
    Game_Party.prototype.menuActor = function () {
        var actor = globals_1.$gameActors.actor(this._menuActorId);
        if ( /* !this.members().contains(actor)*/this.members().indexOf(actor) < 0) {
            actor = this.members()[0];
        }
        return actor;
    };
    Game_Party.prototype.setMenuActor = function (actor) {
        this._menuActorId = actor.actorId();
    };
    Game_Party.prototype.makeMenuActorNext = function () {
        var index = this.members().indexOf(this.menuActor());
        if (index >= 0) {
            index = (index + 1) % this.members().length;
            this.setMenuActor(this.members()[index]);
        }
        else {
            this.setMenuActor(this.members()[0]);
        }
    };
    Game_Party.prototype.makeMenuActorPrevious = function () {
        var index = this.members().indexOf(this.menuActor());
        if (index >= 0) {
            index = (index + this.members().length - 1) % this.members().length;
            this.setMenuActor(this.members()[index]);
        }
        else {
            this.setMenuActor(this.members()[0]);
        }
    };
    Game_Party.prototype.targetActor = function () {
        var actor = globals_1.$gameActors.actor(this._targetActorId);
        if ( /* !this.members().contains(actor)*/this.members().indexOf(actor) < 0) {
            actor = this.members()[0];
        }
        return actor;
    };
    Game_Party.prototype.setTargetActor = function (actor) {
        this._targetActorId = actor.actorId();
    };
    Game_Party.prototype.lastItem = function () {
        return this._lastItem.object();
    };
    Game_Party.prototype.setLastItem = function (item) {
        this._lastItem.setObject(item);
    };
    Game_Party.prototype.swapOrder = function (index1, index2) {
        var temp = this._actors[index1];
        this._actors[index1] = this._actors[index2];
        this._actors[index2] = temp;
        globals_1.$gamePlayer.refresh();
    };
    Game_Party.prototype.charactersForSavefile = function () {
        return this.battleMembers().map(function (actor) {
            return [actor.characterName(), actor.characterIndex()];
        });
    };
    Game_Party.prototype.facesForSavefile = function () {
        return this.battleMembers().map(function (actor) {
            return [actor.faceName(), actor.faceIndex()];
        });
    };
    Game_Party.prototype.partyAbility = function (abilityId) {
        return this.battleMembers().some(function (actor) {
            return actor.partyAbility(abilityId);
        });
    };
    Game_Party.prototype.hasEncounterHalf = function () {
        return this.partyAbility(Game_Party.ABILITY_ENCOUNTER_HALF);
    };
    Game_Party.prototype.hasEncounterNone = function () {
        return this.partyAbility(Game_Party.ABILITY_ENCOUNTER_NONE);
    };
    Game_Party.prototype.hasCancelSurprise = function () {
        return this.partyAbility(Game_Party.ABILITY_CANCEL_SURPRISE);
    };
    Game_Party.prototype.hasRaisePreemptive = function () {
        return this.partyAbility(Game_Party.ABILITY_RAISE_PREEMPTIVE);
    };
    Game_Party.prototype.hasGoldDouble = function () {
        return this.partyAbility(Game_Party.ABILITY_GOLD_DOUBLE);
    };
    Game_Party.prototype.hasDropItemDouble = function () {
        return this.partyAbility(Game_Party.ABILITY_DROP_ITEM_DOUBLE);
    };
    Game_Party.prototype.ratePreemptive = function (troopAgi) {
        var rate = this.agility() >= troopAgi ? 0.05 : 0.03;
        if (this.hasRaisePreemptive()) {
            rate *= 4;
        }
        return rate;
    };
    Game_Party.prototype.rateSurprise = function (troopAgi) {
        var rate = this.agility() >= troopAgi ? 0.03 : 0.05;
        if (this.hasCancelSurprise()) {
            rate = 0;
        }
        return rate;
    };
    Game_Party.prototype.performVictory = function () {
        this.members().forEach(function (actor) {
            actor.performVictory();
        });
    };
    Game_Party.prototype.performEscape = function () {
        this.members().forEach(function (actor) {
            actor.performEscape();
        });
    };
    Game_Party.prototype.removeBattleStates = function () {
        this.members().forEach(function (actor) {
            actor.removeBattleStates();
        });
    };
    Game_Party.prototype.requestMotionRefresh = function () {
        this.members().forEach(function (actor) {
            actor.requestMotionRefresh();
        });
    };
    Game_Party.ABILITY_ENCOUNTER_HALF = 0;
    Game_Party.ABILITY_ENCOUNTER_NONE = 1;
    Game_Party.ABILITY_CANCEL_SURPRISE = 2;
    Game_Party.ABILITY_RAISE_PREEMPTIVE = 3;
    Game_Party.ABILITY_GOLD_DOUBLE = 4;
    Game_Party.ABILITY_DROP_ITEM_DOUBLE = 5;
    return Game_Party;
}(GameUnit_1.Game_Unit));
exports.Game_Party = Game_Party;
(0, globals_1.set$gamePartyFactory)(function () {
    return new Game_Party();
});

},{"../core/Utils":28,"../managers/DataManager":36,"../managers/TextManager":42,"../managers/globals":43,"./GameItem":58,"./GameUnit":71}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Picture = void 0;
var Utils_1 = require("../core/Utils");
var Game_Picture = /** @class */ (function () {
    function Game_Picture() {
        this.initialize();
    }
    Game_Picture.prototype.initialize = function () {
        this.initBasic();
        this.initTarget();
        this.initTone();
        this.initRotation();
    };
    Game_Picture.prototype.name = function () {
        return this._name;
    };
    Game_Picture.prototype.origin = function () {
        return this._origin;
    };
    Game_Picture.prototype.x = function () {
        return this._x;
    };
    Game_Picture.prototype.y = function () {
        return this._y;
    };
    Game_Picture.prototype.scaleX = function () {
        return this._scaleX;
    };
    Game_Picture.prototype.scaleY = function () {
        return this._scaleY;
    };
    Game_Picture.prototype.opacity = function () {
        return this._opacity;
    };
    Game_Picture.prototype.blendMode = function () {
        return this._blendMode;
    };
    Game_Picture.prototype.tone = function () {
        return this._tone;
    };
    Game_Picture.prototype.angle = function () {
        return this._angle;
    };
    Game_Picture.prototype.initBasic = function () {
        this._name = "";
        this._origin = 0;
        this._x = 0;
        this._y = 0;
        this._scaleX = 100;
        this._scaleY = 100;
        this._opacity = 255;
        this._blendMode = 0;
    };
    Game_Picture.prototype.initTarget = function () {
        this._targetX = this._x;
        this._targetY = this._y;
        this._targetScaleX = this._scaleX;
        this._targetScaleY = this._scaleY;
        this._targetOpacity = this._opacity;
        this._duration = 0;
    };
    Game_Picture.prototype.initTone = function () {
        this._tone = null;
        this._toneTarget = null;
        this._toneDuration = 0;
    };
    Game_Picture.prototype.initRotation = function () {
        this._angle = 0;
        this._rotationSpeed = 0;
    };
    Game_Picture.prototype.show = function (name, origin, x, y, scaleX, scaleY, opacity, blendMode) {
        this._name = name;
        this._origin = origin;
        this._x = x;
        this._y = y;
        this._scaleX = scaleX;
        this._scaleY = scaleY;
        this._opacity = opacity;
        this._blendMode = blendMode;
        this.initTarget();
        this.initTone();
        this.initRotation();
    };
    Game_Picture.prototype.move = function (origin, x, y, scaleX, scaleY, opacity, blendMode, duration) {
        this._origin = origin;
        this._targetX = x;
        this._targetY = y;
        this._targetScaleX = scaleX;
        this._targetScaleY = scaleY;
        this._targetOpacity = opacity;
        this._blendMode = blendMode;
        this._duration = duration;
    };
    Game_Picture.prototype.rotate = function (speed) {
        this._rotationSpeed = speed;
    };
    Game_Picture.prototype.tint = function (tone, duration) {
        if (!this._tone) {
            this._tone = [0, 0, 0, 0];
        }
        this._toneTarget = Utils_1.Utils.cloneArray(tone);
        this._toneDuration = duration;
        if (this._toneDuration === 0) {
            this._tone = Utils_1.Utils.cloneArray(this._toneTarget);
        }
    };
    Game_Picture.prototype.erase = function () {
        this._name = "";
        this._origin = 0;
        this.initTarget();
        this.initTone();
        this.initRotation();
    };
    Game_Picture.prototype.update = function () {
        this.updateMove();
        this.updateTone();
        this.updateRotation();
    };
    Game_Picture.prototype.updateMove = function () {
        if (this._duration > 0) {
            var d = this._duration;
            this._x = (this._x * (d - 1) + this._targetX) / d;
            this._y = (this._y * (d - 1) + this._targetY) / d;
            this._scaleX = (this._scaleX * (d - 1) + this._targetScaleX) / d;
            this._scaleY = (this._scaleY * (d - 1) + this._targetScaleY) / d;
            this._opacity = (this._opacity * (d - 1) + this._targetOpacity) / d;
            this._duration--;
        }
    };
    Game_Picture.prototype.updateTone = function () {
        if (this._toneDuration > 0) {
            var d = this._toneDuration;
            for (var i = 0; i < 4; i++) {
                this._tone[i] = (this._tone[i] * (d - 1) + this._toneTarget[i]) / d;
            }
            this._toneDuration--;
        }
    };
    Game_Picture.prototype.updateRotation = function () {
        if (this._rotationSpeed !== 0) {
            this._angle += this._rotationSpeed / 2;
        }
    };
    return Game_Picture;
}());
exports.Game_Picture = Game_Picture;

},{"../core/Utils":28}],63:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Player = void 0;
var Graphics_1 = require("../core/Graphics");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var BattleManager_1 = require("../managers/BattleManager");
var globals_1 = require("../managers/globals");
var GameCharacter_1 = require("./GameCharacter");
var GameFollowers_1 = require("./GameFollowers");
function randomInt(max) {
    return Math.floor(max * g.game.vars.random.generate());
}
var Game_Player = /** @class */ (function (_super) {
    __extends(Game_Player, _super);
    function Game_Player() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Player.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Game_Player.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setTransparent(globals_1.$dataSystem.optTransparent);
    };
    Game_Player.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._vehicleType = "walk";
        this._vehicleGettingOn = false;
        this._vehicleGettingOff = false;
        this._dashing = false;
        this._needsMapReload = false;
        this._transferring = false;
        this._newMapId = 0;
        this._newX = 0;
        this._newY = 0;
        this._newDirection = 0;
        this._fadeType = 0;
        this._followers = new GameFollowers_1.Game_Followers();
        this._encounterCount = 0;
    };
    Game_Player.prototype.clearTransferInfo = function () {
        this._transferring = false;
        this._newMapId = 0;
        this._newX = 0;
        this._newY = 0;
        this._newDirection = 0;
    };
    Game_Player.prototype.followers = function () {
        return this._followers;
    };
    Game_Player.prototype.refresh = function () {
        var actor = globals_1.$gameParty.leader();
        var characterName = actor ? actor.characterName() : "";
        var characterIndex = actor ? actor.characterIndex() : 0;
        this.setImage(characterName, characterIndex);
        this._followers.refresh();
    };
    Game_Player.prototype.isStopping = function () {
        if (this._vehicleGettingOn || this._vehicleGettingOff) {
            return false;
        }
        return GameCharacter_1.Game_Character.prototype.isStopping.call(this);
    };
    Game_Player.prototype.reserveTransfer = function (mapId, x, y, d, fadeType) {
        this._transferring = true;
        this._newMapId = mapId;
        this._newX = x;
        this._newY = y;
        this._newDirection = d;
        this._fadeType = fadeType;
    };
    Game_Player.prototype.requestMapReload = function () {
        this._needsMapReload = true;
    };
    Game_Player.prototype.isTransferring = function () {
        return this._transferring;
    };
    Game_Player.prototype.newMapId = function () {
        return this._newMapId;
    };
    Game_Player.prototype.fadeType = function () {
        return this._fadeType;
    };
    Game_Player.prototype.performTransfer = function () {
        if (this.isTransferring()) {
            this.setDirection(this._newDirection);
            if (this._newMapId !== globals_1.$gameMap.mapId() || this._needsMapReload) {
                globals_1.$gameMap.setup(this._newMapId);
                this._needsMapReload = false;
            }
            this.locate(this._newX, this._newY);
            this.refresh();
            this.clearTransferInfo();
        }
    };
    Game_Player.prototype.isMapPassable = function (x, y, d) {
        var vehicle = this.vehicle();
        if (vehicle) {
            return vehicle.isMapPassable(x, y, d);
        }
        else {
            return GameCharacter_1.Game_Character.prototype.isMapPassable.call(this, x, y, d);
        }
    };
    Game_Player.prototype.vehicle = function () {
        return globals_1.$gameMap.vehicle(this._vehicleType);
    };
    Game_Player.prototype.isInBoat = function () {
        return this._vehicleType === "boat";
    };
    Game_Player.prototype.isInShip = function () {
        return this._vehicleType === "ship";
    };
    Game_Player.prototype.isInAirship = function () {
        return this._vehicleType === "airship";
    };
    Game_Player.prototype.isInVehicle = function () {
        return this.isInBoat() || this.isInShip() || this.isInAirship();
    };
    Game_Player.prototype.isNormal = function () {
        return this._vehicleType === "walk" && !this.isMoveRouteForcing();
    };
    Game_Player.prototype.isDashing = function () {
        return this._dashing;
    };
    Game_Player.prototype.isDebugThrough = function () {
        // return Input.isPressed("control") && $gameTemp.isPlaytest();
        return false;
    };
    Game_Player.prototype.isCollided = function (x, y) {
        if (this.isThrough()) {
            return false;
        }
        else {
            return this.pos(x, y) || this._followers.isSomeoneCollided(x, y);
        }
    };
    Game_Player.prototype.centerX = function () {
        return (Graphics_1.Graphics.width / globals_1.$gameMap.tileWidth() - 1) / 2.0;
    };
    Game_Player.prototype.centerY = function () {
        return (Graphics_1.Graphics.height / globals_1.$gameMap.tileHeight() - 1) / 2.0;
    };
    Game_Player.prototype.center = function (x, y) {
        return globals_1.$gameMap.setDisplayPos(x - this.centerX(), y - this.centerY());
    };
    Game_Player.prototype.locate = function (x, y) {
        _super.prototype.locate.call(this, x, y);
        this.center(x, y);
        this.makeEncounterCount();
        if (this.isInVehicle()) {
            this.vehicle().refresh();
        }
        this._followers.synchronize(x, y, this.direction());
    };
    Game_Player.prototype.increaseSteps = function () {
        _super.prototype.increaseSteps.call(this);
        if (this.isNormal()) {
            globals_1.$gameParty.increaseSteps();
        }
    };
    Game_Player.prototype.makeEncounterCount = function () {
        var n = globals_1.$gameMap.encounterStep();
        this._encounterCount = randomInt(n) + randomInt(n) + 1;
    };
    Game_Player.prototype.makeEncounterTroopId = function () {
        var _this = this;
        var encounterList = [];
        var weightSum = 0;
        globals_1.$gameMap.encounterList().forEach(function (encounter) {
            if (_this.meetsEncounterConditions(encounter)) {
                encounterList.push(encounter);
                weightSum += encounter.weight;
            }
        });
        if (weightSum > 0) {
            var value = randomInt(weightSum);
            for (var i = 0; i < encounterList.length; i++) {
                value -= encounterList[i].weight;
                if (value < 0) {
                    return encounterList[i].troopId;
                }
            }
        }
        return 0;
    };
    Game_Player.prototype.meetsEncounterConditions = function (encounter) {
        return encounter.regionSet.length === 0 || Utils_1.Utils.contains(encounter.regionSet, this.regionId());
    };
    Game_Player.prototype.executeEncounter = function () {
        if (!globals_1.$gameMap.isEventRunning() && this._encounterCount <= 0) {
            this.makeEncounterCount();
            var troopId = this.makeEncounterTroopId();
            if (globals_1.$dataTroops[troopId]) {
                BattleManager_1.BattleManager.setup(troopId, true, false);
                BattleManager_1.BattleManager.onEncounter();
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    Game_Player.prototype.startMapEvent = function (x, y, triggers, normal) {
        if (!globals_1.$gameMap.isEventRunning()) {
            globals_1.$gameMap.eventsXy(x, y).forEach(function (event) {
                if (event.isTriggerIn(triggers) && event.isNormalPriority() === normal) {
                    event.start();
                }
            });
        }
    };
    Game_Player.prototype.moveByInput = function () {
        if (!this.isMoving() && this.canMove()) {
            var direction = this.getInputDirection();
            if (direction > 0) {
                globals_1.$gameTemp.clearDestination();
            }
            else if (globals_1.$gameTemp.isDestinationValid()) {
                var x = globals_1.$gameTemp.destinationX();
                var y = globals_1.$gameTemp.destinationY();
                direction = this.findDirectionTo(x, y);
            }
            if (direction > 0) {
                this.executeMove(direction);
            }
        }
    };
    Game_Player.prototype.canMove = function () {
        if (globals_1.$gameMap.isEventRunning() || globals_1.$gameMessage.isBusy()) {
            return false;
        }
        if (this.isMoveRouteForcing() || this.areFollowersGathering()) {
            return false;
        }
        if (this._vehicleGettingOn || this._vehicleGettingOff) {
            return false;
        }
        if (this.isInVehicle() && !this.vehicle().canMove()) {
            return false;
        }
        return true;
    };
    Game_Player.prototype.getInputDirection = function () {
        // return Input.dir4;
        return 0;
    };
    Game_Player.prototype.executeMove = function (direction) {
        this.moveStraight(direction);
    };
    Game_Player.prototype.update = function (sceneActive) {
        var lastScrolledX = this.scrolledX();
        var lastScrolledY = this.scrolledY();
        var wasMoving = this.isMoving();
        this.updateDashing();
        if (sceneActive) {
            this.moveByInput();
        }
        _super.prototype.update.call(this);
        this.updateScroll(lastScrolledX, lastScrolledY);
        this.updateVehicle();
        if (!this.isMoving()) {
            this.updateNonmoving(wasMoving);
        }
        this._followers.update();
    };
    Game_Player.prototype.updateDashing = function () {
        if (this.isMoving()) {
            return;
        }
        if (this.canMove() && !this.isInVehicle() && !globals_1.$gameMap.isDashDisabled()) {
            this._dashing = this.isDashButtonPressed() || globals_1.$gameTemp.isDestinationValid();
        }
        else {
            this._dashing = false;
        }
    };
    Game_Player.prototype.isDashButtonPressed = function () {
        // const shift = Input.isPressed("shift");
        // if (ConfigManager.alwaysDash) {
        // 	return !shift;
        // } else {
        // 	return shift;
        // }
        return false;
    };
    Game_Player.prototype.updateScroll = function (lastScrolledX, lastScrolledY) {
        var x1 = lastScrolledX;
        var y1 = lastScrolledY;
        var x2 = this.scrolledX();
        var y2 = this.scrolledY();
        if (y2 > y1 && y2 > this.centerY()) {
            globals_1.$gameMap.scrollDown(y2 - y1);
        }
        if (x2 < x1 && x2 < this.centerX()) {
            globals_1.$gameMap.scrollLeft(x1 - x2);
        }
        if (x2 > x1 && x2 > this.centerX()) {
            globals_1.$gameMap.scrollRight(x2 - x1);
        }
        if (y2 < y1 && y2 < this.centerY()) {
            globals_1.$gameMap.scrollUp(y1 - y2);
        }
    };
    Game_Player.prototype.updateVehicle = function () {
        if (this.isInVehicle() && !this.areFollowersGathering()) {
            if (this._vehicleGettingOn) {
                this.updateVehicleGetOn();
            }
            else if (this._vehicleGettingOff) {
                this.updateVehicleGetOff();
            }
            else {
                this.vehicle().syncWithPlayer();
            }
        }
    };
    Game_Player.prototype.updateVehicleGetOn = function () {
        if (!this.areFollowersGathering() && !this.isMoving()) {
            this.setDirection(this.vehicle().direction());
            this.setMoveSpeed(this.vehicle().moveSpeed());
            this._vehicleGettingOn = false;
            this.setTransparent(true);
            if (this.isInAirship()) {
                this.setThrough(true);
            }
            this.vehicle().getOn();
        }
    };
    Game_Player.prototype.updateVehicleGetOff = function () {
        if (!this.areFollowersGathering() && this.vehicle().isLowest()) {
            this._vehicleGettingOff = false;
            this._vehicleType = "walk";
            this.setTransparent(false);
        }
    };
    Game_Player.prototype.updateNonmoving = function (wasMoving) {
        if (!globals_1.$gameMap.isEventRunning()) {
            if (wasMoving) {
                globals_1.$gameParty.onPlayerWalk();
                this.checkEventTriggerHere([1, 2]);
                if (globals_1.$gameMap.setupStartingEvent()) {
                    return;
                }
            }
            if (this.triggerAction()) {
                return;
            }
            if (wasMoving) {
                this.updateEncounterCount();
            }
            else {
                globals_1.$gameTemp.clearDestination();
            }
        }
    };
    Game_Player.prototype.triggerAction = function () {
        if (this.canMove()) {
            if (this.triggerButtonAction()) {
                return true;
            }
            if (this.triggerTouchAction()) {
                return true;
            }
        }
        return false;
    };
    Game_Player.prototype.triggerButtonAction = function () {
        // if (Input.isTriggered("ok")) {
        // 	if (this.getOnOffVehicle()) {
        // 		return true;
        // 	}
        // 	this.checkEventTriggerHere([0]);
        // 	if ($gameMap.setupStartingEvent()) {
        // 		return true;
        // 	}
        // 	this.checkEventTriggerThere([0, 1, 2]);
        // 	if ($gameMap.setupStartingEvent()) {
        // 		return true;
        // 	}
        // }
        return false;
    };
    Game_Player.prototype.triggerTouchAction = function () {
        if (globals_1.$gameTemp.isDestinationValid()) {
            var direction = this.direction();
            var x1 = this.x;
            var y1 = this.y;
            var x2 = globals_1.$gameMap.roundXWithDirection(x1, direction);
            var y2 = globals_1.$gameMap.roundYWithDirection(y1, direction);
            var x3 = globals_1.$gameMap.roundXWithDirection(x2, direction);
            var y3 = globals_1.$gameMap.roundYWithDirection(y2, direction);
            var destX = globals_1.$gameTemp.destinationX();
            var destY = globals_1.$gameTemp.destinationY();
            if (destX === x1 && destY === y1) {
                return this.triggerTouchActionD1(x1, y1);
            }
            else if (destX === x2 && destY === y2) {
                return this.triggerTouchActionD2(x2, y2);
            }
            else if (destX === x3 && destY === y3) {
                return this.triggerTouchActionD3(x2, y2);
            }
        }
        return false;
    };
    Game_Player.prototype.triggerTouchActionD1 = function (x1, y1) {
        if (globals_1.$gameMap.airship().pos(x1, y1)) {
            if (TouchInput_1.TouchInput.isTriggered() && this.getOnOffVehicle()) {
                return true;
            }
        }
        this.checkEventTriggerHere([0]);
        return globals_1.$gameMap.setupStartingEvent();
    };
    Game_Player.prototype.triggerTouchActionD2 = function (x2, y2) {
        if (globals_1.$gameMap.boat().pos(x2, y2) || globals_1.$gameMap.ship().pos(x2, y2)) {
            if (TouchInput_1.TouchInput.isTriggered() && this.getOnVehicle()) {
                return true;
            }
        }
        if (this.isInBoat() || this.isInShip()) {
            if (TouchInput_1.TouchInput.isTriggered() && this.getOffVehicle()) {
                return true;
            }
        }
        this.checkEventTriggerThere([0, 1, 2]);
        return globals_1.$gameMap.setupStartingEvent();
    };
    Game_Player.prototype.triggerTouchActionD3 = function (x2, y2) {
        if (globals_1.$gameMap.isCounter(x2, y2)) {
            this.checkEventTriggerThere([0, 1, 2]);
        }
        return globals_1.$gameMap.setupStartingEvent();
    };
    Game_Player.prototype.updateEncounterCount = function () {
        if (this.canEncounter()) {
            this._encounterCount -= this.encounterProgressValue();
        }
    };
    Game_Player.prototype.canEncounter = function () {
        return (!globals_1.$gameParty.hasEncounterNone() &&
            globals_1.$gameSystem.isEncounterEnabled() &&
            !this.isInAirship() &&
            !this.isMoveRouteForcing() &&
            !this.isDebugThrough());
    };
    Game_Player.prototype.encounterProgressValue = function () {
        var value = globals_1.$gameMap.isBush(this.x, this.y) ? 2 : 1;
        if (globals_1.$gameParty.hasEncounterHalf()) {
            value *= 0.5;
        }
        if (this.isInShip()) {
            value *= 0.5;
        }
        return value;
    };
    Game_Player.prototype.checkEventTriggerHere = function (triggers) {
        if (this.canStartLocalEvents()) {
            this.startMapEvent(this.x, this.y, triggers, false);
        }
    };
    Game_Player.prototype.checkEventTriggerThere = function (triggers) {
        if (this.canStartLocalEvents()) {
            var direction = this.direction();
            var x1 = this.x;
            var y1 = this.y;
            var x2 = globals_1.$gameMap.roundXWithDirection(x1, direction);
            var y2 = globals_1.$gameMap.roundYWithDirection(y1, direction);
            this.startMapEvent(x2, y2, triggers, true);
            if (!globals_1.$gameMap.isAnyEventStarting() && globals_1.$gameMap.isCounter(x2, y2)) {
                var x3 = globals_1.$gameMap.roundXWithDirection(x2, direction);
                var y3 = globals_1.$gameMap.roundYWithDirection(y2, direction);
                this.startMapEvent(x3, y3, triggers, true);
            }
        }
    };
    Game_Player.prototype.checkEventTriggerTouch = function (x, y) {
        if (this.canStartLocalEvents()) {
            this.startMapEvent(x, y, [1, 2], true);
        }
        return false; // 基底クラスはfalseを返しているので追加
    };
    Game_Player.prototype.canStartLocalEvents = function () {
        return !this.isInAirship();
    };
    Game_Player.prototype.getOnOffVehicle = function () {
        if (this.isInVehicle()) {
            return this.getOffVehicle();
        }
        else {
            return this.getOnVehicle();
        }
    };
    Game_Player.prototype.getOnVehicle = function () {
        var direction = this.direction();
        var x1 = this.x;
        var y1 = this.y;
        var x2 = globals_1.$gameMap.roundXWithDirection(x1, direction);
        var y2 = globals_1.$gameMap.roundYWithDirection(y1, direction);
        if (globals_1.$gameMap.airship().pos(x1, y1)) {
            this._vehicleType = "airship";
        }
        else if (globals_1.$gameMap.ship().pos(x2, y2)) {
            this._vehicleType = "ship";
        }
        else if (globals_1.$gameMap.boat().pos(x2, y2)) {
            this._vehicleType = "boat";
        }
        if (this.isInVehicle()) {
            this._vehicleGettingOn = true;
            if (!this.isInAirship()) {
                this.forceMoveForward();
            }
            this.gatherFollowers();
        }
        return this._vehicleGettingOn;
    };
    Game_Player.prototype.getOffVehicle = function () {
        if (this.vehicle().isLandOk(this.x, this.y, this.direction())) {
            if (this.isInAirship()) {
                this.setDirection(2);
            }
            this._followers.synchronize(this.x, this.y, this.direction());
            this.vehicle().getOff();
            if (!this.isInAirship()) {
                this.forceMoveForward();
                this.setTransparent(false);
            }
            this._vehicleGettingOff = true;
            this.setMoveSpeed(4);
            this.setThrough(false);
            this.makeEncounterCount();
            this.gatherFollowers();
        }
        return this._vehicleGettingOff;
    };
    Game_Player.prototype.forceMoveForward = function () {
        this.setThrough(true);
        this.moveForward();
        this.setThrough(false);
    };
    Game_Player.prototype.isOnDamageFloor = function () {
        return globals_1.$gameMap.isDamageFloor(this.x, this.y) && !this.isInAirship();
    };
    Game_Player.prototype.moveStraight = function (d) {
        if (this.canPass(this.x, this.y, d)) {
            this._followers.updateMove();
        }
        _super.prototype.moveStraight.call(this, d);
    };
    Game_Player.prototype.moveDiagonally = function (horz, vert) {
        if (this.canPassDiagonally(this.x, this.y, horz, vert)) {
            this._followers.updateMove();
        }
        _super.prototype.moveDiagonally.call(this, horz, vert);
    };
    Game_Player.prototype.jump = function (xPlus, yPlus) {
        _super.prototype.jump.call(this, xPlus, yPlus);
        this._followers.jumpAll();
    };
    Game_Player.prototype.showFollowers = function () {
        this._followers.show();
    };
    Game_Player.prototype.hideFollowers = function () {
        this._followers.hide();
    };
    Game_Player.prototype.gatherFollowers = function () {
        this._followers.gather();
    };
    Game_Player.prototype.areFollowersGathering = function () {
        return this._followers.areGathering();
    };
    Game_Player.prototype.areFollowersGathered = function () {
        return this._followers.areGathered();
    };
    return Game_Player;
}(GameCharacter_1.Game_Character));
exports.Game_Player = Game_Player;
(0, globals_1.set$gamePlayerFactory)(function () {
    return new Game_Player();
});

},{"../core/Graphics":14,"../core/TouchInput":27,"../core/Utils":28,"../managers/BattleManager":34,"../managers/globals":43,"./GameCharacter":50,"./GameFollowers":56}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Screen = void 0;
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var GamePicture_1 = require("./GamePicture");
var Game_Screen = /** @class */ (function () {
    function Game_Screen() {
        this.initialize();
    }
    Game_Screen.prototype.initialize = function () {
        this.clear();
    };
    Game_Screen.prototype.clear = function () {
        this.clearFade();
        this.clearTone();
        this.clearFlash();
        this.clearShake();
        this.clearZoom();
        this.clearWeather();
        this.clearPictures();
    };
    Game_Screen.prototype.onBattleStart = function () {
        this.clearFade();
        this.clearFlash();
        this.clearShake();
        this.clearZoom();
        this.eraseBattlePictures();
    };
    Game_Screen.prototype.brightness = function () {
        return this._brightness;
    };
    Game_Screen.prototype.tone = function () {
        return this._tone;
    };
    Game_Screen.prototype.flashColor = function () {
        return this._flashColor;
    };
    Game_Screen.prototype.shake = function () {
        return this._shake;
    };
    Game_Screen.prototype.zoomX = function () {
        return this._zoomX;
    };
    Game_Screen.prototype.zoomY = function () {
        return this._zoomY;
    };
    Game_Screen.prototype.zoomScale = function () {
        return this._zoomScale;
    };
    Game_Screen.prototype.weatherType = function () {
        return this._weatherType;
    };
    Game_Screen.prototype.weatherPower = function () {
        return this._weatherPower;
    };
    Game_Screen.prototype.picture = function (pictureId) {
        var realPictureId = this.realPictureId(pictureId);
        return this._pictures[realPictureId];
    };
    Game_Screen.prototype.realPictureId = function (pictureId) {
        if (globals_1.$gameParty.inBattle()) {
            return pictureId + this.maxPictures();
        }
        else {
            return pictureId;
        }
    };
    Game_Screen.prototype.clearFade = function () {
        this._brightness = 255;
        this._fadeOutDuration = 0;
        this._fadeInDuration = 0;
    };
    Game_Screen.prototype.clearTone = function () {
        this._tone = [0, 0, 0, 0];
        this._toneTarget = [0, 0, 0, 0];
        this._toneDuration = 0;
    };
    Game_Screen.prototype.clearFlash = function () {
        this._flashColor = [0, 0, 0, 0];
        this._flashDuration = 0;
    };
    Game_Screen.prototype.clearShake = function () {
        this._shakePower = 0;
        this._shakeSpeed = 0;
        this._shakeDuration = 0;
        this._shakeDirection = 1;
        this._shake = 0;
    };
    Game_Screen.prototype.clearZoom = function () {
        this._zoomX = 0;
        this._zoomY = 0;
        this._zoomScale = 1;
        this._zoomScaleTarget = 1;
        this._zoomDuration = 0;
    };
    Game_Screen.prototype.clearWeather = function () {
        this._weatherType = "none";
        this._weatherPower = 0;
        this._weatherPowerTarget = 0;
        this._weatherDuration = 0;
    };
    Game_Screen.prototype.clearPictures = function () {
        this._pictures = [];
    };
    Game_Screen.prototype.eraseBattlePictures = function () {
        this._pictures = this._pictures.slice(0, this.maxPictures() + 1);
    };
    Game_Screen.prototype.maxPictures = function () {
        return 100;
    };
    Game_Screen.prototype.startFadeOut = function (duration) {
        this._fadeOutDuration = duration;
        this._fadeInDuration = 0;
    };
    Game_Screen.prototype.startFadeIn = function (duration) {
        this._fadeInDuration = duration;
        this._fadeOutDuration = 0;
    };
    Game_Screen.prototype.startTint = function (tone, duration) {
        this._toneTarget = Utils_1.Utils.cloneArray(tone);
        this._toneDuration = duration;
        if (this._toneDuration === 0) {
            this._tone = Utils_1.Utils.cloneArray(this._toneTarget);
        }
    };
    Game_Screen.prototype.startFlash = function (color, duration) {
        this._flashColor = Utils_1.Utils.cloneArray(color);
        this._flashDuration = duration;
    };
    Game_Screen.prototype.startShake = function (power, speed, duration) {
        this._shakePower = power;
        this._shakeSpeed = speed;
        this._shakeDuration = duration;
    };
    Game_Screen.prototype.startZoom = function (x, y, scale, duration) {
        this._zoomX = x;
        this._zoomY = y;
        this._zoomScaleTarget = scale;
        this._zoomDuration = duration;
    };
    Game_Screen.prototype.setZoom = function (x, y, scale) {
        this._zoomX = x;
        this._zoomY = y;
        this._zoomScale = scale;
    };
    Game_Screen.prototype.changeWeather = function (type, power, duration) {
        if (type !== "none" || duration === 0) {
            this._weatherType = type;
        }
        this._weatherPowerTarget = type === "none" ? 0 : power;
        this._weatherDuration = duration;
        if (duration === 0) {
            this._weatherPower = this._weatherPowerTarget;
        }
    };
    Game_Screen.prototype.update = function () {
        this.updateFadeOut();
        this.updateFadeIn();
        this.updateTone();
        this.updateFlash();
        this.updateShake();
        this.updateZoom();
        this.updateWeather();
        this.updatePictures();
    };
    Game_Screen.prototype.updateFadeOut = function () {
        if (this._fadeOutDuration > 0) {
            var d = this._fadeOutDuration;
            this._brightness = (this._brightness * (d - 1)) / d;
            this._fadeOutDuration--;
        }
    };
    Game_Screen.prototype.updateFadeIn = function () {
        if (this._fadeInDuration > 0) {
            var d = this._fadeInDuration;
            this._brightness = (this._brightness * (d - 1) + 255) / d;
            this._fadeInDuration--;
        }
    };
    Game_Screen.prototype.updateTone = function () {
        if (this._toneDuration > 0) {
            var d = this._toneDuration;
            for (var i = 0; i < 4; i++) {
                this._tone[i] = (this._tone[i] * (d - 1) + this._toneTarget[i]) / d;
            }
            this._toneDuration--;
        }
    };
    Game_Screen.prototype.updateFlash = function () {
        if (this._flashDuration > 0) {
            var d = this._flashDuration;
            this._flashColor[3] *= (d - 1) / d;
            this._flashDuration--;
        }
    };
    Game_Screen.prototype.updateShake = function () {
        if (this._shakeDuration > 0 || this._shake !== 0) {
            var delta = (this._shakePower * this._shakeSpeed * this._shakeDirection) / 10;
            if (this._shakeDuration <= 1 && this._shake * (this._shake + delta) < 0) {
                this._shake = 0;
            }
            else {
                this._shake += delta;
            }
            if (this._shake > this._shakePower * 2) {
                this._shakeDirection = -1;
            }
            if (this._shake < -this._shakePower * 2) {
                this._shakeDirection = 1;
            }
            this._shakeDuration--;
        }
    };
    Game_Screen.prototype.updateZoom = function () {
        if (this._zoomDuration > 0) {
            var d = this._zoomDuration;
            var t = this._zoomScaleTarget;
            this._zoomScale = (this._zoomScale * (d - 1) + t) / d;
            this._zoomDuration--;
        }
    };
    Game_Screen.prototype.updateWeather = function () {
        if (this._weatherDuration > 0) {
            var d = this._weatherDuration;
            var t = this._weatherPowerTarget;
            this._weatherPower = (this._weatherPower * (d - 1) + t) / d;
            this._weatherDuration--;
            if (this._weatherDuration === 0 && this._weatherPowerTarget === 0) {
                this._weatherType = "none";
            }
        }
    };
    Game_Screen.prototype.updatePictures = function () {
        this._pictures.forEach(function (picture) {
            if (picture) {
                picture.update();
            }
        });
    };
    Game_Screen.prototype.startFlashForDamage = function () {
        this.startFlash([255, 0, 0, 128], 8);
    };
    Game_Screen.prototype.showPicture = function (pictureId, name, origin, x, y, scaleX, scaleY, opacity, blendMode) {
        var realPictureId = this.realPictureId(pictureId);
        var picture = new GamePicture_1.Game_Picture();
        picture.show(name, origin, x, y, scaleX, scaleY, opacity, blendMode);
        this._pictures[realPictureId] = picture;
    };
    Game_Screen.prototype.movePicture = function (pictureId, origin, x, y, scaleX, scaleY, opacity, blendMode, duration) {
        var picture = this.picture(pictureId);
        if (picture) {
            picture.move(origin, x, y, scaleX, scaleY, opacity, blendMode, duration);
        }
    };
    Game_Screen.prototype.rotatePicture = function (pictureId, speed) {
        var picture = this.picture(pictureId);
        if (picture) {
            picture.rotate(speed);
        }
    };
    Game_Screen.prototype.tintPicture = function (pictureId, tone, duration) {
        var picture = this.picture(pictureId);
        if (picture) {
            picture.tint(tone, duration);
        }
    };
    Game_Screen.prototype.erasePicture = function (pictureId) {
        var realPictureId = this.realPictureId(pictureId);
        this._pictures[realPictureId] = null;
    };
    return Game_Screen;
}());
exports.Game_Screen = Game_Screen;
(0, globals_1.set$gameScreenFactory)(function () {
    return new Game_Screen();
});

},{"../core/Utils":28,"../managers/globals":43,"./GamePicture":62}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_SelfSwitches = void 0;
var globals_1 = require("../managers/globals");
var Game_SelfSwitches = /** @class */ (function () {
    function Game_SelfSwitches() {
        this.initialize();
    }
    Game_SelfSwitches.prototype.initialize = function () {
        this.clear();
    };
    Game_SelfSwitches.prototype.clear = function () {
        this._data = {};
    };
    Game_SelfSwitches.prototype.value = function (key) {
        return !!this._data[key];
    };
    Game_SelfSwitches.prototype.setValue = function (key, value) {
        if (value) {
            this._data[key] = true;
        }
        else {
            delete this._data[key];
        }
        this.onChange();
    };
    Game_SelfSwitches.prototype.onChange = function () {
        globals_1.$gameMap.requestRefresh();
    };
    return Game_SelfSwitches;
}());
exports.Game_SelfSwitches = Game_SelfSwitches;
(0, globals_1.set$gameSelfSwitchesFactory)(function () {
    return new Game_SelfSwitches();
});

},{"../managers/globals":43}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Switches = void 0;
var globals_1 = require("../managers/globals");
var Game_Switches = /** @class */ (function () {
    function Game_Switches() {
        this.initialize();
    }
    Game_Switches.prototype.initialize = function () {
        this.clear();
    };
    Game_Switches.prototype.clear = function () {
        this._data = [];
    };
    Game_Switches.prototype.value = function (switchId) {
        return !!this._data[switchId];
    };
    Game_Switches.prototype.setValue = function (switchId, value) {
        if (switchId > 0 && switchId < globals_1.$dataSystem.switches.length) {
            this._data[switchId] = value;
            this.onChange();
        }
    };
    Game_Switches.prototype.onChange = function () {
        globals_1.$gameMap.requestRefresh();
    };
    return Game_Switches;
}());
exports.Game_Switches = Game_Switches;
(0, globals_1.set$gameSwitchesFactory)(function () {
    return new Game_Switches();
});

},{"../managers/globals":43}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_System = void 0;
var Graphics_1 = require("../core/Graphics");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var globals_1 = require("../managers/globals");
var Game_System = /** @class */ (function () {
    function Game_System() {
        this.initialize();
    }
    Game_System.prototype.initialize = function () {
        this._saveEnabled = true;
        this._menuEnabled = true;
        this._encounterEnabled = true;
        this._formationEnabled = true;
        this._battleCount = 0;
        this._winCount = 0;
        this._escapeCount = 0;
        this._saveCount = 0;
        this._versionId = 0;
        this._framesOnSave = 0;
        this._bgmOnSave = null;
        this._bgsOnSave = null;
        this._windowTone = null;
        this._battleBgm = null;
        this._victoryMe = null;
        this._defeatMe = null;
        this._savedBgm = null;
        this._walkingBgm = null;
    };
    Game_System.prototype.isJapanese = function () {
        return globals_1.$dataSystem.locale.match(/^ja/);
    };
    Game_System.prototype.isChinese = function () {
        return globals_1.$dataSystem.locale.match(/^zh/);
    };
    Game_System.prototype.isKorean = function () {
        return globals_1.$dataSystem.locale.match(/^ko/);
    };
    Game_System.prototype.isCJK = function () {
        return globals_1.$dataSystem.locale.match(/^(ja|zh|ko)/);
    };
    Game_System.prototype.isRussian = function () {
        return globals_1.$dataSystem.locale.match(/^ru/);
    };
    Game_System.prototype.isSideView = function () {
        return globals_1.$dataSystem.optSideView;
    };
    Game_System.prototype.isSaveEnabled = function () {
        return this._saveEnabled;
    };
    Game_System.prototype.disableSave = function () {
        this._saveEnabled = false;
    };
    Game_System.prototype.enableSave = function () {
        this._saveEnabled = true;
    };
    Game_System.prototype.isMenuEnabled = function () {
        return this._menuEnabled;
    };
    Game_System.prototype.disableMenu = function () {
        this._menuEnabled = false;
    };
    Game_System.prototype.enableMenu = function () {
        this._menuEnabled = true;
    };
    Game_System.prototype.isEncounterEnabled = function () {
        return this._encounterEnabled;
    };
    Game_System.prototype.disableEncounter = function () {
        this._encounterEnabled = false;
    };
    Game_System.prototype.enableEncounter = function () {
        this._encounterEnabled = true;
    };
    Game_System.prototype.isFormationEnabled = function () {
        return this._formationEnabled;
    };
    Game_System.prototype.disableFormation = function () {
        this._formationEnabled = false;
    };
    Game_System.prototype.enableFormation = function () {
        this._formationEnabled = true;
    };
    Game_System.prototype.battleCount = function () {
        return this._battleCount;
    };
    Game_System.prototype.winCount = function () {
        return this._winCount;
    };
    Game_System.prototype.escapeCount = function () {
        return this._escapeCount;
    };
    Game_System.prototype.saveCount = function () {
        return this._saveCount;
    };
    Game_System.prototype.versionId = function () {
        return this._versionId;
    };
    Game_System.prototype.windowTone = function () {
        return this._windowTone || globals_1.$dataSystem.windowTone;
    };
    Game_System.prototype.setWindowTone = function (value) {
        this._windowTone = value;
    };
    Game_System.prototype.battleBgm = function () {
        return this._battleBgm || globals_1.$dataSystem.battleBgm;
    };
    Game_System.prototype.setBattleBgm = function (value) {
        this._battleBgm = value;
    };
    Game_System.prototype.victoryMe = function () {
        return this._victoryMe || globals_1.$dataSystem.victoryMe;
    };
    Game_System.prototype.setVictoryMe = function (value) {
        this._victoryMe = value;
    };
    Game_System.prototype.defeatMe = function () {
        return this._defeatMe || globals_1.$dataSystem.defeatMe;
    };
    Game_System.prototype.setDefeatMe = function (value) {
        this._defeatMe = value;
    };
    Game_System.prototype.onBattleStart = function () {
        this._battleCount++;
    };
    Game_System.prototype.onBattleWin = function () {
        this._winCount++;
    };
    Game_System.prototype.onBattleEscape = function () {
        this._escapeCount++;
    };
    Game_System.prototype.onBeforeSave = function () {
        this._saveCount++;
        this._versionId = globals_1.$dataSystem.versionId;
        this._framesOnSave = Graphics_1.Graphics.frameCount;
        this._bgmOnSave = AudioManager_1.AudioManager.saveBgm();
        this._bgsOnSave = AudioManager_1.AudioManager.saveBgs();
    };
    Game_System.prototype.onAfterLoad = function () {
        Graphics_1.Graphics.frameCount = this._framesOnSave;
        AudioManager_1.AudioManager.playBgm(this._bgmOnSave);
        AudioManager_1.AudioManager.playBgs(this._bgsOnSave);
    };
    Game_System.prototype.playtime = function () {
        return Math.floor(Graphics_1.Graphics.frameCount / 60);
    };
    Game_System.prototype.playtimeText = function () {
        var hour = Math.floor(this.playtime() / 60 / 60);
        var min = Math.floor(this.playtime() / 60) % 60;
        var sec = this.playtime() % 60;
        return Utils_1.Utils.padZero(hour, 2) + ":" + Utils_1.Utils.padZero(min, 2) + ":" + Utils_1.Utils.padZero(sec, 2);
    };
    Game_System.prototype.saveBgm = function () {
        this._savedBgm = AudioManager_1.AudioManager.saveBgm();
    };
    Game_System.prototype.replayBgm = function () {
        if (this._savedBgm) {
            AudioManager_1.AudioManager.replayBgm(this._savedBgm);
        }
    };
    Game_System.prototype.saveWalkingBgm = function () {
        this._walkingBgm = AudioManager_1.AudioManager.saveBgm();
    };
    Game_System.prototype.replayWalkingBgm = function () {
        if (this._walkingBgm) {
            AudioManager_1.AudioManager.playBgm(this._walkingBgm);
        }
    };
    Game_System.prototype.saveWalkingBgm2 = function () {
        this._walkingBgm = globals_1.$dataMap.bgm;
    };
    return Game_System;
}());
exports.Game_System = Game_System;
(0, globals_1.set$gameSystemFactory)(function () {
    return new Game_System();
});

},{"../core/Graphics":14,"../core/Utils":28,"../managers/AudioManager":33,"../managers/globals":43}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Temp = void 0;
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var Game_Temp = /** @class */ (function () {
    function Game_Temp() {
        this.initialize();
    }
    Game_Temp.prototype.initialize = function () {
        this._isPlaytest = Utils_1.Utils.isOptionValid("test");
        this._commonEventId = 0;
        this._destinationX = null;
        this._destinationY = null;
    };
    Game_Temp.prototype.isPlaytest = function () {
        return this._isPlaytest;
    };
    Game_Temp.prototype.reserveCommonEvent = function (commonEventId) {
        this._commonEventId = commonEventId;
    };
    Game_Temp.prototype.clearCommonEvent = function () {
        this._commonEventId = 0;
    };
    Game_Temp.prototype.isCommonEventReserved = function () {
        return this._commonEventId > 0;
    };
    Game_Temp.prototype.reservedCommonEvent = function () {
        return globals_1.$dataCommonEvents[this._commonEventId];
    };
    Game_Temp.prototype.setDestination = function (x, y) {
        this._destinationX = x;
        this._destinationY = y;
    };
    Game_Temp.prototype.clearDestination = function () {
        this._destinationX = null;
        this._destinationY = null;
    };
    Game_Temp.prototype.isDestinationValid = function () {
        return this._destinationX !== null;
    };
    Game_Temp.prototype.destinationX = function () {
        return this._destinationX;
    };
    Game_Temp.prototype.destinationY = function () {
        return this._destinationY;
    };
    return Game_Temp;
}());
exports.Game_Temp = Game_Temp;
(0, globals_1.set$gameTempFactory)(function () {
    return new Game_Temp();
});

},{"../core/Utils":28,"../managers/globals":43}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Timer = void 0;
var BattleManager_1 = require("../managers/BattleManager");
var globals_1 = require("../managers/globals");
var Game_Timer = /** @class */ (function () {
    function Game_Timer() {
        this.initialize();
    }
    Game_Timer.prototype.initialize = function () {
        this._frames = 0;
        this._working = false;
    };
    Game_Timer.prototype.update = function (sceneActive) {
        if (sceneActive && this._working && this._frames > 0) {
            this._frames--;
            if (this._frames === 0) {
                this.onExpire();
            }
        }
    };
    Game_Timer.prototype.start = function (count) {
        this._frames = count;
        this._working = true;
    };
    Game_Timer.prototype.stop = function () {
        this._working = false;
    };
    Game_Timer.prototype.isWorking = function () {
        return this._working;
    };
    Game_Timer.prototype.seconds = function () {
        return Math.floor(this._frames / 60);
    };
    Game_Timer.prototype.onExpire = function () {
        BattleManager_1.BattleManager.abort();
    };
    return Game_Timer;
}());
exports.Game_Timer = Game_Timer;
(0, globals_1.set$gameTimerFactory)(function () {
    return new Game_Timer();
});

},{"../managers/BattleManager":34,"../managers/globals":43}],70:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Troop = void 0;
var Utils_1 = require("../core/Utils");
var BattleManager_1 = require("../managers/BattleManager");
var globals_1 = require("../managers/globals");
var GameEnemy_1 = require("./GameEnemy");
var GameInterpreter_1 = require("./GameInterpreter");
var GameUnit_1 = require("./GameUnit");
var Game_Troop = /** @class */ (function (_super) {
    __extends(Game_Troop, _super);
    function Game_Troop() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Troop.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Game_Troop.prototype.initialize = function () {
        GameUnit_1.Game_Unit.prototype.initialize.call(this);
        this._interpreter = new GameInterpreter_1.Game_Interpreter();
        this.clear();
    };
    Game_Troop.prototype.isEventRunning = function () {
        return this._interpreter.isRunning();
    };
    Game_Troop.prototype.updateInterpreter = function () {
        this._interpreter.update();
    };
    Game_Troop.prototype.turnCount = function () {
        return this._turnCount;
    };
    Game_Troop.prototype.members = function () {
        return this._enemies;
    };
    Game_Troop.prototype.clear = function () {
        this._interpreter.clear();
        this._troopId = 0;
        this._eventFlags = {};
        this._enemies = [];
        this._turnCount = 0;
        this._namesCount = {};
    };
    Game_Troop.prototype.troop = function () {
        return globals_1.$dataTroops[this._troopId];
    };
    Game_Troop.prototype.setup = function (troopId) {
        var _this = this;
        this.clear();
        this._troopId = troopId;
        this._enemies = [];
        this.troop().members.forEach(function (member) {
            if (globals_1.$dataEnemies[member.enemyId]) {
                var enemyId = member.enemyId;
                var x = member.x;
                var y = member.y;
                var enemy = new GameEnemy_1.Game_Enemy(enemyId, x, y);
                if (member.hidden) {
                    enemy.hide();
                }
                _this._enemies.push(enemy);
            }
        });
        this.makeUniqueNames();
    };
    Game_Troop.prototype.makeUniqueNames = function () {
        var _this = this;
        var table = this.letterTable();
        this.members().forEach(function (enemy) {
            if (enemy.isAlive() && enemy.isLetterEmpty()) {
                var name = enemy.originalName();
                var n = _this._namesCount[name] || 0;
                enemy.setLetter(table[n % table.length]);
                _this._namesCount[name] = n + 1;
            }
        });
        this.members().forEach(function (enemy) {
            var name = enemy.originalName();
            if (_this._namesCount[name] >= 2) {
                enemy.setPlural(true);
            }
        });
    };
    Game_Troop.prototype.letterTable = function () {
        return globals_1.$gameSystem.isCJK() ? Game_Troop.LETTER_TABLE_FULL : Game_Troop.LETTER_TABLE_HALF;
    };
    Game_Troop.prototype.enemyNames = function () {
        var names = [];
        this.members().forEach(function (enemy) {
            var name = enemy.originalName();
            if (enemy.isAlive() && !Utils_1.Utils.contains(names, name)) {
                names.push(name);
            }
        });
        return names;
    };
    Game_Troop.prototype.meetsConditions = function (page) {
        var c = page.conditions;
        if (!c.turnEnding && !c.turnValid && !c.enemyValid && !c.actorValid && !c.switchValid) {
            return false; // Conditions not set
        }
        if (c.turnEnding) {
            if (!BattleManager_1.BattleManager.isTurnEnd()) {
                return false;
            }
        }
        if (c.turnValid) {
            var n = this._turnCount;
            var a = c.turnA;
            var b = c.turnB;
            if (b === 0 && n !== a) {
                return false;
            }
            if (b > 0 && (n < 1 || n < a || n % b !== a % b)) {
                return false;
            }
        }
        if (c.enemyValid) {
            var enemy = globals_1.$gameTroop.members()[c.enemyIndex];
            if (!enemy || enemy.hpRate() * 100 > c.enemyHp) {
                return false;
            }
        }
        if (c.actorValid) {
            var actor = globals_1.$gameActors.actor(c.actorId);
            if (!actor || actor.hpRate() * 100 > c.actorHp) {
                return false;
            }
        }
        if (c.switchValid) {
            if (!globals_1.$gameSwitches.value(c.switchId)) {
                return false;
            }
        }
        return true;
    };
    Game_Troop.prototype.setupBattleEvent = function () {
        if (!this._interpreter.isRunning()) {
            if (this._interpreter.setupReservedCommonEvent()) {
                return;
            }
            var pages = this.troop().pages;
            for (var i = 0; i < pages.length; i++) {
                var page = pages[i];
                if (this.meetsConditions(page) && !this._eventFlags[i]) {
                    this._interpreter.setup(page.list);
                    if (page.span <= 1) {
                        this._eventFlags[i] = true;
                    }
                    break;
                }
            }
        }
    };
    Game_Troop.prototype.increaseTurn = function () {
        var pages = this.troop().pages;
        for (var i = 0; i < pages.length; i++) {
            var page = pages[i];
            if (page.span === 1) {
                this._eventFlags[i] = false;
            }
        }
        this._turnCount++;
    };
    // Game_Troop のメンバは必ず Enemy 。
    // キャストの手間をなくすため。 ex) expTotal()
    Game_Troop.prototype.deadMembers = function () {
        return _super.prototype.deadMembers.call(this);
    };
    Game_Troop.prototype.expTotal = function () {
        return this.deadMembers().reduce(function (r, enemy) {
            return r + enemy.exp();
        }, 0);
    };
    Game_Troop.prototype.goldTotal = function () {
        return (this.deadMembers().reduce(function (r, enemy) {
            return r + enemy.gold();
        }, 0) * this.goldRate());
    };
    Game_Troop.prototype.goldRate = function () {
        return globals_1.$gameParty.hasGoldDouble() ? 2 : 1;
    };
    Game_Troop.prototype.makeDropItems = function () {
        return this.deadMembers().reduce(function (r, enemy) {
            return r.concat(enemy.makeDropItems());
        }, []);
    };
    Game_Troop.LETTER_TABLE_HALF = [
        " A",
        " B",
        " C",
        " D",
        " E",
        " F",
        " G",
        " H",
        " I",
        " J",
        " K",
        " L",
        " M",
        " N",
        " O",
        " P",
        " Q",
        " R",
        " S",
        " T",
        " U",
        " V",
        " W",
        " X",
        " Y",
        " Z"
    ];
    Game_Troop.LETTER_TABLE_FULL = [
        "Ａ",
        "Ｂ",
        "Ｃ",
        "Ｄ",
        "Ｅ",
        "Ｆ",
        "Ｇ",
        "Ｈ",
        "Ｉ",
        "Ｊ",
        "Ｋ",
        "Ｌ",
        "Ｍ",
        "Ｎ",
        "Ｏ",
        "Ｐ",
        "Ｑ",
        "Ｒ",
        "Ｓ",
        "Ｔ",
        "Ｕ",
        "Ｖ",
        "Ｗ",
        "Ｘ",
        "Ｙ",
        "Ｚ"
    ];
    return Game_Troop;
}(GameUnit_1.Game_Unit));
exports.Game_Troop = Game_Troop;
(0, globals_1.set$gameTroopFactory)(function () {
    return new Game_Troop();
});

},{"../core/Utils":28,"../managers/BattleManager":34,"../managers/globals":43,"./GameEnemy":53,"./GameInterpreter":57,"./GameUnit":71}],71:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Unit = void 0;
var Game_Unit = /** @class */ (function () {
    function Game_Unit() {
        if (Object.getPrototypeOf(this) === Game_Unit.prototype) {
            this.initialize();
        }
    }
    Game_Unit.prototype.initialize = function () {
        this._inBattle = false;
    };
    Game_Unit.prototype.inBattle = function () {
        return this._inBattle;
    };
    Game_Unit.prototype.members = function () {
        return [];
    };
    Game_Unit.prototype.aliveMembers = function () {
        return this.members().filter(function (member) {
            return member.isAlive();
        });
    };
    Game_Unit.prototype.deadMembers = function () {
        return this.members().filter(function (member) {
            return member.isDead();
        });
    };
    Game_Unit.prototype.movableMembers = function () {
        return this.members().filter(function (member) {
            return member.canMove();
        });
    };
    Game_Unit.prototype.clearActions = function () {
        return this.members().forEach(function (member) {
            return member.clearActions();
        });
    };
    Game_Unit.prototype.agility = function () {
        var members = this.members();
        if (members.length === 0) {
            return 1;
        }
        var sum = members.reduce(function (r, member) {
            return r + member.agi;
        }, 0);
        return sum / members.length;
    };
    Game_Unit.prototype.tgrSum = function () {
        return this.aliveMembers().reduce(function (r, member) {
            return r + member.tgr;
        }, 0);
    };
    Game_Unit.prototype.randomTarget = function () {
        var tgrRand = g.game.vars.random.generate() * this.tgrSum();
        var target = null;
        this.aliveMembers().forEach(function (member) {
            tgrRand -= member.tgr;
            if (tgrRand <= 0 && !target) {
                target = member;
            }
        });
        return target;
    };
    Game_Unit.prototype.randomDeadTarget = function () {
        var members = this.deadMembers();
        if (members.length === 0) {
            return null;
        }
        return members[Math.floor(g.game.vars.random.generate() * members.length)];
    };
    Game_Unit.prototype.smoothTarget = function (index) {
        if (index < 0) {
            index = 0;
        }
        var member = this.members()[index];
        return member && member.isAlive() ? member : this.aliveMembers()[0];
    };
    Game_Unit.prototype.smoothDeadTarget = function (index) {
        if (index < 0) {
            index = 0;
        }
        var member = this.members()[index];
        return member && member.isDead() ? member : this.deadMembers()[0];
    };
    Game_Unit.prototype.clearResults = function () {
        this.members().forEach(function (member) {
            member.clearResult();
        });
    };
    Game_Unit.prototype.onBattleStart = function () {
        this.members().forEach(function (member) {
            member.onBattleStart();
        });
        this._inBattle = true;
    };
    Game_Unit.prototype.onBattleEnd = function () {
        this._inBattle = false;
        this.members().forEach(function (member) {
            member.onBattleEnd();
        });
    };
    Game_Unit.prototype.makeActions = function () {
        this.members().forEach(function (member) {
            member.makeActions();
        });
    };
    Game_Unit.prototype.select = function (activeMember) {
        this.members().forEach(function (member) {
            if (member === activeMember) {
                member.select();
            }
            else {
                member.deselect();
            }
        });
    };
    Game_Unit.prototype.isAllDead = function () {
        return this.aliveMembers().length === 0;
    };
    Game_Unit.prototype.substituteBattler = function () {
        var members = this.members();
        for (var i = 0; i < members.length; i++) {
            if (members[i].isSubstitute()) {
                return members[i];
            }
        }
    };
    return Game_Unit;
}());
exports.Game_Unit = Game_Unit;

},{}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Variables = void 0;
var globals_1 = require("../managers/globals");
var Game_Variables = /** @class */ (function () {
    function Game_Variables() {
        this.initialize();
    }
    Game_Variables.prototype.initialize = function () {
        this.clear();
    };
    Game_Variables.prototype.clear = function () {
        this._data = [];
    };
    Game_Variables.prototype.value = function (variableId) {
        return this._data[variableId] || 0;
    };
    Game_Variables.prototype.setValue = function (variableId, value) {
        if (variableId > 0 && variableId < globals_1.$dataSystem.variables.length) {
            if (typeof value === "number") {
                value = Math.floor(value);
            }
            this._data[variableId] = value;
            this.onChange();
        }
    };
    Game_Variables.prototype.onChange = function () {
        globals_1.$gameMap.requestRefresh();
    };
    return Game_Variables;
}());
exports.Game_Variables = Game_Variables;
(0, globals_1.set$gameVariablesFactory)(function () {
    return new Game_Variables();
});

},{"../managers/globals":43}],73:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game_Vehicle = void 0;
var AudioManager_1 = require("../managers/AudioManager");
var globals_1 = require("../managers/globals");
var GameCharacter_1 = require("./GameCharacter");
var Game_Vehicle = /** @class */ (function (_super) {
    __extends(Game_Vehicle, _super);
    function Game_Vehicle(type) {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Game_Vehicle.prototype) {
            _this.initialize(type);
        }
        return _this;
    }
    Game_Vehicle.prototype.initialize = function (type) {
        _super.prototype.initialize.call(this);
        this._type = type;
        this.resetDirection();
        this.initMoveSpeed();
        this.loadSystemSettings();
    };
    Game_Vehicle.prototype.initMembers = function () {
        GameCharacter_1.Game_Character.prototype.initMembers.call(this);
        this._type = "";
        this._mapId = 0;
        this._altitude = 0;
        this._driving = false;
        this._bgm = null;
    };
    Game_Vehicle.prototype.isBoat = function () {
        return this._type === "boat";
    };
    Game_Vehicle.prototype.isShip = function () {
        return this._type === "ship";
    };
    Game_Vehicle.prototype.isAirship = function () {
        return this._type === "airship";
    };
    Game_Vehicle.prototype.resetDirection = function () {
        this.setDirection(4);
    };
    Game_Vehicle.prototype.initMoveSpeed = function () {
        if (this.isBoat()) {
            this.setMoveSpeed(4);
        }
        else if (this.isShip()) {
            this.setMoveSpeed(5);
        }
        else if (this.isAirship()) {
            this.setMoveSpeed(6);
        }
    };
    Game_Vehicle.prototype.vehicle = function () {
        if (this.isBoat()) {
            return globals_1.$dataSystem.boat;
        }
        else if (this.isShip()) {
            return globals_1.$dataSystem.ship;
        }
        else if (this.isAirship()) {
            return globals_1.$dataSystem.airship;
        }
        else {
            return null;
        }
    };
    Game_Vehicle.prototype.loadSystemSettings = function () {
        var vehicle = this.vehicle();
        this._mapId = vehicle.startMapId;
        this.setPosition(vehicle.startX, vehicle.startY);
        this.setImage(vehicle.characterName, vehicle.characterIndex);
    };
    Game_Vehicle.prototype.refresh = function () {
        if (this._driving) {
            this._mapId = globals_1.$gameMap.mapId();
            this.syncWithPlayer();
        }
        else if (this._mapId === globals_1.$gameMap.mapId()) {
            this.locate(this.x, this.y);
        }
        if (this.isAirship()) {
            this.setPriorityType(this._driving ? 2 : 0);
        }
        else {
            this.setPriorityType(1);
        }
        this.setWalkAnime(this._driving);
        this.setStepAnime(this._driving);
        this.setTransparent(this._mapId !== globals_1.$gameMap.mapId());
    };
    Game_Vehicle.prototype.setLocation = function (mapId, x, y) {
        this._mapId = mapId;
        this.setPosition(x, y);
        this.refresh();
    };
    Game_Vehicle.prototype.pos = function (x, y) {
        if (this._mapId === globals_1.$gameMap.mapId()) {
            return GameCharacter_1.Game_Character.prototype.pos.call(this, x, y);
        }
        else {
            return false;
        }
    };
    Game_Vehicle.prototype.isMapPassable = function (x, y, d) {
        var x2 = globals_1.$gameMap.roundXWithDirection(x, d);
        var y2 = globals_1.$gameMap.roundYWithDirection(y, d);
        if (this.isBoat()) {
            return globals_1.$gameMap.isBoatPassable(x2, y2);
        }
        else if (this.isShip()) {
            return globals_1.$gameMap.isShipPassable(x2, y2);
        }
        else if (this.isAirship()) {
            return true;
        }
        else {
            return false;
        }
    };
    Game_Vehicle.prototype.getOn = function () {
        this._driving = true;
        this.setWalkAnime(true);
        this.setStepAnime(true);
        globals_1.$gameSystem.saveWalkingBgm();
        this.playBgm();
    };
    Game_Vehicle.prototype.getOff = function () {
        this._driving = false;
        this.setWalkAnime(false);
        this.setStepAnime(false);
        this.resetDirection();
        globals_1.$gameSystem.replayWalkingBgm();
    };
    Game_Vehicle.prototype.setBgm = function (bgm) {
        this._bgm = bgm;
    };
    Game_Vehicle.prototype.playBgm = function () {
        AudioManager_1.AudioManager.playBgm(this._bgm || this.vehicle().bgm);
    };
    Game_Vehicle.prototype.syncWithPlayer = function () {
        this.copyPosition(globals_1.$gamePlayer);
        this.refreshBushDepth();
    };
    Game_Vehicle.prototype.screenY = function () {
        return GameCharacter_1.Game_Character.prototype.screenY.call(this) - this._altitude;
    };
    Game_Vehicle.prototype.shadowX = function () {
        return this.screenX();
    };
    Game_Vehicle.prototype.shadowY = function () {
        return this.screenY() + this._altitude;
    };
    Game_Vehicle.prototype.shadowOpacity = function () {
        return (255 * this._altitude) / this.maxAltitude();
    };
    Game_Vehicle.prototype.canMove = function () {
        if (this.isAirship()) {
            return this.isHighest();
        }
        else {
            return true;
        }
    };
    Game_Vehicle.prototype.update = function () {
        GameCharacter_1.Game_Character.prototype.update.call(this);
        if (this.isAirship()) {
            this.updateAirship();
        }
    };
    Game_Vehicle.prototype.updateAirship = function () {
        this.updateAirshipAltitude();
        this.setStepAnime(this.isHighest());
        this.setPriorityType(this.isLowest() ? 0 : 2);
    };
    Game_Vehicle.prototype.updateAirshipAltitude = function () {
        if (this._driving && !this.isHighest()) {
            this._altitude++;
        }
        if (!this._driving && !this.isLowest()) {
            this._altitude--;
        }
    };
    Game_Vehicle.prototype.maxAltitude = function () {
        return 48;
    };
    Game_Vehicle.prototype.isLowest = function () {
        return this._altitude <= 0;
    };
    Game_Vehicle.prototype.isHighest = function () {
        return this._altitude >= this.maxAltitude();
    };
    Game_Vehicle.prototype.isTakeoffOk = function () {
        return globals_1.$gamePlayer.areFollowersGathered();
    };
    Game_Vehicle.prototype.isLandOk = function (x, y, d) {
        if (this.isAirship()) {
            if (!globals_1.$gameMap.isAirshipLandOk(x, y)) {
                return false;
            }
            if (globals_1.$gameMap.eventsXy(x, y).length > 0) {
                return false;
            }
        }
        else {
            var x2 = globals_1.$gameMap.roundXWithDirection(x, d);
            var y2 = globals_1.$gameMap.roundYWithDirection(y, d);
            if (!globals_1.$gameMap.isValid(x2, y2)) {
                return false;
            }
            if (!globals_1.$gameMap.isPassable(x2, y2, this.reverseDir(d))) {
                return false;
            }
            if (this.isCollidedWithCharacters(x2, y2)) {
                return false;
            }
        }
        return true;
    };
    return Game_Vehicle;
}(GameCharacter_1.Game_Character));
exports.Game_Vehicle = Game_Vehicle;

},{"../managers/AudioManager":33,"../managers/globals":43,"./GameCharacter":50}],74:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Base = void 0;
var Graphics_1 = require("../core/Graphics");
var ScreenSprite_1 = require("../core/ScreenSprite");
var Stage_1 = require("../core/Stage");
var Utils_1 = require("../core/Utils");
var WindowLayer_1 = require("../core/WindowLayer");
var AudioManager_1 = require("../managers/AudioManager");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var Scene_Base = /** @class */ (function (_super) {
    __extends(Scene_Base, _super);
    function Scene_Base() {
        var _this = _super.call(this) || this;
        _this.thisSceneLoaded = false;
        if (Object.getPrototypeOf(_this) === Scene_Base.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Base.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._active = false;
        this._fadeSign = 0;
        this._fadeDuration = 0;
        this._fadeSprite = null;
        this._imageReservationId = Utils_1.Utils.generateRuntimeId();
    };
    Scene_Base.prototype.attachReservation = function () {
        ImageManager_1.ImageManager.setDefaultReservationId(this._imageReservationId);
    };
    Scene_Base.prototype.detachReservation = function () {
        ImageManager_1.ImageManager.releaseReservation(this._imageReservationId);
    };
    Scene_Base.prototype.create = function () {
        //
    };
    Scene_Base.prototype.isActive = function () {
        return this._active;
    };
    Scene_Base.prototype.isReady = function () {
        return ImageManager_1.ImageManager.isReady();
    };
    Scene_Base.prototype.start = function () {
        this._active = true;
    };
    Scene_Base.prototype.update = function () {
        this.updateFade();
        this.updateChildren();
    };
    Scene_Base.prototype.stop = function () {
        this._active = false;
    };
    Scene_Base.prototype.isBusy = function () {
        return this._fadeDuration > 0;
    };
    Scene_Base.prototype.terminate = function () {
        //
    };
    Scene_Base.prototype.createWindowLayer = function () {
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight;
        var x = (Graphics_1.Graphics.width - width) / 2;
        var y = (Graphics_1.Graphics.height - height) / 2;
        this._windowLayer = new WindowLayer_1.WindowLayer();
        this._windowLayer.move(x, y, width, height);
        this.addChild(this._windowLayer);
    };
    Scene_Base.prototype.addWindow = function (window) {
        this._windowLayer.addChild(window);
    };
    Scene_Base.prototype.startFadeIn = function (duration, white) {
        this.createFadeSprite(white);
        this._fadeSign = 1;
        this._fadeDuration = duration || 30;
        this._fadeSprite.opacity = 255;
    };
    Scene_Base.prototype.startFadeOut = function (duration, white) {
        this.createFadeSprite(white);
        this._fadeSign = -1;
        this._fadeDuration = duration || 30;
        this._fadeSprite.opacity = 0;
    };
    Scene_Base.prototype.createFadeSprite = function (white) {
        if (!this._fadeSprite) {
            this._fadeSprite = new ScreenSprite_1.ScreenSprite(white ? "white" : "black");
            this.addChild(this._fadeSprite);
        }
        if (white) {
            this._fadeSprite.setWhite();
        }
        else {
            this._fadeSprite.setBlack();
        }
    };
    Scene_Base.prototype.updateFade = function () {
        if (this._fadeDuration > 0) {
            var d = this._fadeDuration;
            if (this._fadeSign > 0) {
                this._fadeSprite.opacity -= this._fadeSprite.opacity / d;
            }
            else {
                this._fadeSprite.opacity += (255 - this._fadeSprite.opacity) / d;
            }
            this._fadeDuration--;
        }
    };
    Scene_Base.prototype.updateChildren = function () {
        // if (! this.children) {
        // 	return;
        // }
        // this.children.forEach((_child) => {
        // 	const child = _child as any;
        // 	if (child.__update) {
        // 		child.__update();
        // 	}
        // 	if (child.updateTransform) {
        // 		child.updateTransform();
        // 	}
        // });
        var children = this._root.children;
        if (!children) {
            return;
        }
        children.forEach(function (child) {
            if (child.update) {
                child.update();
            }
            if (child.updateTransform) {
                child.updateTransform();
            }
        });
    };
    Scene_Base.prototype.popScene = function () {
        SceneManager_1.SceneManager.pop();
    };
    Scene_Base.prototype.checkGameover = function () {
        // if ($gameParty.isAllDead()) {
        // 	SceneManager.goto(Scene_Gameover);
        // }
    };
    Scene_Base.prototype.fadeOutAll = function () {
        var time = this.slowFadeSpeed() / 60;
        AudioManager_1.AudioManager.fadeOutBgm(time);
        AudioManager_1.AudioManager.fadeOutBgs(time);
        AudioManager_1.AudioManager.fadeOutMe(time);
        this.startFadeOut(this.slowFadeSpeed());
    };
    Scene_Base.prototype.fadeSpeed = function () {
        return 24;
    };
    Scene_Base.prototype.slowFadeSpeed = function () {
        return this.fadeSpeed() * 2;
    };
    Scene_Base.prototype.assetLoadHandler = function (_asset, _assetManager, _holder) {
        return 0;
    };
    return Scene_Base;
}(Stage_1.Stage));
exports.Scene_Base = Scene_Base;

},{"../core/Graphics":14,"../core/ScreenSprite":20,"../core/Stage":22,"../core/Utils":28,"../core/WindowLayer":31,"../managers/AudioManager":33,"../managers/ImageManager":37,"../managers/SceneManager":39}],75:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Battle = void 0;
var Graphics_1 = require("../core/Graphics");
var AudioManager_1 = require("../managers/AudioManager");
var BattleManager_1 = require("../managers/BattleManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SpritesetBattle_1 = require("../sprites/SpritesetBattle");
var WindowActorCommand_1 = require("../windows/WindowActorCommand");
var WindowBattleActor_1 = require("../windows/WindowBattleActor");
var WindowBattleEnemy_1 = require("../windows/WindowBattleEnemy");
var WindowBattleItem_1 = require("../windows/WindowBattleItem");
var WindowBattleLog_1 = require("../windows/WindowBattleLog");
var WindowBattleSkill_1 = require("../windows/WindowBattleSkill");
var WindowBattleStatus_1 = require("../windows/WindowBattleStatus");
var WindowHelp_1 = require("../windows/WindowHelp");
var WindowMessage_1 = require("../windows/WindowMessage");
var WindowPartyCommand_1 = require("../windows/WindowPartyCommand");
var WindowScrollText_1 = require("../windows/WindowScrollText");
var SceneBase_1 = require("./SceneBase");
var SceneGameOver_1 = require("./SceneGameOver");
var SceneTitle_1 = require("./SceneTitle");
var Scene_Battle = /** @class */ (function (_super) {
    __extends(Scene_Battle, _super);
    function Scene_Battle() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Battle.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Battle.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Battle.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createDisplayObjects();
    };
    Scene_Battle.prototype.start = function () {
        _super.prototype.start.call(this);
        this.startFadeIn(this.fadeSpeed(), false);
        BattleManager_1.BattleManager.playBattleBgm();
        BattleManager_1.BattleManager.startBattle();
    };
    Scene_Battle.prototype.update = function () {
        var active = this.isActive();
        globals_1.$gameTimer.update(active);
        globals_1.$gameScreen.update();
        this.updateStatusWindow();
        this.updateWindowPositions();
        if (active && !this.isBusy()) {
            this.updateBattleProcess();
        }
        _super.prototype.update.call(this);
    };
    Scene_Battle.prototype.updateBattleProcess = function () {
        if (!this.isAnyInputWindowActive() || BattleManager_1.BattleManager.isAborting() || BattleManager_1.BattleManager.isBattleEnd()) {
            BattleManager_1.BattleManager.update();
            this.changeInputWindow();
        }
    };
    Scene_Battle.prototype.isAnyInputWindowActive = function () {
        return (this._partyCommandWindow.active ||
            this._actorCommandWindow.active ||
            this._skillWindow.active ||
            this._itemWindow.active ||
            this._actorWindow.active ||
            this._enemyWindow.active);
    };
    Scene_Battle.prototype.changeInputWindow = function () {
        if (BattleManager_1.BattleManager.isInputting()) {
            if (BattleManager_1.BattleManager.actor()) {
                this.startActorCommandSelection();
            }
            else {
                this.startPartyCommandSelection();
            }
        }
        else {
            this.endCommandSelection();
        }
    };
    Scene_Battle.prototype.stop = function () {
        _super.prototype.stop.call(this);
        if (this.needsSlowFadeOut()) {
            this.startFadeOut(this.slowFadeSpeed(), false);
        }
        else {
            this.startFadeOut(this.fadeSpeed(), false);
        }
        this._statusWindow.close();
        this._partyCommandWindow.close();
        this._actorCommandWindow.close();
    };
    Scene_Battle.prototype.terminate = function () {
        _super.prototype.terminate.call(this);
        globals_1.$gameParty.onBattleEnd();
        globals_1.$gameTroop.onBattleEnd();
        AudioManager_1.AudioManager.stopMe();
        ImageManager_1.ImageManager.clearRequest();
    };
    Scene_Battle.prototype.needsSlowFadeOut = function () {
        return SceneManager_1.SceneManager.isNextScene(SceneTitle_1.Scene_Title) || SceneManager_1.SceneManager.isNextScene(SceneGameOver_1.Scene_Gameover);
    };
    Scene_Battle.prototype.updateStatusWindow = function () {
        if (globals_1.$gameMessage.isBusy()) {
            this._statusWindow.close();
            this._partyCommandWindow.close();
            this._actorCommandWindow.close();
        }
        else if (this.isActive() && !this._messageWindow.isClosing()) {
            this._statusWindow.open();
        }
    };
    Scene_Battle.prototype.updateWindowPositions = function () {
        var statusX = 0;
        if (BattleManager_1.BattleManager.isInputting()) {
            statusX = this._partyCommandWindow.width;
        }
        else {
            statusX = this._partyCommandWindow.width / 2;
        }
        if (this._statusWindow.x < statusX) {
            this._statusWindow.x += 16;
            if (this._statusWindow.x > statusX) {
                this._statusWindow.x = statusX;
            }
        }
        if (this._statusWindow.x > statusX) {
            this._statusWindow.x -= 16;
            if (this._statusWindow.x < statusX) {
                this._statusWindow.x = statusX;
            }
        }
    };
    Scene_Battle.prototype.createDisplayObjects = function () {
        this.createSpriteset();
        this.createWindowLayer();
        this.createAllWindows();
        BattleManager_1.BattleManager.setLogWindow(this._logWindow);
        BattleManager_1.BattleManager.setStatusWindow(this._statusWindow);
        BattleManager_1.BattleManager.setSpriteset(this._spriteset);
        this._logWindow.setSpriteset(this._spriteset);
    };
    Scene_Battle.prototype.createSpriteset = function () {
        this._spriteset = new SpritesetBattle_1.Spriteset_Battle();
        this.addChild(this._spriteset);
    };
    Scene_Battle.prototype.createAllWindows = function () {
        this.createLogWindow();
        this.createStatusWindow();
        this.createPartyCommandWindow();
        this.createActorCommandWindow();
        this.createHelpWindow();
        this.createSkillWindow();
        this.createItemWindow();
        this.createActorWindow();
        this.createEnemyWindow();
        this.createMessageWindow();
        this.createScrollTextWindow();
    };
    Scene_Battle.prototype.createLogWindow = function () {
        this._logWindow = new WindowBattleLog_1.Window_BattleLog();
        this.addWindow(this._logWindow);
    };
    Scene_Battle.prototype.createStatusWindow = function () {
        this._statusWindow = new WindowBattleStatus_1.Window_BattleStatus();
        this.addWindow(this._statusWindow);
    };
    Scene_Battle.prototype.createPartyCommandWindow = function () {
        this._partyCommandWindow = new WindowPartyCommand_1.Window_PartyCommand();
        this._partyCommandWindow.setHandler("fight", this.commandFight.bind(this));
        this._partyCommandWindow.setHandler("escape", this.commandEscape.bind(this));
        this._partyCommandWindow.deselect();
        this.addWindow(this._partyCommandWindow);
    };
    Scene_Battle.prototype.createActorCommandWindow = function () {
        this._actorCommandWindow = new WindowActorCommand_1.Window_ActorCommand();
        this._actorCommandWindow.setHandler("attack", this.commandAttack.bind(this));
        this._actorCommandWindow.setHandler("skill", this.commandSkill.bind(this));
        this._actorCommandWindow.setHandler("guard", this.commandGuard.bind(this));
        this._actorCommandWindow.setHandler("item", this.commandItem.bind(this));
        this._actorCommandWindow.setHandler("cancel", this.selectPreviousCommand.bind(this));
        this.addWindow(this._actorCommandWindow);
    };
    Scene_Battle.prototype.createHelpWindow = function () {
        this._helpWindow = new WindowHelp_1.Window_Help();
        this._helpWindow.visible = false;
        this.addWindow(this._helpWindow);
    };
    Scene_Battle.prototype.createSkillWindow = function () {
        var wy = this._helpWindow.y + this._helpWindow.height;
        var wh = this._statusWindow.y - wy;
        this._skillWindow = new WindowBattleSkill_1.Window_BattleSkill(0, wy, Graphics_1.Graphics.boxWidth, wh);
        this._skillWindow.setHelpWindow(this._helpWindow);
        this._skillWindow.setHandler("ok", this.onSkillOk.bind(this));
        this._skillWindow.setHandler("cancel", this.onSkillCancel.bind(this));
        this.addWindow(this._skillWindow);
    };
    Scene_Battle.prototype.createItemWindow = function () {
        var wy = this._helpWindow.y + this._helpWindow.height;
        var wh = this._statusWindow.y - wy;
        this._itemWindow = new WindowBattleItem_1.Window_BattleItem(0, wy, Graphics_1.Graphics.boxWidth, wh);
        this._itemWindow.setHelpWindow(this._helpWindow);
        this._itemWindow.setHandler("ok", this.onItemOk.bind(this));
        this._itemWindow.setHandler("cancel", this.onItemCancel.bind(this));
        this.addWindow(this._itemWindow);
    };
    Scene_Battle.prototype.createActorWindow = function () {
        this._actorWindow = new WindowBattleActor_1.Window_BattleActor(0, this._statusWindow.y);
        this._actorWindow.setHandler("ok", this.onActorOk.bind(this));
        this._actorWindow.setHandler("cancel", this.onActorCancel.bind(this));
        this.addWindow(this._actorWindow);
    };
    Scene_Battle.prototype.createEnemyWindow = function () {
        this._enemyWindow = new WindowBattleEnemy_1.Window_BattleEnemy(0, this._statusWindow.y);
        this._enemyWindow.x = Graphics_1.Graphics.boxWidth - this._enemyWindow.width;
        this._enemyWindow.setHandler("ok", this.onEnemyOk.bind(this));
        this._enemyWindow.setHandler("cancel", this.onEnemyCancel.bind(this));
        this.addWindow(this._enemyWindow);
    };
    Scene_Battle.prototype.createMessageWindow = function () {
        var _this = this;
        this._messageWindow = new WindowMessage_1.Window_Message();
        this.addWindow(this._messageWindow);
        this._messageWindow.subWindows().forEach(function (window) {
            _this.addWindow(window);
        });
    };
    Scene_Battle.prototype.createScrollTextWindow = function () {
        this._scrollTextWindow = new WindowScrollText_1.Window_ScrollText();
        this.addWindow(this._scrollTextWindow);
    };
    Scene_Battle.prototype.refreshStatus = function () {
        this._statusWindow.refresh();
    };
    Scene_Battle.prototype.startPartyCommandSelection = function () {
        this.refreshStatus();
        this._statusWindow.deselect();
        this._statusWindow.open();
        this._actorCommandWindow.close();
        this._partyCommandWindow.setup();
    };
    Scene_Battle.prototype.commandFight = function () {
        this.selectNextCommand();
    };
    Scene_Battle.prototype.commandEscape = function () {
        BattleManager_1.BattleManager.processEscape();
        this.changeInputWindow();
    };
    Scene_Battle.prototype.startActorCommandSelection = function () {
        this._statusWindow.select(BattleManager_1.BattleManager.actor().index());
        this._partyCommandWindow.close();
        this._actorCommandWindow.setup(BattleManager_1.BattleManager.actor());
    };
    Scene_Battle.prototype.commandAttack = function () {
        BattleManager_1.BattleManager.inputtingAction().setAttack();
        this.selectEnemySelection();
    };
    Scene_Battle.prototype.commandSkill = function () {
        this._skillWindow.setActor(BattleManager_1.BattleManager.actor());
        this._skillWindow.setStypeId(this._actorCommandWindow.currentExt());
        this._skillWindow.refresh();
        this._skillWindow.show();
        this._skillWindow.activate();
    };
    Scene_Battle.prototype.commandGuard = function () {
        BattleManager_1.BattleManager.inputtingAction().setGuard();
        this.selectNextCommand();
    };
    Scene_Battle.prototype.commandItem = function () {
        this._itemWindow.refresh();
        this._itemWindow.show();
        this._itemWindow.activate();
    };
    Scene_Battle.prototype.selectNextCommand = function () {
        BattleManager_1.BattleManager.selectNextCommand();
        this.changeInputWindow();
    };
    Scene_Battle.prototype.selectPreviousCommand = function () {
        BattleManager_1.BattleManager.selectPreviousCommand();
        this.changeInputWindow();
    };
    Scene_Battle.prototype.selectActorSelection = function () {
        this._actorWindow.refresh();
        this._actorWindow.show();
        this._actorWindow.activate();
    };
    Scene_Battle.prototype.onActorOk = function () {
        var action = BattleManager_1.BattleManager.inputtingAction();
        action.setTarget(this._actorWindow.index());
        this._actorWindow.hide();
        this._skillWindow.hide();
        this._itemWindow.hide();
        this.selectNextCommand();
    };
    Scene_Battle.prototype.onActorCancel = function () {
        this._actorWindow.hide();
        switch (this._actorCommandWindow.currentSymbol()) {
            case "skill":
                this._skillWindow.show();
                this._skillWindow.activate();
                break;
            case "item":
                this._itemWindow.show();
                this._itemWindow.activate();
                break;
        }
    };
    Scene_Battle.prototype.selectEnemySelection = function () {
        this._enemyWindow.refresh();
        this._enemyWindow.show();
        this._enemyWindow.select(0);
        this._enemyWindow.activate();
    };
    Scene_Battle.prototype.onEnemyOk = function () {
        var action = BattleManager_1.BattleManager.inputtingAction();
        action.setTarget(this._enemyWindow.enemyIndex());
        this._enemyWindow.hide();
        this._skillWindow.hide();
        this._itemWindow.hide();
        this.selectNextCommand();
    };
    Scene_Battle.prototype.onEnemyCancel = function () {
        this._enemyWindow.hide();
        switch (this._actorCommandWindow.currentSymbol()) {
            case "attack":
                this._actorCommandWindow.activate();
                break;
            case "skill":
                this._skillWindow.show();
                this._skillWindow.activate();
                break;
            case "item":
                this._itemWindow.show();
                this._itemWindow.activate();
                break;
        }
    };
    Scene_Battle.prototype.onSkillOk = function () {
        var skill = this._skillWindow.item();
        var action = BattleManager_1.BattleManager.inputtingAction();
        action.setSkill(skill.id);
        BattleManager_1.BattleManager.actor().setLastBattleSkill(skill);
        this.onSelectAction();
    };
    Scene_Battle.prototype.onSkillCancel = function () {
        this._skillWindow.hide();
        this._actorCommandWindow.activate();
    };
    Scene_Battle.prototype.onItemOk = function () {
        var item = this._itemWindow.item();
        var action = BattleManager_1.BattleManager.inputtingAction();
        action.setItem(item.id);
        globals_1.$gameParty.setLastItem(item);
        this.onSelectAction();
    };
    Scene_Battle.prototype.onItemCancel = function () {
        this._itemWindow.hide();
        this._actorCommandWindow.activate();
    };
    Scene_Battle.prototype.onSelectAction = function () {
        var action = BattleManager_1.BattleManager.inputtingAction();
        this._skillWindow.hide();
        this._itemWindow.hide();
        if (!action.needsSelection()) {
            this.selectNextCommand();
        }
        else if (action.isForOpponent()) {
            this.selectEnemySelection();
        }
        else {
            this.selectActorSelection();
        }
    };
    Scene_Battle.prototype.endCommandSelection = function () {
        this._partyCommandWindow.close();
        this._actorCommandWindow.close();
        this._statusWindow.deselect();
    };
    return Scene_Battle;
}(SceneBase_1.Scene_Base));
exports.Scene_Battle = Scene_Battle;

},{"../core/Graphics":14,"../managers/AudioManager":33,"../managers/BattleManager":34,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/globals":43,"../sprites/SpritesetBattle":109,"../windows/WindowActorCommand":111,"../windows/WindowBattleActor":113,"../windows/WindowBattleEnemy":114,"../windows/WindowBattleItem":115,"../windows/WindowBattleLog":116,"../windows/WindowBattleSkill":117,"../windows/WindowBattleStatus":118,"../windows/WindowHelp":128,"../windows/WindowMessage":136,"../windows/WindowPartyCommand":139,"../windows/WindowScrollText":141,"./SceneBase":74,"./SceneGameOver":80,"./SceneTitle":92}],76:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Boot = void 0;
var Graphics_1 = require("../core/Graphics");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var SceneBase_1 = require("./SceneBase");
var SceneTitle_1 = require("./SceneTitle");
var Scene_Boot = /** @class */ (function (_super) {
    __extends(Scene_Boot, _super);
    function Scene_Boot() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Boot.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Boot.loadSystemImages = function () {
        ImageManager_1.ImageManager.reserveSystem("IconSet");
        ImageManager_1.ImageManager.reserveSystem("Balloon");
        ImageManager_1.ImageManager.reserveSystem("Shadow1");
        ImageManager_1.ImageManager.reserveSystem("Shadow2");
        ImageManager_1.ImageManager.reserveSystem("Damage");
        ImageManager_1.ImageManager.reserveSystem("States");
        ImageManager_1.ImageManager.reserveSystem("Weapons1");
        ImageManager_1.ImageManager.reserveSystem("Weapons2");
        ImageManager_1.ImageManager.reserveSystem("Weapons3");
        ImageManager_1.ImageManager.reserveSystem("ButtonSet");
    };
    Scene_Boot.prototype.initialize = function () {
        this._startDate = Date.now();
        _super.prototype.initialize.call(this);
    };
    Scene_Boot.prototype.create = function () {
        SceneBase_1.Scene_Base.prototype.create.call(this);
        DataManager_1.DataManager.loadDatabase();
        // ConfigManager.load();
        this.loadSystemWindowImage();
        // DataManagerからここへ移動。
        // ファイルロードに関することはすべてcreate()で完結させたい。
        Scene_Boot.loadSystemImages();
    };
    Scene_Boot.prototype.loadSystemWindowImage = function () {
        ImageManager_1.ImageManager.reserveSystem("Window");
    };
    Scene_Boot.prototype.isReady = function () {
        if (SceneBase_1.Scene_Base.prototype.isReady.call(this)) {
            return DataManager_1.DataManager.isDatabaseLoaded() && this.isGameFontLoaded();
        }
        else {
            return false;
        }
    };
    Scene_Boot.prototype.isGameFontLoaded = function () {
        if (Graphics_1.Graphics.isFontLoaded("GameFont")) {
            return true;
        }
        else if (!Graphics_1.Graphics.canUseCssFontLoading()) {
            var elapsed = Date.now() - this._startDate;
            if (elapsed >= 60000) {
                throw new Error("Failed to load GameFont");
            }
        }
    };
    Scene_Boot.prototype.start = function () {
        SceneBase_1.Scene_Base.prototype.start.call(this);
        SoundManager_1.SoundManager.preloadImportantSounds();
        if (DataManager_1.DataManager.isBattleTest() && false) {
            // DataManager.setupBattleTest();
            // SceneManager.goto(Scene_Battle);
        }
        else if (DataManager_1.DataManager.isEventTest() && false) {
            // DataManager.setupEventTest();
            // SceneManager.goto(Scene_Map);
        }
        else {
            this.checkPlayerLocation();
            DataManager_1.DataManager.setupNewGame();
            SceneManager_1.SceneManager.goto(SceneTitle_1.Scene_Title);
            // Window_TitleCommand.initCommandPosition();
        }
        this.updateDocumentTitle();
    };
    Scene_Boot.prototype.updateDocumentTitle = function () {
        // document.title = $dataSystem.gameTitle;
    };
    Scene_Boot.prototype.checkPlayerLocation = function () {
        if (globals_1.$dataSystem.startMapId === 0) {
            throw new Error('Player"s starting position is not set');
        }
    };
    return Scene_Boot;
}(SceneBase_1.Scene_Base));
exports.Scene_Boot = Scene_Boot;

},{"../core/Graphics":14,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/globals":43,"./SceneBase":74,"./SceneTitle":92}],77:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Equip = void 0;
var Graphics_1 = require("../core/Graphics");
var SoundManager_1 = require("../managers/SoundManager");
var WindowEquipCommand_1 = require("../windows/WindowEquipCommand");
var WindowEquipItem_1 = require("../windows/WindowEquipItem");
var WindowEquipSlot_1 = require("../windows/WindowEquipSlot");
var WindowEquipStatus_1 = require("../windows/WindowEquipStatus");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_Equip = /** @class */ (function (_super) {
    __extends(Scene_Equip, _super);
    function Scene_Equip() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Equip.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Equip.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Equip.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createHelpWindow();
        this.createStatusWindow();
        this.createCommandWindow();
        this.createSlotWindow();
        this.createItemWindow();
        this.refreshActor();
    };
    Scene_Equip.prototype.createStatusWindow = function () {
        this._statusWindow = new WindowEquipStatus_1.Window_EquipStatus(0, this._helpWindow.height);
        this.addWindow(this._statusWindow);
    };
    Scene_Equip.prototype.createCommandWindow = function () {
        var wx = this._statusWindow.width;
        var wy = this._helpWindow.height;
        var ww = Graphics_1.Graphics.boxWidth - this._statusWindow.width;
        this._commandWindow = new WindowEquipCommand_1.Window_EquipCommand(wx, wy, ww);
        this._commandWindow.setHelpWindow(this._helpWindow);
        this._commandWindow.setHandler("equip", this.commandEquip.bind(this));
        this._commandWindow.setHandler("optimize", this.commandOptimize.bind(this));
        this._commandWindow.setHandler("clear", this.commandClear.bind(this));
        this._commandWindow.setHandler("cancel", this.popScene.bind(this));
        this._commandWindow.setHandler("pagedown", this.nextActor.bind(this));
        this._commandWindow.setHandler("pageup", this.previousActor.bind(this));
        this.addWindow(this._commandWindow);
    };
    Scene_Equip.prototype.createSlotWindow = function () {
        var wx = this._statusWindow.width;
        var wy = this._commandWindow.y + this._commandWindow.height;
        var ww = Graphics_1.Graphics.boxWidth - this._statusWindow.width;
        var wh = this._statusWindow.height - this._commandWindow.height;
        this._slotWindow = new WindowEquipSlot_1.Window_EquipSlot(wx, wy, ww, wh);
        this._slotWindow.setHelpWindow(this._helpWindow);
        this._slotWindow.setStatusWindow(this._statusWindow);
        this._slotWindow.setHandler("ok", this.onSlotOk.bind(this));
        this._slotWindow.setHandler("cancel", this.onSlotCancel.bind(this));
        this.addWindow(this._slotWindow);
    };
    Scene_Equip.prototype.createItemWindow = function () {
        var wx = 0;
        var wy = this._statusWindow.y + this._statusWindow.height;
        var ww = Graphics_1.Graphics.boxWidth;
        var wh = Graphics_1.Graphics.boxHeight - wy;
        this._itemWindow = new WindowEquipItem_1.Window_EquipItem(wx, wy, ww, wh);
        this._itemWindow.setHelpWindow(this._helpWindow);
        this._itemWindow.setStatusWindow(this._statusWindow);
        this._itemWindow.setHandler("ok", this.onItemOk.bind(this));
        this._itemWindow.setHandler("cancel", this.onItemCancel.bind(this));
        this._slotWindow.setItemWindow(this._itemWindow);
        this.addWindow(this._itemWindow);
    };
    Scene_Equip.prototype.refreshActor = function () {
        var actor = this.actor();
        this._statusWindow.setActor(actor);
        this._slotWindow.setActor(actor);
        this._itemWindow.setActor(actor);
    };
    Scene_Equip.prototype.commandEquip = function () {
        this._slotWindow.activate();
        this._slotWindow.select(0);
    };
    Scene_Equip.prototype.commandOptimize = function () {
        SoundManager_1.SoundManager.playEquip();
        this.actor().optimizeEquipments();
        this._statusWindow.refresh();
        this._slotWindow.refresh();
        this._commandWindow.activate();
    };
    Scene_Equip.prototype.commandClear = function () {
        SoundManager_1.SoundManager.playEquip();
        this.actor().clearEquipments();
        this._statusWindow.refresh();
        this._slotWindow.refresh();
        this._commandWindow.activate();
    };
    Scene_Equip.prototype.onSlotOk = function () {
        this._itemWindow.activate();
        this._itemWindow.select(0);
    };
    Scene_Equip.prototype.onSlotCancel = function () {
        this._slotWindow.deselect();
        this._commandWindow.activate();
    };
    Scene_Equip.prototype.onItemOk = function () {
        SoundManager_1.SoundManager.playEquip();
        this.actor().changeEquip(this._slotWindow.index(), this._itemWindow.item());
        this._slotWindow.activate();
        this._slotWindow.refresh();
        this._itemWindow.deselect();
        this._itemWindow.refresh();
        this._statusWindow.refresh();
    };
    Scene_Equip.prototype.onItemCancel = function () {
        this._slotWindow.activate();
        this._itemWindow.deselect();
    };
    Scene_Equip.prototype.onActorChange = function () {
        this.refreshActor();
        this._commandWindow.activate();
    };
    return Scene_Equip;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_Equip = Scene_Equip;

},{"../core/Graphics":14,"../managers/SoundManager":40,"../windows/WindowEquipCommand":121,"../windows/WindowEquipItem":122,"../windows/WindowEquipSlot":123,"../windows/WindowEquipStatus":124,"./SceneMenuBase":86}],78:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_File = void 0;
var Graphics_1 = require("../core/Graphics");
var DataManager_1 = require("../managers/DataManager");
var WindowHelp_1 = require("../windows/WindowHelp");
var WindowSavefileList_1 = require("../windows/WindowSavefileList");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_File = /** @class */ (function (_super) {
    __extends(Scene_File, _super);
    function Scene_File() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_File.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_File.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_File.prototype.create = function () {
        _super.prototype.create.call(this);
        DataManager_1.DataManager.loadAllSavefileImages();
        this.createHelpWindow();
        this.createListWindow();
    };
    Scene_File.prototype.start = function () {
        _super.prototype.start.call(this);
        this._listWindow.refresh();
    };
    Scene_File.prototype.savefileId = function () {
        return this._listWindow.index() + 1;
    };
    Scene_File.prototype.createHelpWindow = function () {
        this._helpWindow = new WindowHelp_1.Window_Help(1);
        this._helpWindow.setText(this.helpWindowText());
        this.addWindow(this._helpWindow);
    };
    Scene_File.prototype.createListWindow = function () {
        var x = 0;
        var y = this._helpWindow.height;
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight - y;
        this._listWindow = new WindowSavefileList_1.Window_SavefileList(x, y, width, height);
        this._listWindow.setHandler("ok", this.onSavefileOk.bind(this));
        this._listWindow.setHandler("cancel", this.popScene.bind(this));
        this._listWindow.select(this.firstSavefileIndex());
        this._listWindow.setTopRow(this.firstSavefileIndex() - 2);
        this._listWindow.setMode(this.mode());
        this._listWindow.refresh();
        this.addWindow(this._listWindow);
    };
    Scene_File.prototype.mode = function () {
        return null;
    };
    Scene_File.prototype.activateListWindow = function () {
        this._listWindow.activate();
    };
    Scene_File.prototype.helpWindowText = function () {
        return "";
    };
    Scene_File.prototype.firstSavefileIndex = function () {
        return 0;
    };
    Scene_File.prototype.onSavefileOk = function () {
        //
    };
    return Scene_File;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_File = Scene_File;

},{"../core/Graphics":14,"../managers/DataManager":36,"../windows/WindowHelp":128,"../windows/WindowSavefileList":140,"./SceneMenuBase":86}],79:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_GameEnd = void 0;
var SceneManager_1 = require("../managers/SceneManager");
var WindowGameEnd_1 = require("../windows/WindowGameEnd");
var SceneMenuBase_1 = require("./SceneMenuBase");
var SceneTitle_1 = require("./SceneTitle");
var Scene_GameEnd = /** @class */ (function (_super) {
    __extends(Scene_GameEnd, _super);
    function Scene_GameEnd() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_GameEnd.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_GameEnd.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_GameEnd.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createCommandWindow();
    };
    Scene_GameEnd.prototype.stop = function () {
        _super.prototype.stop.call(this);
        this._commandWindow.close();
    };
    Scene_GameEnd.prototype.createBackground = function () {
        SceneMenuBase_1.Scene_MenuBase.prototype.createBackground.call(this);
        this.setBackgroundOpacity(128);
    };
    Scene_GameEnd.prototype.createCommandWindow = function () {
        this._commandWindow = new WindowGameEnd_1.Window_GameEnd();
        this._commandWindow.setHandler("toTitle", this.commandToTitle.bind(this));
        this._commandWindow.setHandler("cancel", this.popScene.bind(this));
        this.addWindow(this._commandWindow);
    };
    Scene_GameEnd.prototype.commandToTitle = function () {
        this.fadeOutAll();
        SceneManager_1.SceneManager.goto(SceneTitle_1.Scene_Title);
    };
    return Scene_GameEnd;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_GameEnd = Scene_GameEnd;

},{"../managers/SceneManager":39,"../windows/WindowGameEnd":126,"./SceneMenuBase":86,"./SceneTitle":92}],80:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Gameover = void 0;
var Sprite_1 = require("../core/Sprite");
var TouchInput_1 = require("../core/TouchInput");
var AudioManager_1 = require("../managers/AudioManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SceneBase_1 = require("./SceneBase");
var SceneTitle_1 = require("./SceneTitle");
var Scene_Gameover = /** @class */ (function (_super) {
    __extends(Scene_Gameover, _super);
    function Scene_Gameover() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Gameover.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Gameover.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Gameover.prototype.create = function () {
        _super.prototype.create.call(this);
        this.playGameoverMusic();
        this.createBackground();
    };
    Scene_Gameover.prototype.start = function () {
        _super.prototype.start.call(this);
        this.startFadeIn(this.slowFadeSpeed(), false);
    };
    Scene_Gameover.prototype.update = function () {
        if (this.isActive() && !this.isBusy() && this.isTriggered()) {
            this.gotoTitle();
        }
        _super.prototype.update.call(this);
    };
    Scene_Gameover.prototype.stop = function () {
        SceneBase_1.Scene_Base.prototype.stop.call(this);
        this.fadeOutAll();
    };
    Scene_Gameover.prototype.terminate = function () {
        SceneBase_1.Scene_Base.prototype.terminate.call(this);
        AudioManager_1.AudioManager.stopAll();
    };
    Scene_Gameover.prototype.playGameoverMusic = function () {
        AudioManager_1.AudioManager.stopBgm();
        AudioManager_1.AudioManager.stopBgs();
        AudioManager_1.AudioManager.playMe(globals_1.$dataSystem.gameoverMe);
    };
    Scene_Gameover.prototype.createBackground = function () {
        this._backSprite = new Sprite_1.Sprite();
        this._backSprite.bitmap = ImageManager_1.ImageManager.loadSystem("GameOver");
        this.addChild(this._backSprite);
    };
    Scene_Gameover.prototype.isTriggered = function () {
        return /* Input.isTriggered("ok") ||*/ TouchInput_1.TouchInput.isTriggered();
    };
    Scene_Gameover.prototype.gotoTitle = function () {
        SceneManager_1.SceneManager.goto(SceneTitle_1.Scene_Title);
    };
    return Scene_Gameover;
}(SceneBase_1.Scene_Base));
exports.Scene_Gameover = Scene_Gameover;

},{"../core/Sprite":21,"../core/TouchInput":27,"../managers/AudioManager":33,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/globals":43,"./SceneBase":74,"./SceneTitle":92}],81:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Item = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var WindowItemCategory_1 = require("../windows/WindowItemCategory");
var WindowItemList_1 = require("../windows/WindowItemList");
var SceneItemBase_1 = require("./SceneItemBase");
var Scene_Item = /** @class */ (function (_super) {
    __extends(Scene_Item, _super);
    function Scene_Item() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Item.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Item.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Item.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createHelpWindow();
        this.createCategoryWindow();
        this.createItemWindow();
        this.createActorWindow();
    };
    Scene_Item.prototype.createCategoryWindow = function () {
        this._categoryWindow = new WindowItemCategory_1.Window_ItemCategory();
        this._categoryWindow.setHelpWindow(this._helpWindow);
        this._categoryWindow.y = this._helpWindow.height;
        this._categoryWindow.setHandler("ok", this.onCategoryOk.bind(this));
        this._categoryWindow.setHandler("cancel", this.popScene.bind(this));
        this.addWindow(this._categoryWindow);
    };
    Scene_Item.prototype.createItemWindow = function () {
        var wy = this._categoryWindow.y + this._categoryWindow.height;
        var wh = Graphics_1.Graphics.boxHeight - wy;
        this._itemWindow = new WindowItemList_1.Window_ItemList(0, wy, Graphics_1.Graphics.boxWidth, wh);
        this._itemWindow.setHelpWindow(this._helpWindow);
        this._itemWindow.setHandler("ok", this.onItemOk.bind(this));
        this._itemWindow.setHandler("cancel", this.onItemCancel.bind(this));
        this.addWindow(this._itemWindow);
        this._categoryWindow.setItemWindow(this._itemWindow);
    };
    Scene_Item.prototype.user = function () {
        var members = globals_1.$gameParty.movableMembers();
        var bestActor = members[0];
        var bestPha = 0;
        for (var i = 0; i < members.length; i++) {
            if (members[i].pha > bestPha) {
                bestPha = members[i].pha;
                bestActor = members[i];
            }
        }
        return bestActor;
    };
    Scene_Item.prototype.onCategoryOk = function () {
        this._itemWindow.activate();
        this._itemWindow.selectLast();
    };
    Scene_Item.prototype.onItemOk = function () {
        globals_1.$gameParty.setLastItem(this.item());
        this.determineItem();
    };
    Scene_Item.prototype.onItemCancel = function () {
        this._itemWindow.deselect();
        this._categoryWindow.activate();
    };
    Scene_Item.prototype.playSeForItem = function () {
        SoundManager_1.SoundManager.playUseItem();
    };
    Scene_Item.prototype.useItem = function () {
        SceneItemBase_1.Scene_ItemBase.prototype.useItem.call(this);
        this._itemWindow.redrawCurrentItem();
    };
    return Scene_Item;
}(SceneItemBase_1.Scene_ItemBase));
exports.Scene_Item = Scene_Item;

},{"../core/Graphics":14,"../managers/SoundManager":40,"../managers/globals":43,"../windows/WindowItemCategory":130,"../windows/WindowItemList":131,"./SceneItemBase":82}],82:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_ItemBase = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var GameAction_1 = require("../objects/GameAction");
var WindowMenuActor_1 = require("../windows/WindowMenuActor");
var SceneMap_1 = require("./SceneMap");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_ItemBase = /** @class */ (function (_super) {
    __extends(Scene_ItemBase, _super);
    function Scene_ItemBase() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_ItemBase.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_ItemBase.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_ItemBase.prototype.create = function () {
        _super.prototype.create.call(this);
    };
    Scene_ItemBase.prototype.createActorWindow = function () {
        this._actorWindow = new WindowMenuActor_1.Window_MenuActor();
        this._actorWindow.setHandler("ok", this.onActorOk.bind(this));
        this._actorWindow.setHandler("cancel", this.onActorCancel.bind(this));
        this.addWindow(this._actorWindow);
    };
    Scene_ItemBase.prototype.item = function () {
        return this._itemWindow.item();
    };
    Scene_ItemBase.prototype.user = function () {
        return null;
    };
    Scene_ItemBase.prototype.isCursorLeft = function () {
        return this._itemWindow.index() % 2 === 0;
    };
    Scene_ItemBase.prototype.showSubWindow = function (window) {
        window.x = this.isCursorLeft() ? Graphics_1.Graphics.boxWidth - window.width : 0;
        window.show();
        window.activate();
    };
    Scene_ItemBase.prototype.hideSubWindow = function (window) {
        window.hide();
        window.deactivate();
        this.activateItemWindow();
    };
    Scene_ItemBase.prototype.onActorOk = function () {
        if (this.canUse()) {
            this.useItem();
        }
        else {
            SoundManager_1.SoundManager.playBuzzer();
        }
    };
    Scene_ItemBase.prototype.onActorCancel = function () {
        this.hideSubWindow(this._actorWindow);
    };
    Scene_ItemBase.prototype.determineItem = function () {
        var action = new GameAction_1.Game_Action(this.user());
        var item = this.item();
        action.setItemObject(item);
        if (action.isForFriend()) {
            this.showSubWindow(this._actorWindow);
            this._actorWindow.selectForItem(this.item());
        }
        else {
            this.useItem();
            this.activateItemWindow();
        }
    };
    Scene_ItemBase.prototype.useItem = function () {
        this.playSeForItem();
        this.user().useItem(this.item());
        this.applyItem();
        this.checkCommonEvent();
        this.checkGameover();
        this._actorWindow.refresh();
    };
    Scene_ItemBase.prototype.activateItemWindow = function () {
        this._itemWindow.refresh();
        this._itemWindow.activate();
    };
    Scene_ItemBase.prototype.itemTargetActors = function () {
        var action = new GameAction_1.Game_Action(this.user());
        action.setItemObject(this.item());
        if (!action.isForFriend()) {
            return [];
        }
        else if (action.isForAll()) {
            return globals_1.$gameParty.members();
        }
        else {
            return [globals_1.$gameParty.members()[this._actorWindow.index()]];
        }
    };
    Scene_ItemBase.prototype.canUse = function () {
        var _a;
        return ((_a = this.user()) === null || _a === void 0 ? void 0 : _a.canUse(this.item())) && this.isItemEffectsValid();
    };
    Scene_ItemBase.prototype.isItemEffectsValid = function () {
        var action = new GameAction_1.Game_Action(this.user());
        action.setItemObject(this.item());
        return this.itemTargetActors().some(function (target) {
            return action.testApply(target);
        });
    };
    Scene_ItemBase.prototype.applyItem = function () {
        var action = new GameAction_1.Game_Action(this.user());
        action.setItemObject(this.item());
        this.itemTargetActors().forEach(function (target) {
            for (var i = 0; i < action.numRepeats(); i++) {
                action.apply(target);
            }
        });
        action.applyGlobal();
    };
    Scene_ItemBase.prototype.checkCommonEvent = function () {
        if (globals_1.$gameTemp.isCommonEventReserved()) {
            SceneManager_1.SceneManager.goto(SceneMap_1.Scene_Map);
        }
    };
    Scene_ItemBase.prototype.playSeForItem = function () {
        //
    };
    return Scene_ItemBase;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_ItemBase = Scene_ItemBase;

},{"../core/Graphics":14,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/globals":43,"../objects/GameAction":44,"../windows/WindowMenuActor":133,"./SceneMap":84,"./SceneMenuBase":86}],83:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Load = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var SceneFile_1 = require("./SceneFile");
var SceneMap_1 = require("./SceneMap");
var Scene_Load = /** @class */ (function (_super) {
    __extends(Scene_Load, _super);
    function Scene_Load() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Load.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Load.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._loadSuccess = false;
    };
    Scene_Load.prototype.terminate = function () {
        _super.prototype.terminate.call(this);
        if (this._loadSuccess) {
            globals_1.$gameSystem.onAfterLoad();
        }
    };
    Scene_Load.prototype.mode = function () {
        return "load";
    };
    Scene_Load.prototype.helpWindowText = function () {
        return TextManager_1.TextManager.loadMessage;
    };
    Scene_Load.prototype.firstSavefileIndex = function () {
        return DataManager_1.DataManager.latestSavefileId() - 1;
    };
    Scene_Load.prototype.onSavefileOk = function () {
        _super.prototype.onSavefileOk.call(this);
        if (DataManager_1.DataManager.loadGame(this.savefileId())) {
            this.onLoadSuccess();
        }
        else {
            this.onLoadFailure();
        }
    };
    Scene_Load.prototype.onLoadSuccess = function () {
        SoundManager_1.SoundManager.playLoad();
        this.fadeOutAll();
        this.reloadMapIfUpdated();
        SceneManager_1.SceneManager.goto(SceneMap_1.Scene_Map);
        this._loadSuccess = true;
    };
    Scene_Load.prototype.onLoadFailure = function () {
        SoundManager_1.SoundManager.playBuzzer();
        this.activateListWindow();
    };
    Scene_Load.prototype.reloadMapIfUpdated = function () {
        if (globals_1.$gameSystem.versionId() !== globals_1.$dataSystem.versionId) {
            globals_1.$gamePlayer.reserveTransfer(globals_1.$gameMap.mapId(), globals_1.$gamePlayer.x, globals_1.$gamePlayer.y);
            globals_1.$gamePlayer.requestMapReload();
        }
    };
    return Scene_Load;
}(SceneFile_1.Scene_File));
exports.Scene_Load = Scene_Load;

},{"../managers/DataManager":36,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./SceneFile":78,"./SceneMap":84}],84:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Map = void 0;
var TouchInput_1 = require("../core/TouchInput");
var AudioManager_1 = require("../managers/AudioManager");
var BattleManager_1 = require("../managers/BattleManager");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SoundManager_1 = require("../managers/SoundManager");
var SpritesetMap_1 = require("../sprites/SpritesetMap");
var WindowMapName_1 = require("../windows/WindowMapName");
var WindowMenuCommand_1 = require("../windows/WindowMenuCommand");
var WindowMessage_1 = require("../windows/WindowMessage");
var WindowScrollText_1 = require("../windows/WindowScrollText");
var SceneBase_1 = require("./SceneBase");
var SceneBattle_1 = require("./SceneBattle");
var SceneGameOver_1 = require("./SceneGameOver");
var SceneMenu_1 = require("./SceneMenu");
var SceneTitle_1 = require("./SceneTitle");
var Scene_Map = /** @class */ (function (_super) {
    __extends(Scene_Map, _super);
    function Scene_Map() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Map.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Map.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._waitCount = 0;
        this._encounterEffectDuration = 0;
        this._mapLoaded = false;
        this._touchCount = 0;
    };
    Scene_Map.prototype.create = function () {
        _super.prototype.create.call(this);
        this._transfer = globals_1.$gamePlayer.isTransferring();
        var mapId = this._transfer ? globals_1.$gamePlayer.newMapId() : globals_1.$gameMap.mapId();
        DataManager_1.DataManager.loadMapData(mapId);
    };
    Scene_Map.prototype.isReady = function () {
        if (!this._mapLoaded && DataManager_1.DataManager.isMapLoaded()) {
            // NOTE: `assetLoadHandler()` で呼び出す
            // this.onMapLoaded();
            // this._mapLoaded = true;
        }
        return this._mapLoaded && _super.prototype.isReady.call(this);
    };
    Scene_Map.prototype.onMapLoaded = function () {
        if (this._transfer) {
            globals_1.$gamePlayer.performTransfer();
        }
        this.createDisplayObjects();
    };
    Scene_Map.prototype.assetLoadHandler = function (_asset, _assetManager, _holder) {
        if (this._mapLoaded) {
            return 0;
        }
        if (DataManager_1.DataManager.isMapLoaded()) {
            this.onMapLoaded(); // 画像のロードリクエストが走っているはず
            this._mapLoaded = true;
        }
        return 0;
    };
    Scene_Map.prototype.start = function () {
        _super.prototype.start.call(this);
        SceneManager_1.SceneManager.clearStack();
        if (this._transfer) {
            this.fadeInForTransfer();
            this._mapNameWindow.open();
            globals_1.$gameMap.autoplay();
        }
        else if (this.needsFadeIn()) {
            this.startFadeIn(this.fadeSpeed(), false);
        }
        this.menuCalling = false;
    };
    Scene_Map.prototype.update = function () {
        this.updateDestination();
        this.updateMainMultiply();
        if (this.isSceneChangeOk()) {
            this.updateScene();
        }
        else if (SceneManager_1.SceneManager.isNextScene(SceneBattle_1.Scene_Battle)) {
            this.updateEncounterEffect();
        }
        this.updateWaitCount();
        _super.prototype.update.call(this);
    };
    Scene_Map.prototype.updateMainMultiply = function () {
        this.updateMain();
        if (this.isFastForward()) {
            this.updateMain();
        }
    };
    Scene_Map.prototype.updateMain = function () {
        var active = this.isActive();
        globals_1.$gameMap.update(active);
        globals_1.$gamePlayer.update(active);
        globals_1.$gameTimer.update(active);
        globals_1.$gameScreen.update();
    };
    Scene_Map.prototype.isFastForward = function () {
        return globals_1.$gameMap.isEventRunning() && !SceneManager_1.SceneManager.isSceneChanging() && /* Input.isLongPressed('ok') ||*/ TouchInput_1.TouchInput.isLongPressed();
    };
    Scene_Map.prototype.stop = function () {
        _super.prototype.stop.call(this);
        globals_1.$gamePlayer.straighten();
        this._mapNameWindow.close();
        if (this.needsSlowFadeOut()) {
            this.startFadeOut(this.slowFadeSpeed(), false);
        }
        else if (SceneManager_1.SceneManager.isNextScene(Scene_Map)) {
            this.fadeOutForTransfer();
        }
        else if (SceneManager_1.SceneManager.isNextScene(SceneBattle_1.Scene_Battle)) {
            this.launchBattle();
        }
    };
    Scene_Map.prototype.isBusy = function () {
        return ((this._messageWindow && this._messageWindow.isClosing()) ||
            this._waitCount > 0 ||
            this._encounterEffectDuration > 0 ||
            _super.prototype.isBusy.call(this));
    };
    Scene_Map.prototype.terminate = function () {
        _super.prototype.terminate.call(this);
        if (!SceneManager_1.SceneManager.isNextScene(SceneBattle_1.Scene_Battle)) {
            this._spriteset.update();
            this._mapNameWindow.hide();
            SceneManager_1.SceneManager.snapForBackground();
        }
        else {
            ImageManager_1.ImageManager.clearRequest();
        }
        if (SceneManager_1.SceneManager.isNextScene(Scene_Map)) {
            ImageManager_1.ImageManager.clearRequest();
        }
        globals_1.$gameScreen.clearZoom();
        this.removeChild(this._fadeSprite);
        this.removeChild(this._mapNameWindow);
        this.removeChild(this._windowLayer);
        this.removeChild(this._spriteset);
    };
    Scene_Map.prototype.needsFadeIn = function () {
        return SceneManager_1.SceneManager.isPreviousScene(SceneBattle_1.Scene_Battle);
        // || SceneManager.isPreviousScene(Scene_Load)); // Scene_Load(ロード機能)は非サポートのため、コメントアウト
    };
    Scene_Map.prototype.needsSlowFadeOut = function () {
        return SceneManager_1.SceneManager.isNextScene(SceneTitle_1.Scene_Title) || SceneManager_1.SceneManager.isNextScene(SceneGameOver_1.Scene_Gameover);
    };
    Scene_Map.prototype.updateWaitCount = function () {
        if (this._waitCount > 0) {
            this._waitCount--;
            return true;
        }
        return false;
    };
    Scene_Map.prototype.updateDestination = function () {
        if (this.isMapTouchOk()) {
            this.processMapTouch();
        }
        else {
            globals_1.$gameTemp.clearDestination();
            this._touchCount = 0;
        }
    };
    Scene_Map.prototype.isMapTouchOk = function () {
        return this.isActive() && globals_1.$gamePlayer.canMove();
    };
    Scene_Map.prototype.processMapTouch = function () {
        if (TouchInput_1.TouchInput.isTriggered() || this._touchCount > 0) {
            if (TouchInput_1.TouchInput.isPressed()) {
                if (this._touchCount === 0 || this._touchCount >= 15) {
                    var x = globals_1.$gameMap.canvasToMapX(TouchInput_1.TouchInput.x);
                    var y = globals_1.$gameMap.canvasToMapY(TouchInput_1.TouchInput.y);
                    globals_1.$gameTemp.setDestination(x, y);
                }
                this._touchCount++;
            }
            else {
                this._touchCount = 0;
            }
        }
    };
    Scene_Map.prototype.isSceneChangeOk = function () {
        return this.isActive() && !globals_1.$gameMessage.isBusy();
    };
    Scene_Map.prototype.updateScene = function () {
        this.checkGameover();
        if (!SceneManager_1.SceneManager.isSceneChanging()) {
            this.updateTransferPlayer();
        }
        if (!SceneManager_1.SceneManager.isSceneChanging()) {
            this.updateEncounter();
        }
        if (!SceneManager_1.SceneManager.isSceneChanging()) {
            this.updateCallMenu();
        }
        if (!SceneManager_1.SceneManager.isSceneChanging()) {
            this.updateCallDebug();
        }
    };
    Scene_Map.prototype.createDisplayObjects = function () {
        this.createSpriteset();
        this.createMapNameWindow();
        this.createWindowLayer();
        this.createAllWindows();
    };
    Scene_Map.prototype.createSpriteset = function () {
        this._spriteset = new SpritesetMap_1.Spriteset_Map(); // ファイルの要求がある
        this.addChild(this._spriteset);
    };
    Scene_Map.prototype.createAllWindows = function () {
        this.createMessageWindow();
        this.createScrollTextWindow();
    };
    Scene_Map.prototype.createMapNameWindow = function () {
        this._mapNameWindow = new WindowMapName_1.Window_MapName();
        this.addChild(this._mapNameWindow);
    };
    Scene_Map.prototype.createMessageWindow = function () {
        var _this = this;
        this._messageWindow = new WindowMessage_1.Window_Message();
        this.addWindow(this._messageWindow);
        this._messageWindow.subWindows().forEach(function (window) {
            _this.addWindow(window);
        });
    };
    Scene_Map.prototype.createScrollTextWindow = function () {
        this._scrollTextWindow = new WindowScrollText_1.Window_ScrollText();
        this.addWindow(this._scrollTextWindow);
    };
    Scene_Map.prototype.updateTransferPlayer = function () {
        if (globals_1.$gamePlayer.isTransferring()) {
            SceneManager_1.SceneManager.goto(Scene_Map);
        }
    };
    Scene_Map.prototype.updateEncounter = function () {
        if (globals_1.$gamePlayer.executeEncounter()) {
            SceneManager_1.SceneManager.push(SceneBattle_1.Scene_Battle);
        }
    };
    Scene_Map.prototype.updateCallMenu = function () {
        if (this.isMenuEnabled()) {
            if (this.isMenuCalled()) {
                this.menuCalling = true;
            }
            if (this.menuCalling && !globals_1.$gamePlayer.isMoving()) {
                this.callMenu();
            }
        }
        else {
            this.menuCalling = false;
        }
    };
    Scene_Map.prototype.isMenuEnabled = function () {
        return globals_1.$gameSystem.isMenuEnabled() && !globals_1.$gameMap.isEventRunning();
    };
    Scene_Map.prototype.isMenuCalled = function () {
        return /* Input.isTriggered('menu') ||*/ TouchInput_1.TouchInput.isCancelled();
    };
    Scene_Map.prototype.callMenu = function () {
        // メニュー表示機能
        SoundManager_1.SoundManager.playOk();
        SceneManager_1.SceneManager.push(SceneMenu_1.Scene_Menu);
        WindowMenuCommand_1.Window_MenuCommand.initCommandPosition();
        globals_1.$gameTemp.clearDestination();
        this._mapNameWindow.hide();
        this._waitCount = 2;
    };
    Scene_Map.prototype.updateCallDebug = function () {
        if (this.isDebugCalled()) {
            SceneManager_1.SceneManager.push(Scene_Debug);
        }
    };
    Scene_Map.prototype.isDebugCalled = function () {
        return /* Input.isTriggered('debug') &&*/ globals_1.$gameTemp.isPlaytest();
    };
    Scene_Map.prototype.fadeInForTransfer = function () {
        var fadeType = globals_1.$gamePlayer.fadeType();
        switch (fadeType) {
            case 0:
            case 1:
                this.startFadeIn(this.fadeSpeed(), fadeType === 1);
                break;
        }
    };
    Scene_Map.prototype.fadeOutForTransfer = function () {
        var fadeType = globals_1.$gamePlayer.fadeType();
        switch (fadeType) {
            case 0:
            case 1:
                this.startFadeOut(this.fadeSpeed(), fadeType === 1);
                break;
        }
    };
    Scene_Map.prototype.launchBattle = function () {
        BattleManager_1.BattleManager.saveBgmAndBgs();
        this.stopAudioOnBattleStart();
        SoundManager_1.SoundManager.playBattleStart();
        this.startEncounterEffect();
        this._mapNameWindow.hide();
    };
    Scene_Map.prototype.stopAudioOnBattleStart = function () {
        if (!AudioManager_1.AudioManager.isCurrentBgm(globals_1.$gameSystem.battleBgm())) {
            AudioManager_1.AudioManager.stopBgm();
        }
        AudioManager_1.AudioManager.stopBgs();
        AudioManager_1.AudioManager.stopMe();
        AudioManager_1.AudioManager.stopSe();
    };
    Scene_Map.prototype.startEncounterEffect = function () {
        this._spriteset.hideCharacters();
        this._encounterEffectDuration = this.encounterEffectSpeed();
    };
    Scene_Map.prototype.updateEncounterEffect = function () {
        if (this._encounterEffectDuration > 0) {
            this._encounterEffectDuration--;
            var speed = this.encounterEffectSpeed();
            var n = speed - this._encounterEffectDuration;
            var p = n / speed;
            var q = ((p - 1) * 20 * p + 5) * p + 1;
            var zoomX = globals_1.$gamePlayer.screenX();
            var zoomY = globals_1.$gamePlayer.screenY() - 24;
            if (n === 2) {
                globals_1.$gameScreen.setZoom(zoomX, zoomY, 1);
                this.snapForBattleBackground();
                this.startFlashForEncounter(speed / 2);
            }
            globals_1.$gameScreen.setZoom(zoomX, zoomY, q);
            if (n === Math.floor(speed / 6)) {
                this.startFlashForEncounter(speed / 2);
            }
            if (n === Math.floor(speed / 2)) {
                BattleManager_1.BattleManager.playBattleBgm();
                this.startFadeOut(this.fadeSpeed());
            }
        }
    };
    Scene_Map.prototype.snapForBattleBackground = function () {
        this._windowLayer.visible = false;
        SceneManager_1.SceneManager.snapForBackground();
        this._windowLayer.visible = true;
    };
    Scene_Map.prototype.startFlashForEncounter = function (duration) {
        var color = [255, 255, 255, 255];
        globals_1.$gameScreen.startFlash(color, duration);
    };
    Scene_Map.prototype.encounterEffectSpeed = function () {
        return 60;
    };
    return Scene_Map;
}(SceneBase_1.Scene_Base));
exports.Scene_Map = Scene_Map;

},{"../core/TouchInput":27,"../managers/AudioManager":33,"../managers/BattleManager":34,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/SoundManager":40,"../managers/globals":43,"../sprites/SpritesetMap":110,"../windows/WindowMapName":132,"../windows/WindowMenuCommand":134,"../windows/WindowMessage":136,"../windows/WindowScrollText":141,"./SceneBase":74,"./SceneBattle":75,"./SceneGameOver":80,"./SceneMenu":85,"./SceneTitle":92}],85:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Menu = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var SceneManager_1 = require("../managers/SceneManager");
var WindowGold_1 = require("../windows/WindowGold");
var WindowMenuCommand_1 = require("../windows/WindowMenuCommand");
var WindowMenuStatus_1 = require("../windows/WindowMenuStatus");
var SceneEquip_1 = require("./SceneEquip");
var SceneGameEnd_1 = require("./SceneGameEnd");
var SceneItem_1 = require("./SceneItem");
var SceneMenuBase_1 = require("./SceneMenuBase");
var SceneSkill_1 = require("./SceneSkill");
var SceneStatus_1 = require("./SceneStatus");
var Scene_Menu = /** @class */ (function (_super) {
    __extends(Scene_Menu, _super);
    function Scene_Menu() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Menu.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Menu.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Menu.prototype.create = function () {
        SceneMenuBase_1.Scene_MenuBase.prototype.create.call(this);
        this.createCommandWindow();
        this.createGoldWindow();
        this.createStatusWindow();
    };
    Scene_Menu.prototype.start = function () {
        SceneMenuBase_1.Scene_MenuBase.prototype.start.call(this);
        this._statusWindow.refresh();
    };
    Scene_Menu.prototype.createCommandWindow = function () {
        this._commandWindow = new WindowMenuCommand_1.Window_MenuCommand(0, 0);
        this._commandWindow.setHandler("item", this.commandItem.bind(this));
        this._commandWindow.setHandler("skill", this.commandPersonal.bind(this));
        this._commandWindow.setHandler("equip", this.commandPersonal.bind(this));
        this._commandWindow.setHandler("status", this.commandPersonal.bind(this));
        this._commandWindow.setHandler("formation", this.commandFormation.bind(this));
        // オプション機能とセーブ機能は非サポート要件なので、コメントアウト
        // this._commandWindow.setHandler("options",   this.commandOptions.bind(this));
        // this._commandWindow.setHandler("save",      this.commandSave.bind(this));
        this._commandWindow.setHandler("gameEnd", this.commandGameEnd.bind(this));
        this._commandWindow.setHandler("cancel", this.popScene.bind(this));
        this.addWindow(this._commandWindow);
    };
    Scene_Menu.prototype.createGoldWindow = function () {
        this._goldWindow = new WindowGold_1.Window_Gold(0, 0);
        this._goldWindow.y = Graphics_1.Graphics.boxHeight - this._goldWindow.height;
        this.addWindow(this._goldWindow);
    };
    Scene_Menu.prototype.createStatusWindow = function () {
        this._statusWindow = new WindowMenuStatus_1.Window_MenuStatus(this._commandWindow.width, 0);
        this._statusWindow.reserveFaceImages();
        this.addWindow(this._statusWindow);
    };
    Scene_Menu.prototype.commandItem = function () {
        SceneManager_1.SceneManager.push(SceneItem_1.Scene_Item);
    };
    Scene_Menu.prototype.commandPersonal = function () {
        this._statusWindow.setFormationMode(false);
        this._statusWindow.selectLast();
        this._statusWindow.activate();
        this._statusWindow.setHandler("ok", this.onPersonalOk.bind(this));
        this._statusWindow.setHandler("cancel", this.onPersonalCancel.bind(this));
    };
    Scene_Menu.prototype.commandFormation = function () {
        this._statusWindow.setFormationMode(true);
        this._statusWindow.selectLast();
        this._statusWindow.activate();
        this._statusWindow.setHandler("ok", this.onFormationOk.bind(this));
        this._statusWindow.setHandler("cancel", this.onFormationCancel.bind(this));
    };
    // オプション機能は非サポート要件なのでコメントアウト
    // commandOptions(): void {
    // 	SceneManager.push(Scene_Options);
    // }
    // セーブ機能は非サポート要件なのでコメントアウト
    // commandSave(): void {
    // 	SceneManager.push(Scene_Save);
    // }
    Scene_Menu.prototype.commandGameEnd = function () {
        SceneManager_1.SceneManager.push(SceneGameEnd_1.Scene_GameEnd);
    };
    Scene_Menu.prototype.onPersonalOk = function () {
        switch (this._commandWindow.currentSymbol()) {
            case "skill":
                SceneManager_1.SceneManager.push(SceneSkill_1.Scene_Skill);
                break;
            case "equip":
                SceneManager_1.SceneManager.push(SceneEquip_1.Scene_Equip);
                break;
            case "status":
                SceneManager_1.SceneManager.push(SceneStatus_1.Scene_Status);
                break;
        }
    };
    Scene_Menu.prototype.onPersonalCancel = function () {
        this._statusWindow.deselect();
        this._commandWindow.activate();
    };
    Scene_Menu.prototype.onFormationOk = function () {
        var index = this._statusWindow.index();
        // const actor = $gameParty.members()[index];
        var pendingIndex = this._statusWindow.pendingIndex();
        if (pendingIndex >= 0) {
            globals_1.$gameParty.swapOrder(index, pendingIndex);
            this._statusWindow.setPendingIndex(-1);
            this._statusWindow.redrawItem(index);
        }
        else {
            this._statusWindow.setPendingIndex(index);
        }
        this._statusWindow.activate();
    };
    Scene_Menu.prototype.onFormationCancel = function () {
        if (this._statusWindow.pendingIndex() >= 0) {
            this._statusWindow.setPendingIndex(-1);
            this._statusWindow.activate();
        }
        else {
            this._statusWindow.deselect();
            this._commandWindow.activate();
        }
    };
    return Scene_Menu;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_Menu = Scene_Menu;

},{"../core/Graphics":14,"../managers/SceneManager":39,"../managers/globals":43,"../windows/WindowGold":127,"../windows/WindowMenuCommand":134,"../windows/WindowMenuStatus":135,"./SceneEquip":77,"./SceneGameEnd":79,"./SceneItem":81,"./SceneMenuBase":86,"./SceneSkill":90,"./SceneStatus":91}],86:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_MenuBase = void 0;
var Sprite_1 = require("../core/Sprite");
var globals_1 = require("../managers/globals");
var SceneManager_1 = require("../managers/SceneManager");
var WindowHelp_1 = require("../windows/WindowHelp");
var SceneBase_1 = require("./SceneBase");
var Scene_MenuBase = /** @class */ (function (_super) {
    __extends(Scene_MenuBase, _super);
    function Scene_MenuBase() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_MenuBase.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_MenuBase.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_MenuBase.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createBackground();
        this.updateActor();
        this.createWindowLayer();
    };
    Scene_MenuBase.prototype.actor = function () {
        return this._actor;
    };
    Scene_MenuBase.prototype.updateActor = function () {
        this._actor = globals_1.$gameParty.menuActor();
    };
    Scene_MenuBase.prototype.createBackground = function () {
        this._backgroundSprite = new Sprite_1.Sprite();
        this._backgroundSprite.bitmap = SceneManager_1.SceneManager.backgroundBitmap();
        this.addChild(this._backgroundSprite);
    };
    Scene_MenuBase.prototype.setBackgroundOpacity = function (opacity) {
        this._backgroundSprite.opacity = opacity;
    };
    Scene_MenuBase.prototype.createHelpWindow = function () {
        this._helpWindow = new WindowHelp_1.Window_Help();
        this.addWindow(this._helpWindow);
    };
    Scene_MenuBase.prototype.nextActor = function () {
        globals_1.$gameParty.makeMenuActorNext();
        this.updateActor();
        this.onActorChange();
    };
    Scene_MenuBase.prototype.previousActor = function () {
        globals_1.$gameParty.makeMenuActorPrevious();
        this.updateActor();
        this.onActorChange();
    };
    Scene_MenuBase.prototype.onActorChange = function () {
        //
    };
    return Scene_MenuBase;
}(SceneBase_1.Scene_Base));
exports.Scene_MenuBase = Scene_MenuBase;

},{"../core/Sprite":21,"../managers/SceneManager":39,"../managers/globals":43,"../windows/WindowHelp":128,"./SceneBase":74}],87:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Options = void 0;
var WindowOptions_1 = require("../windows/WindowOptions");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_Options = /** @class */ (function (_super) {
    __extends(Scene_Options, _super);
    function Scene_Options() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Options.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Options.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Options.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createOptionsWindow();
    };
    Scene_Options.prototype.terminate = function () {
        _super.prototype.terminate.call(this);
        // ConfigManager.save(); // オプション設定を保存する手段がまだ無いのでコメントアウト
    };
    Scene_Options.prototype.createOptionsWindow = function () {
        this._optionsWindow = new WindowOptions_1.Window_Options();
        this._optionsWindow.setHandler("cancel", this.popScene.bind(this));
        this.addWindow(this._optionsWindow);
    };
    return Scene_Options;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_Options = Scene_Options;

},{"../windows/WindowOptions":138,"./SceneMenuBase":86}],88:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Save = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var StorageManager_1 = require("../managers/StorageManager");
var TextManager_1 = require("../managers/TextManager");
var SceneFile_1 = require("./SceneFile");
var Scene_Save = /** @class */ (function (_super) {
    __extends(Scene_Save, _super);
    function Scene_Save() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Save.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Save.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Save.prototype.mode = function () {
        return "save";
    };
    Scene_Save.prototype.helpWindowText = function () {
        return TextManager_1.TextManager.saveMessage;
    };
    Scene_Save.prototype.firstSavefileIndex = function () {
        return DataManager_1.DataManager.lastAccessedSavefileId() - 1;
    };
    Scene_Save.prototype.onSavefileOk = function () {
        _super.prototype.onSavefileOk.call(this);
        globals_1.$gameSystem.onBeforeSave();
        if (DataManager_1.DataManager.saveGame(this.savefileId())) {
            this.onSaveSuccess();
        }
        else {
            this.onSaveFailure();
        }
    };
    Scene_Save.prototype.onSaveSuccess = function () {
        SoundManager_1.SoundManager.playSave();
        StorageManager_1.StorageManager.cleanBackup(this.savefileId());
        this.popScene();
    };
    Scene_Save.prototype.onSaveFailure = function () {
        SoundManager_1.SoundManager.playBuzzer();
        this.activateListWindow();
    };
    return Scene_Save;
}(SceneFile_1.Scene_File));
exports.Scene_Save = Scene_Save;

},{"../managers/DataManager":36,"../managers/SoundManager":40,"../managers/StorageManager":41,"../managers/TextManager":42,"../managers/globals":43,"./SceneFile":78}],89:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Shop = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var WindowBase_1 = require("../windows/WindowBase");
var WindowGold_1 = require("../windows/WindowGold");
var WindowItemCategory_1 = require("../windows/WindowItemCategory");
var WindowShopBuy_1 = require("../windows/WindowShopBuy");
var WindowShopCommand_1 = require("../windows/WindowShopCommand");
var WindowShopNumber_1 = require("../windows/WindowShopNumber");
var WindowShopSell_1 = require("../windows/WindowShopSell");
var WindowShopStatus_1 = require("../windows/WindowShopStatus");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_Shop = /** @class */ (function (_super) {
    __extends(Scene_Shop, _super);
    function Scene_Shop() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Shop.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Shop.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Shop.prototype.prepare = function (goods, purchaseOnly) {
        this._goods = goods;
        this._purchaseOnly = purchaseOnly;
        this._item = null;
    };
    Scene_Shop.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createHelpWindow();
        this.createGoldWindow();
        this.createCommandWindow();
        this.createDummyWindow();
        this.createNumberWindow();
        this.createStatusWindow();
        this.createBuyWindow();
        this.createCategoryWindow();
        this.createSellWindow();
    };
    Scene_Shop.prototype.createGoldWindow = function () {
        this._goldWindow = new WindowGold_1.Window_Gold(0, this._helpWindow.height);
        this._goldWindow.x = Graphics_1.Graphics.boxWidth - this._goldWindow.width;
        this.addWindow(this._goldWindow);
    };
    Scene_Shop.prototype.createCommandWindow = function () {
        this._commandWindow = new WindowShopCommand_1.Window_ShopCommand(this._goldWindow.x, this._purchaseOnly);
        this._commandWindow.y = this._helpWindow.height;
        this._commandWindow.setHandler("buy", this.commandBuy.bind(this));
        this._commandWindow.setHandler("sell", this.commandSell.bind(this));
        this._commandWindow.setHandler("cancel", this.popScene.bind(this));
        this.addWindow(this._commandWindow);
    };
    Scene_Shop.prototype.createDummyWindow = function () {
        var wy = this._commandWindow.y + this._commandWindow.height;
        var wh = Graphics_1.Graphics.boxHeight - wy;
        this._dummyWindow = new WindowBase_1.Window_Base(0, wy, Graphics_1.Graphics.boxWidth, wh);
        this.addWindow(this._dummyWindow);
    };
    Scene_Shop.prototype.createNumberWindow = function () {
        var wy = this._dummyWindow.y;
        var wh = this._dummyWindow.height;
        this._numberWindow = new WindowShopNumber_1.Window_ShopNumber(0, wy, wh);
        this._numberWindow.hide();
        this._numberWindow.setHandler("ok", this.onNumberOk.bind(this));
        this._numberWindow.setHandler("cancel", this.onNumberCancel.bind(this));
        this.addWindow(this._numberWindow);
    };
    Scene_Shop.prototype.createStatusWindow = function () {
        var wx = this._numberWindow.width;
        var wy = this._dummyWindow.y;
        var ww = Graphics_1.Graphics.boxWidth - wx;
        var wh = this._dummyWindow.height;
        this._statusWindow = new WindowShopStatus_1.Window_ShopStatus(wx, wy, ww, wh);
        this._statusWindow.hide();
        this.addWindow(this._statusWindow);
    };
    Scene_Shop.prototype.createBuyWindow = function () {
        var wy = this._dummyWindow.y;
        var wh = this._dummyWindow.height;
        this._buyWindow = new WindowShopBuy_1.Window_ShopBuy(0, wy, wh, this._goods);
        this._buyWindow.setHelpWindow(this._helpWindow);
        this._buyWindow.setStatusWindow(this._statusWindow);
        this._buyWindow.hide();
        this._buyWindow.setHandler("ok", this.onBuyOk.bind(this));
        this._buyWindow.setHandler("cancel", this.onBuyCancel.bind(this));
        this.addWindow(this._buyWindow);
    };
    Scene_Shop.prototype.createCategoryWindow = function () {
        this._categoryWindow = new WindowItemCategory_1.Window_ItemCategory();
        this._categoryWindow.setHelpWindow(this._helpWindow);
        this._categoryWindow.y = this._dummyWindow.y;
        this._categoryWindow.hide();
        this._categoryWindow.deactivate();
        this._categoryWindow.setHandler("ok", this.onCategoryOk.bind(this));
        this._categoryWindow.setHandler("cancel", this.onCategoryCancel.bind(this));
        this.addWindow(this._categoryWindow);
    };
    Scene_Shop.prototype.createSellWindow = function () {
        var wy = this._categoryWindow.y + this._categoryWindow.height;
        var wh = Graphics_1.Graphics.boxHeight - wy;
        this._sellWindow = new WindowShopSell_1.Window_ShopSell(0, wy, Graphics_1.Graphics.boxWidth, wh);
        this._sellWindow.setHelpWindow(this._helpWindow);
        this._sellWindow.hide();
        this._sellWindow.setHandler("ok", this.onSellOk.bind(this));
        this._sellWindow.setHandler("cancel", this.onSellCancel.bind(this));
        this._categoryWindow.setItemWindow(this._sellWindow);
        this.addWindow(this._sellWindow);
    };
    Scene_Shop.prototype.activateBuyWindow = function () {
        this._buyWindow.setMoney(this.money());
        this._buyWindow.show();
        this._buyWindow.activate();
        this._statusWindow.show();
    };
    Scene_Shop.prototype.activateSellWindow = function () {
        this._categoryWindow.show();
        this._sellWindow.refresh();
        this._sellWindow.show();
        this._sellWindow.activate();
        this._statusWindow.hide();
    };
    Scene_Shop.prototype.commandBuy = function () {
        this._dummyWindow.hide();
        this.activateBuyWindow();
    };
    Scene_Shop.prototype.commandSell = function () {
        this._dummyWindow.hide();
        this._categoryWindow.show();
        this._categoryWindow.activate();
        this._sellWindow.show();
        this._sellWindow.deselect();
        this._sellWindow.refresh();
    };
    Scene_Shop.prototype.onBuyOk = function () {
        this._item = this._buyWindow.item();
        this._buyWindow.hide();
        this._numberWindow.setup(this._item, this.maxBuy(), this.buyingPrice());
        this._numberWindow.setCurrencyUnit(this.currencyUnit());
        this._numberWindow.show();
        this._numberWindow.activate();
    };
    Scene_Shop.prototype.onBuyCancel = function () {
        this._commandWindow.activate();
        this._dummyWindow.show();
        this._buyWindow.hide();
        this._statusWindow.hide();
        this._statusWindow.setItem(null);
        this._helpWindow.clear();
    };
    Scene_Shop.prototype.onCategoryOk = function () {
        this.activateSellWindow();
        this._sellWindow.select(0);
    };
    Scene_Shop.prototype.onCategoryCancel = function () {
        this._commandWindow.activate();
        this._dummyWindow.show();
        this._categoryWindow.hide();
        this._sellWindow.hide();
    };
    Scene_Shop.prototype.onSellOk = function () {
        this._item = this._sellWindow.item();
        this._categoryWindow.hide();
        this._sellWindow.hide();
        this._numberWindow.setup(this._item, this.maxSell(), this.sellingPrice());
        this._numberWindow.setCurrencyUnit(this.currencyUnit());
        this._numberWindow.show();
        this._numberWindow.activate();
        this._statusWindow.setItem(this._item);
        this._statusWindow.show();
    };
    Scene_Shop.prototype.onSellCancel = function () {
        this._sellWindow.deselect();
        this._categoryWindow.activate();
        this._statusWindow.setItem(null);
        this._helpWindow.clear();
    };
    Scene_Shop.prototype.onNumberOk = function () {
        SoundManager_1.SoundManager.playShop();
        switch (this._commandWindow.currentSymbol()) {
            case "buy":
                this.doBuy(this._numberWindow.number());
                break;
            case "sell":
                this.doSell(this._numberWindow.number());
                break;
        }
        this.endNumberInput();
        this._goldWindow.refresh();
        this._statusWindow.refresh();
    };
    Scene_Shop.prototype.onNumberCancel = function () {
        SoundManager_1.SoundManager.playCancel();
        this.endNumberInput();
    };
    Scene_Shop.prototype.doBuy = function (number) {
        globals_1.$gameParty.loseGold(number * this.buyingPrice());
        globals_1.$gameParty.gainItem(this._item, number);
    };
    Scene_Shop.prototype.doSell = function (number) {
        globals_1.$gameParty.gainGold(number * this.sellingPrice());
        globals_1.$gameParty.loseItem(this._item, number);
    };
    Scene_Shop.prototype.endNumberInput = function () {
        this._numberWindow.hide();
        switch (this._commandWindow.currentSymbol()) {
            case "buy":
                this.activateBuyWindow();
                break;
            case "sell":
                this.activateSellWindow();
                break;
        }
    };
    Scene_Shop.prototype.maxBuy = function () {
        var max = globals_1.$gameParty.maxItems(this._item) - globals_1.$gameParty.numItems(this._item);
        var price = this.buyingPrice();
        if (price > 0) {
            return Math.min(max, Math.floor(this.money() / price));
        }
        else {
            return max;
        }
    };
    Scene_Shop.prototype.maxSell = function () {
        return globals_1.$gameParty.numItems(this._item);
    };
    Scene_Shop.prototype.money = function () {
        return this._goldWindow.value();
    };
    Scene_Shop.prototype.currencyUnit = function () {
        return this._goldWindow.currencyUnit();
    };
    Scene_Shop.prototype.buyingPrice = function () {
        return this._buyWindow.price(this._item);
    };
    Scene_Shop.prototype.sellingPrice = function () {
        return Math.floor(this._item.price / 2);
    };
    return Scene_Shop;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_Shop = Scene_Shop;

},{"../core/Graphics":14,"../managers/SoundManager":40,"../managers/globals":43,"../windows/WindowBase":112,"../windows/WindowGold":127,"../windows/WindowItemCategory":130,"../windows/WindowShopBuy":143,"../windows/WindowShopCommand":144,"../windows/WindowShopNumber":145,"../windows/WindowShopSell":146,"../windows/WindowShopStatus":147,"./SceneMenuBase":86}],90:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Skill = void 0;
var Graphics_1 = require("../core/Graphics");
var SoundManager_1 = require("../managers/SoundManager");
var WindowSkillList_1 = require("../windows/WindowSkillList");
var WindowSkillStatus_1 = require("../windows/WindowSkillStatus");
var WindowSkillType_1 = require("../windows/WindowSkillType");
var SceneItemBase_1 = require("./SceneItemBase");
var Scene_Skill = /** @class */ (function (_super) {
    __extends(Scene_Skill, _super);
    function Scene_Skill() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Skill.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Skill.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Skill.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createHelpWindow();
        this.createSkillTypeWindow();
        this.createStatusWindow();
        this.createItemWindow();
        this.createActorWindow();
    };
    Scene_Skill.prototype.start = function () {
        _super.prototype.start.call(this);
        this.refreshActor();
    };
    Scene_Skill.prototype.createSkillTypeWindow = function () {
        var wy = this._helpWindow.height;
        this._skillTypeWindow = new WindowSkillType_1.Window_SkillType(0, wy);
        this._skillTypeWindow.setHelpWindow(this._helpWindow);
        this._skillTypeWindow.setHandler("skill", this.commandSkill.bind(this));
        this._skillTypeWindow.setHandler("cancel", this.popScene.bind(this));
        this._skillTypeWindow.setHandler("pagedown", this.nextActor.bind(this));
        this._skillTypeWindow.setHandler("pageup", this.previousActor.bind(this));
        this.addWindow(this._skillTypeWindow);
    };
    Scene_Skill.prototype.createStatusWindow = function () {
        var wx = this._skillTypeWindow.width;
        var wy = this._helpWindow.height;
        var ww = Graphics_1.Graphics.boxWidth - wx;
        var wh = this._skillTypeWindow.height;
        this._statusWindow = new WindowSkillStatus_1.Window_SkillStatus(wx, wy, ww, wh);
        this._statusWindow.reserveFaceImages();
        this.addWindow(this._statusWindow);
    };
    Scene_Skill.prototype.createItemWindow = function () {
        var wx = 0;
        var wy = this._statusWindow.y + this._statusWindow.height;
        var ww = Graphics_1.Graphics.boxWidth;
        var wh = Graphics_1.Graphics.boxHeight - wy;
        this._itemWindow = new WindowSkillList_1.Window_SkillList(wx, wy, ww, wh);
        this._itemWindow.setHelpWindow(this._helpWindow);
        this._itemWindow.setHandler("ok", this.onItemOk.bind(this));
        this._itemWindow.setHandler("cancel", this.onItemCancel.bind(this));
        this._skillTypeWindow.setSkillWindow(this._itemWindow);
        this.addWindow(this._itemWindow);
    };
    Scene_Skill.prototype.refreshActor = function () {
        var actor = this.actor();
        this._skillTypeWindow.setActor(actor);
        this._statusWindow.setActor(actor);
        this._itemWindow.setActor(actor);
    };
    Scene_Skill.prototype.user = function () {
        return this.actor();
    };
    Scene_Skill.prototype.commandSkill = function () {
        this._itemWindow.activate();
        this._itemWindow.selectLast();
    };
    Scene_Skill.prototype.onItemOk = function () {
        this.actor().setLastMenuSkill(this.item());
        this.determineItem();
    };
    Scene_Skill.prototype.onItemCancel = function () {
        this._itemWindow.deselect();
        this._skillTypeWindow.activate();
    };
    Scene_Skill.prototype.playSeForItem = function () {
        SoundManager_1.SoundManager.playUseSkill();
    };
    Scene_Skill.prototype.useItem = function () {
        _super.prototype.useItem.call(this);
        this._statusWindow.refresh();
        this._itemWindow.refresh();
    };
    Scene_Skill.prototype.onActorChange = function () {
        this.refreshActor();
        this._skillTypeWindow.activate();
    };
    return Scene_Skill;
}(SceneItemBase_1.Scene_ItemBase));
exports.Scene_Skill = Scene_Skill;

},{"../core/Graphics":14,"../managers/SoundManager":40,"../windows/WindowSkillList":148,"../windows/WindowSkillStatus":149,"../windows/WindowSkillType":150,"./SceneItemBase":82}],91:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Status = void 0;
var WindowStatus_1 = require("../windows/WindowStatus");
var SceneMenuBase_1 = require("./SceneMenuBase");
var Scene_Status = /** @class */ (function (_super) {
    __extends(Scene_Status, _super);
    function Scene_Status() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Status.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Status.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Status.prototype.create = function () {
        _super.prototype.create.call(this);
        this._statusWindow = new WindowStatus_1.Window_Status();
        this._statusWindow.setHandler("cancel", this.popScene.bind(this));
        this._statusWindow.setHandler("pagedown", this.nextActor.bind(this));
        this._statusWindow.setHandler("pageup", this.previousActor.bind(this));
        this._statusWindow.reserveFaceImages();
        this.addWindow(this._statusWindow);
    };
    Scene_Status.prototype.start = function () {
        SceneMenuBase_1.Scene_MenuBase.prototype.start.call(this);
        this.refreshActor();
    };
    Scene_Status.prototype.refreshActor = function () {
        var actor = this.actor();
        this._statusWindow.setActor(actor);
    };
    Scene_Status.prototype.onActorChange = function () {
        this.refreshActor();
        this._statusWindow.activate();
    };
    return Scene_Status;
}(SceneMenuBase_1.Scene_MenuBase));
exports.Scene_Status = Scene_Status;

},{"../windows/WindowStatus":151,"./SceneMenuBase":86}],92:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene_Title = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var AudioManager_1 = require("../managers/AudioManager");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var WindowTitleCommand_1 = require("../windows/WindowTitleCommand");
var SceneBase_1 = require("./SceneBase");
var SceneMap_1 = require("./SceneMap");
var Scene_Title = /** @class */ (function (_super) {
    __extends(Scene_Title, _super);
    function Scene_Title() {
        var _this = _super.call(this) || this;
        if (Object.getPrototypeOf(_this) === Scene_Title.prototype) {
            _this.initialize();
        }
        return _this;
    }
    Scene_Title.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Scene_Title.prototype.create = function () {
        _super.prototype.create.call(this);
        this.createBackground();
        this.createForeground();
        this.createWindowLayer();
        this.createCommandWindow();
    };
    Scene_Title.prototype.start = function () {
        SceneManager_1.SceneManager.clearStack();
        this.centerSprite(this._backSprite1);
        this.centerSprite(this._backSprite2);
        this.playTitleMusic();
        this.startFadeIn(this.fadeSpeed(), false);
    };
    Scene_Title.prototype.update = function () {
        if (!this.isBusy()) {
            this._commandWindow.open();
        }
        _super.prototype.update.call(this);
    };
    Scene_Title.prototype.isBusy = function () {
        return (this._commandWindow && this._commandWindow.isClosing()) || _super.prototype.isBusy.call(this);
    };
    Scene_Title.prototype.terminate = function () {
        _super.prototype.terminate.call(this);
        SceneManager_1.SceneManager.snapForBackground();
    };
    Scene_Title.prototype.createBackground = function () {
        this._backSprite1 = new Sprite_1.Sprite(ImageManager_1.ImageManager.loadTitle1(globals_1.$dataSystem.title1Name));
        this._backSprite2 = new Sprite_1.Sprite(ImageManager_1.ImageManager.loadTitle2(globals_1.$dataSystem.title2Name));
        this.addChild(this._backSprite1);
        this.addChild(this._backSprite2);
    };
    Scene_Title.prototype.createForeground = function () {
        this._gameTitleSprite = new Sprite_1.Sprite(new Bitmap_1.Bitmap(Graphics_1.Graphics.width, Graphics_1.Graphics.height));
        this.addChild(this._gameTitleSprite);
        if (globals_1.$dataSystem.optDrawTitle) {
            this.drawGameTitle();
        }
    };
    Scene_Title.prototype.drawGameTitle = function () {
        var x = 20;
        var y = Graphics_1.Graphics.height / 4;
        var maxWidth = Graphics_1.Graphics.width - x * 2;
        var text = globals_1.$dataSystem.gameTitle;
        this._gameTitleSprite.bitmap.outlineColor = "black";
        this._gameTitleSprite.bitmap.outlineWidth = 8;
        this._gameTitleSprite.bitmap.fontSize = 72;
        this._gameTitleSprite.bitmap.drawText(text, x, y, maxWidth, 48, "center");
    };
    Scene_Title.prototype.centerSprite = function (sprite) {
        // NOTE: 以下をオリジナルのコードのとおり有効にすると、いろいろなものが画面右下に位置していまう。
        sprite.x = Graphics_1.Graphics.width / 2;
        sprite.y = Graphics_1.Graphics.height / 2;
        sprite.anchor.x = 0.5;
        sprite.anchor.y = 0.5;
        sprite.modified();
    };
    Scene_Title.prototype.createCommandWindow = function () {
        this._commandWindow = new WindowTitleCommand_1.Window_TitleCommand();
        this._commandWindow.setHandler("newGame", this.commandNewGame.bind(this));
        this._commandWindow.setHandler("continue", this.commandContinue.bind(this));
        this._commandWindow.setHandler("options", this.commandOptions.bind(this));
        // NOTE: ここで updateTransform() してあげないと、１フレームだけウィンドウが開いた状態になってしまう。
        // TODO: 根本的解決
        this._commandWindow.updateTransform();
        this.addWindow(this._commandWindow);
    };
    Scene_Title.prototype.commandNewGame = function () {
        DataManager_1.DataManager.setupNewGame();
        this._commandWindow.close();
        this.fadeOutAll();
        SceneManager_1.SceneManager.goto(SceneMap_1.Scene_Map);
    };
    Scene_Title.prototype.commandContinue = function () {
        this._commandWindow.close();
        // SceneManager.push(Scene_Load);
    };
    Scene_Title.prototype.commandOptions = function () {
        this._commandWindow.close();
        // SceneManager.push(Scene_Options);
    };
    Scene_Title.prototype.playTitleMusic = function () {
        AudioManager_1.AudioManager.playBgm(globals_1.$dataSystem.titleBgm);
        AudioManager_1.AudioManager.stopBgs();
        AudioManager_1.AudioManager.stopMe();
    };
    return Scene_Title;
}(SceneBase_1.Scene_Base));
exports.Scene_Title = Scene_Title;

},{"../core/Bitmap":13,"../core/Graphics":14,"../core/Sprite":21,"../managers/AudioManager":33,"../managers/DataManager":36,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/globals":43,"../windows/WindowTitleCommand":152,"./SceneBase":74,"./SceneMap":84}],93:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Actor = void 0;
var Sprite_1 = require("../core/Sprite");
var BattleManager_1 = require("../managers/BattleManager");
var ImageManager_1 = require("../managers/ImageManager");
var SpriteBase_1 = require("./SpriteBase");
var SpriteBattler_1 = require("./SpriteBattler");
var SpriteStateOverlay_1 = require("./SpriteStateOverlay");
var SpriteWeapon_1 = require("./SpriteWeapon");
var Sprite_Actor = /** @class */ (function (_super) {
    __extends(Sprite_Actor, _super);
    function Sprite_Actor(actor) {
        return _super.call(this, actor) || this;
    }
    Sprite_Actor.prototype.initialize = function (actor) {
        _super.prototype.initialize.call(this, actor);
        this.moveToStartPosition();
    };
    Sprite_Actor.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._battlerName = "";
        this._motion = null;
        this._motionCount = 0;
        this._pattern = 0;
        this.createShadowSprite();
        this.createWeaponSprite();
        this.createMainSprite();
        this.createStateSprite();
    };
    Sprite_Actor.prototype.createMainSprite = function () {
        this._mainSprite = new SpriteBase_1.Sprite_Base();
        this._mainSprite.anchor.x = 0.5;
        this._mainSprite.anchor.y = 1;
        this.addChild(this._mainSprite);
        this._effectTarget = this._mainSprite;
    };
    Sprite_Actor.prototype.createShadowSprite = function () {
        this._shadowSprite = new Sprite_1.Sprite();
        this._shadowSprite.bitmap = ImageManager_1.ImageManager.loadSystem("Shadow2");
        this._shadowSprite.anchor.x = 0.5;
        this._shadowSprite.anchor.y = 0.5;
        this._shadowSprite.y = -2;
        this.addChild(this._shadowSprite);
    };
    Sprite_Actor.prototype.createWeaponSprite = function () {
        this._weaponSprite = new SpriteWeapon_1.Sprite_Weapon();
        this.addChild(this._weaponSprite);
    };
    Sprite_Actor.prototype.createStateSprite = function () {
        this._stateSprite = new SpriteStateOverlay_1.Sprite_StateOverlay();
        this.addChild(this._stateSprite);
    };
    Sprite_Actor.prototype.setBattler = function (battler) {
        _super.prototype.setBattler.call(this, battler);
        var changed = battler !== this._actor;
        if (changed) {
            this._actor = battler;
            if (battler) {
                this.setActorHome(battler.index());
            }
            this.startEntryMotion();
            this._stateSprite.setup(battler);
        }
    };
    Sprite_Actor.prototype.moveToStartPosition = function () {
        this.startMove(300, 0, 0);
    };
    Sprite_Actor.prototype.setActorHome = function (index) {
        this.setHome(600 + index * 32, 280 + index * 48);
    };
    Sprite_Actor.prototype.update = function () {
        SpriteBattler_1.Sprite_Battler.prototype.update.call(this);
        this.updateShadow();
        if (this._actor) {
            this.updateMotion();
        }
    };
    Sprite_Actor.prototype.updateShadow = function () {
        this._shadowSprite.visible = !!this._actor;
    };
    Sprite_Actor.prototype.updateMain = function () {
        SpriteBattler_1.Sprite_Battler.prototype.updateMain.call(this);
        if (this._actor.isSpriteVisible() && !this.isMoving()) {
            this.updateTargetPosition();
        }
    };
    Sprite_Actor.prototype.setupMotion = function () {
        if (this._actor.isMotionRequested()) {
            this.startMotion(this._actor.motionType());
            this._actor.clearMotion();
        }
    };
    Sprite_Actor.prototype.setupWeaponAnimation = function () {
        if (this._actor.isWeaponAnimationRequested()) {
            this._weaponSprite.setup(this._actor.weaponImageId());
            this._actor.clearWeaponAnimation();
        }
    };
    Sprite_Actor.prototype.startMotion = function (motionType) {
        var newMotion = Sprite_Actor.MOTIONS[motionType];
        if (this._motion !== newMotion) {
            this._motion = newMotion;
            this._motionCount = 0;
            this._pattern = 0;
        }
    };
    Sprite_Actor.prototype.updateTargetPosition = function () {
        if (this._actor.isInputting() || this._actor.isActing()) {
            this.stepForward();
        }
        else if (this._actor.canMove() && BattleManager_1.BattleManager.isEscaped()) {
            this.retreat();
        }
        else if (!this.inHomePosition()) {
            this.stepBack();
        }
    };
    Sprite_Actor.prototype.updateBitmap = function () {
        SpriteBattler_1.Sprite_Battler.prototype.updateBitmap.call(this);
        var name = this._actor.battlerName();
        if (this._battlerName !== name) {
            this._battlerName = name;
            this._mainSprite.bitmap = ImageManager_1.ImageManager.loadSvActor(name);
        }
    };
    Sprite_Actor.prototype.updateFrame = function () {
        SpriteBattler_1.Sprite_Battler.prototype.updateFrame.call(this);
        var bitmap = this._mainSprite.bitmap;
        if (bitmap) {
            var motionIndex = this._motion ? this._motion.index : 0;
            var pattern = this._pattern < 3 ? this._pattern : 1;
            var cw = bitmap.width / 9;
            var ch = bitmap.height / 6;
            var cx = Math.floor(motionIndex / 6) * 3 + pattern;
            var cy = motionIndex % 6;
            this._mainSprite.setFrame(cx * cw, cy * ch, cw, ch);
        }
    };
    Sprite_Actor.prototype.updateMove = function () {
        var bitmap = this._mainSprite.bitmap;
        if (!bitmap || bitmap.isReady()) {
            SpriteBattler_1.Sprite_Battler.prototype.updateMove.call(this);
        }
    };
    Sprite_Actor.prototype.updateMotion = function () {
        this.setupMotion();
        this.setupWeaponAnimation();
        if (this._actor.isMotionRefreshRequested()) {
            this.refreshMotion();
            this._actor.clearMotion();
        }
        this.updateMotionCount();
    };
    Sprite_Actor.prototype.updateMotionCount = function () {
        if (this._motion && ++this._motionCount >= this.motionSpeed()) {
            if (this._motion.loop) {
                this._pattern = (this._pattern + 1) % 4;
            }
            else if (this._pattern < 2) {
                this._pattern++;
            }
            else {
                this.refreshMotion();
            }
            this._motionCount = 0;
        }
    };
    Sprite_Actor.prototype.motionSpeed = function () {
        return 12;
    };
    Sprite_Actor.prototype.refreshMotion = function () {
        var actor = this._actor;
        var motionGuard = Sprite_Actor.MOTIONS.guard;
        if (actor) {
            if (this._motion === motionGuard && !BattleManager_1.BattleManager.isInputting()) {
                return;
            }
            var stateMotion = actor.stateMotionIndex();
            if (actor.isInputting() || actor.isActing()) {
                this.startMotion("walk");
            }
            else if (stateMotion === 3) {
                this.startMotion("dead");
            }
            else if (stateMotion === 2) {
                this.startMotion("sleep");
            }
            else if (actor.isChanting()) {
                this.startMotion("chant");
            }
            else if (actor.isGuard() || actor.isGuardWaiting()) {
                this.startMotion("guard");
            }
            else if (stateMotion === 1) {
                this.startMotion("abnormal");
            }
            else if (actor.isDying()) {
                this.startMotion("dying");
            }
            else if (actor.isUndecided()) {
                this.startMotion("walk");
            }
            else {
                this.startMotion("wait");
            }
        }
    };
    Sprite_Actor.prototype.startEntryMotion = function () {
        if (this._actor && this._actor.canMove()) {
            this.startMotion("walk");
            this.startMove(0, 0, 30);
        }
        else if (!this.isMoving()) {
            this.refreshMotion();
            this.startMove(0, 0, 0);
        }
    };
    Sprite_Actor.prototype.stepForward = function () {
        this.startMove(-48, 0, 12);
    };
    Sprite_Actor.prototype.stepBack = function () {
        this.startMove(0, 0, 12);
    };
    Sprite_Actor.prototype.retreat = function () {
        this.startMove(300, 0, 30);
    };
    Sprite_Actor.prototype.onMoveEnd = function () {
        SpriteBattler_1.Sprite_Battler.prototype.onMoveEnd.call(this);
        if (!BattleManager_1.BattleManager.isBattleEnd()) {
            this.refreshMotion();
        }
    };
    Sprite_Actor.prototype.damageOffsetX = function () {
        return -32;
    };
    Sprite_Actor.prototype.damageOffsetY = function () {
        return 0;
    };
    Sprite_Actor.MOTIONS = {
        walk: { index: 0, loop: true },
        wait: { index: 1, loop: true },
        chant: { index: 2, loop: true },
        guard: { index: 3, loop: true },
        damage: { index: 4, loop: false },
        evade: { index: 5, loop: false },
        thrust: { index: 6, loop: false },
        swing: { index: 7, loop: false },
        missile: { index: 8, loop: false },
        skill: { index: 9, loop: false },
        spell: { index: 10, loop: false },
        item: { index: 11, loop: false },
        escape: { index: 12, loop: true },
        victory: { index: 13, loop: true },
        dying: { index: 14, loop: true },
        abnormal: { index: 15, loop: true },
        sleep: { index: 16, loop: true },
        dead: { index: 17, loop: true }
    };
    return Sprite_Actor;
}(SpriteBattler_1.Sprite_Battler));
exports.Sprite_Actor = Sprite_Actor;

},{"../core/Sprite":21,"../managers/BattleManager":34,"../managers/ImageManager":37,"./SpriteBase":96,"./SpriteBattler":97,"./SpriteStateOverlay":105,"./SpriteWeapon":107}],94:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Animation = void 0;
var Graphics_1 = require("../core/Graphics");
var ScreenSprite_1 = require("../core/ScreenSprite");
var Sprite_1 = require("../core/Sprite");
var Utils_1 = require("../core/Utils");
var AudioManager_1 = require("../managers/AudioManager");
var ImageManager_1 = require("../managers/ImageManager");
var Sprite_Animation = /** @class */ (function (_super) {
    __extends(Sprite_Animation, _super);
    function Sprite_Animation() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Sprite_Animation.prototype) {
        // 	this.initialize();
        // }
    }
    Sprite_Animation.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._reduceArtifacts = true;
        this.initMembers();
    };
    Sprite_Animation.prototype.initMembers = function () {
        this._target = null;
        this._animation = null;
        this._mirror = false;
        this._delay = 0;
        this._rate = 4;
        this._duration = 0;
        this._flashColor = [0, 0, 0, 0];
        this._flashDuration = 0;
        this._screenFlashDuration = 0;
        this._hidingDuration = 0;
        this._bitmap1 = null;
        this._bitmap2 = null;
        this._cellSprites = [];
        this._screenFlashSprite = null;
        this._duplicated = false;
        this.z = 8;
    };
    Sprite_Animation.prototype.setup = function (target, animation, mirror, delay) {
        this._target = target;
        this._animation = animation;
        this._mirror = mirror;
        this._delay = delay;
        if (this._animation) {
            this.remove();
            this.setupRate();
            this.setupDuration();
            this.loadBitmaps();
            this.createSprites();
        }
    };
    Sprite_Animation.prototype.remove = function () {
        if (this.parent && this.parent.removeChild(this)) {
            this._target.setBlendColor([0, 0, 0, 0]);
            this._target.show();
        }
    };
    Sprite_Animation.prototype.setupRate = function () {
        this._rate = 4;
    };
    Sprite_Animation.prototype.setupDuration = function () {
        this._duration = this._animation.frames.length * this._rate + 1;
    };
    Sprite_Animation.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateMain();
        this.updateFlash();
        this.updateScreenFlash();
        this.updateHiding();
        Sprite_Animation._checker1 = {};
        Sprite_Animation._checker2 = {};
    };
    Sprite_Animation.prototype.updateFlash = function () {
        if (this._flashDuration > 0) {
            var d = this._flashDuration--;
            this._flashColor[3] *= (d - 1) / d;
            this._target.setBlendColor(this._flashColor);
        }
    };
    Sprite_Animation.prototype.updateScreenFlash = function () {
        if (this._screenFlashDuration > 0) {
            var d = this._screenFlashDuration--;
            if (this._screenFlashSprite) {
                this._screenFlashSprite.x = -this.absoluteX();
                this._screenFlashSprite.y = -this.absoluteY();
                this._screenFlashSprite.opacity *= (d - 1) / d;
                this._screenFlashSprite.visible = this._screenFlashDuration > 0;
            }
        }
    };
    Sprite_Animation.prototype.absoluteX = function () {
        var x = 0;
        var object = this;
        while (object) {
            x += object.x;
            object = object.parent;
        }
        return x;
    };
    Sprite_Animation.prototype.absoluteY = function () {
        var y = 0;
        var object = this;
        while (object) {
            y += object.y;
            object = object.parent;
        }
        return y;
    };
    Sprite_Animation.prototype.updateHiding = function () {
        if (this._hidingDuration > 0) {
            this._hidingDuration--;
            if (this._hidingDuration === 0) {
                this._target.show();
            }
        }
    };
    Sprite_Animation.prototype.isPlaying = function () {
        return this._duration > 0;
    };
    Sprite_Animation.prototype.loadBitmaps = function () {
        var name1 = this._animation.animation1Name;
        var name2 = this._animation.animation2Name;
        var hue1 = this._animation.animation1Hue;
        var hue2 = this._animation.animation2Hue;
        this._bitmap1 = ImageManager_1.ImageManager.loadAnimation(name1, hue1);
        this._bitmap2 = ImageManager_1.ImageManager.loadAnimation(name2, hue2);
    };
    Sprite_Animation.prototype.isReady = function () {
        return this._bitmap1 && this._bitmap1.isReady() && this._bitmap2 && this._bitmap2.isReady();
    };
    Sprite_Animation.prototype.createSprites = function () {
        if (!Sprite_Animation._checker2[this._animation]) {
            this.createCellSprites();
            if (this._animation.position === 3) {
                Sprite_Animation._checker2[this._animation] = true;
            }
            this.createScreenFlashSprite();
        }
        if (Sprite_Animation._checker1[this._animation]) {
            this._duplicated = true;
        }
        else {
            this._duplicated = false;
            if (this._animation.position === 3) {
                Sprite_Animation._checker1[this._animation] = true;
            }
        }
    };
    Sprite_Animation.prototype.createCellSprites = function () {
        this._cellSprites = [];
        for (var i = 0; i < 16; i++) {
            var sprite = new Sprite_1.Sprite();
            sprite.anchor.x = 0.5;
            sprite.anchor.y = 0.5;
            this._cellSprites.push(sprite);
            this.addChild(sprite);
        }
    };
    Sprite_Animation.prototype.createScreenFlashSprite = function () {
        this._screenFlashSprite = new ScreenSprite_1.ScreenSprite();
        this.addChild(this._screenFlashSprite);
    };
    Sprite_Animation.prototype.updateMain = function () {
        if (this.isPlaying() && this.isReady()) {
            if (this._delay > 0) {
                this._delay--;
            }
            else {
                this._duration--;
                this.updatePosition();
                if (this._duration % this._rate === 0) {
                    this.updateFrame();
                }
            }
        }
    };
    Sprite_Animation.prototype.updatePosition = function () {
        if (this._animation.position === 3) {
            // tsc@v2.6.2 だと通らないみたい
            this.x = "width" in this.parent ? this.parent.width / 2 : Graphics_1.Graphics.width;
            this.y = "height" in this.parent ? this.parent.height / 2 : Graphics_1.Graphics.height;
        }
        else {
            var parent = this._target.parent;
            var grandparent = parent ? parent.parent : null;
            this.x = this._target.x;
            this.y = this._target.y;
            if (this.parent === grandparent) {
                this.x += parent.x;
                this.y += parent.y;
            }
            if (this._animation.position === 0) {
                this.y -= this._target.height;
            }
            else if (this._animation.position === 1) {
                this.y -= this._target.height / 2;
            }
        }
    };
    Sprite_Animation.prototype.updateFrame = function () {
        var _this = this;
        if (this._duration > 0) {
            var frameIndex_1 = this.currentFrameIndex();
            this.updateAllCellSprites(this._animation.frames[frameIndex_1]);
            this._animation.timings.forEach(function (timing) {
                if (timing.frame === frameIndex_1) {
                    _this.processTimingData(timing);
                }
            });
        }
    };
    Sprite_Animation.prototype.currentFrameIndex = function () {
        return this._animation.frames.length - Math.floor((this._duration + this._rate - 1) / this._rate);
    };
    Sprite_Animation.prototype.updateAllCellSprites = function (frame) {
        for (var i = 0; i < this._cellSprites.length; i++) {
            var sprite = this._cellSprites[i];
            if (i < frame.length) {
                this.updateCellSprite(sprite, frame[i]);
            }
            else {
                sprite.visible = false;
            }
        }
    };
    Sprite_Animation.prototype.updateCellSprite = function (sprite, cell) {
        var pattern = cell[0];
        if (pattern >= 0) {
            var sx = (pattern % 5) * 192;
            var sy = Math.floor((pattern % 100) / 5) * 192;
            var mirror = this._mirror;
            sprite.bitmap = pattern < 100 ? this._bitmap1 : this._bitmap2;
            sprite.setFrame(sx, sy, 192, 192);
            sprite.x = cell[1];
            sprite.y = cell[2];
            sprite.rotation = (cell[4] * Math.PI) / 180;
            // sprite.scale.x = cell[3] / 100;
            sprite.scale.x = cell[3] / 100;
            if (cell[5]) {
                // sprite.scale.x *= -1;
                sprite.scale.x *= -1;
            }
            if (mirror) {
                sprite.x *= -1;
                sprite.rotation *= -1;
                // sprite.scale.x *= -1;
                sprite.scale.x *= -1;
            }
            // sprite.scale.y = cell[3] / 100;
            sprite.scale.y = cell[3] / 100;
            sprite.opacity = cell[6];
            // sprite.blendMode = cell[7]; // TODO: impl
            sprite.visible = true;
        }
        else {
            sprite.visible = false;
        }
    };
    Sprite_Animation.prototype.processTimingData = function (timing) {
        var duration = timing.flashDuration * this._rate;
        switch (timing.flashScope) {
            case 1:
                this.startFlash(timing.flashColor, duration);
                break;
            case 2:
                this.startScreenFlash(timing.flashColor, duration);
                break;
            case 3:
                this.startHiding(duration);
                break;
        }
        if (!this._duplicated && timing.se) {
            AudioManager_1.AudioManager.playSe(timing.se);
        }
    };
    Sprite_Animation.prototype.startFlash = function (color, duration) {
        // this._flashColor = color.clone();
        this._flashColor = Utils_1.Utils.cloneArray(color);
        this._flashDuration = duration;
    };
    Sprite_Animation.prototype.startScreenFlash = function (color, duration) {
        this._screenFlashDuration = duration;
        if (this._screenFlashSprite) {
            this._screenFlashSprite.setColor(color[0], color[1], color[2]);
            this._screenFlashSprite.opacity = color[3];
        }
    };
    Sprite_Animation.prototype.startHiding = function (duration) {
        this._hidingDuration = duration;
        this._target.hide();
    };
    Sprite_Animation._checker1 = {};
    Sprite_Animation._checker2 = {};
    return Sprite_Animation;
}(Sprite_1.Sprite));
exports.Sprite_Animation = Sprite_Animation;

},{"../core/Graphics":14,"../core/ScreenSprite":20,"../core/Sprite":21,"../core/Utils":28,"../managers/AudioManager":33,"../managers/ImageManager":37}],95:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Balloon = void 0;
var ImageManager_1 = require("../managers/ImageManager");
var SpriteBase_1 = require("./SpriteBase");
var Sprite_Balloon = /** @class */ (function (_super) {
    __extends(Sprite_Balloon, _super);
    function Sprite_Balloon() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Sprite_Balloon.prototype) {
        // 	this.initialize();
        // }
    }
    Sprite_Balloon.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initMembers();
        this.loadBitmap();
    };
    Sprite_Balloon.prototype.initMembers = function () {
        this._balloonId = 0;
        this._duration = 0;
        this.anchor.x = 0.5;
        this.anchor.y = 1;
        this.z = 7;
    };
    Sprite_Balloon.prototype.loadBitmap = function () {
        this.bitmap = ImageManager_1.ImageManager.loadSystem("Balloon");
        this.setFrame(0, 0, 0, 0);
    };
    Sprite_Balloon.prototype.setup = function (balloonId) {
        this._balloonId = balloonId;
        this._duration = 8 * this.speed() + this.waitTime();
    };
    Sprite_Balloon.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._duration > 0) {
            this._duration--;
            if (this._duration > 0) {
                this.updateFrame();
            }
        }
    };
    Sprite_Balloon.prototype.updateFrame = function () {
        var w = 48;
        var h = 48;
        var sx = this.frameIndex() * w;
        var sy = (this._balloonId - 1) * h;
        this.setFrame(sx, sy, w, h);
    };
    Sprite_Balloon.prototype.speed = function () {
        return 8;
    };
    Sprite_Balloon.prototype.waitTime = function () {
        return 12;
    };
    Sprite_Balloon.prototype.frameIndex = function () {
        var index = (this._duration - this.waitTime()) / this.speed();
        return 7 - Math.max(Math.floor(index), 0);
    };
    Sprite_Balloon.prototype.isPlaying = function () {
        return this._duration > 0;
    };
    return Sprite_Balloon;
}(SpriteBase_1.Sprite_Base));
exports.Sprite_Balloon = Sprite_Balloon;

},{"../managers/ImageManager":37,"./SpriteBase":96}],96:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Base = void 0;
var Sprite_1 = require("../core/Sprite");
var Utils_1 = require("../core/Utils");
var SpriteAnimation_1 = require("./SpriteAnimation");
var Sprite_Base = /** @class */ (function (_super) {
    __extends(Sprite_Base, _super);
    function Sprite_Base() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Sprite_Base.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        _super.prototype.initialize.call(this);
        this._animationSprites = [];
        this._effectTarget = this;
        this._hiding = false;
    };
    Sprite_Base.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateVisibility();
        this.updateAnimationSprites();
    };
    Sprite_Base.prototype.hide = function () {
        this._hiding = true;
        this.updateVisibility();
    };
    Sprite_Base.prototype.show = function () {
        this._hiding = false;
        this.updateVisibility();
    };
    Sprite_Base.prototype.updateVisibility = function () {
        this.visible = !this._hiding;
    };
    Sprite_Base.prototype.updateAnimationSprites = function () {
        if (this._animationSprites.length > 0) {
            // const sprites = this._animationSprites.clone();
            var sprites = Utils_1.Utils.cloneArray(this._animationSprites);
            this._animationSprites = [];
            for (var i = 0; i < sprites.length; i++) {
                var sprite = sprites[i];
                if (sprite.isPlaying()) {
                    this._animationSprites.push(sprite);
                }
                else {
                    sprite.remove();
                }
            }
        }
    };
    Sprite_Base.prototype.startAnimation = function (animation, mirror, delay) {
        var sprite = new SpriteAnimation_1.Sprite_Animation();
        sprite.setup(this._effectTarget, animation, mirror, delay);
        this.parent.addChild(sprite);
        this._animationSprites.push(sprite);
    };
    Sprite_Base.prototype.isAnimationPlaying = function () {
        return this._animationSprites.length > 0;
    };
    return Sprite_Base;
}(Sprite_1.Sprite));
exports.Sprite_Base = Sprite_Base;

},{"../core/Sprite":21,"../core/Utils":28,"./SpriteAnimation":94}],97:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Battler = void 0;
var globals_1 = require("../managers/globals");
var SpriteBase_1 = require("./SpriteBase");
var SpriteDamage_1 = require("./SpriteDamage");
var Sprite_Battler = /** @class */ (function (_super) {
    __extends(Sprite_Battler, _super);
    function Sprite_Battler() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Sprite_Battler.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        _super.prototype.initialize.call(this);
        this.initMembers();
        this.setBattler(args[0]);
    };
    Sprite_Battler.prototype.initMembers = function () {
        this.anchor.x = 0.5;
        this.anchor.y = 1;
        this._battler = null;
        this._damages = [];
        this._homeX = 0;
        this._homeY = 0;
        this._offsetX = 0;
        this._offsetY = 0;
        this._targetOffsetX = NaN;
        this._targetOffsetY = NaN;
        this._movementDuration = 0;
        this._selectionEffectCount = 0;
    };
    Sprite_Battler.prototype.setBattler = function (battler) {
        this._battler = battler;
    };
    Sprite_Battler.prototype.setHome = function (x, y) {
        this._homeX = x;
        this._homeY = y;
        this.updatePosition();
    };
    Sprite_Battler.prototype.update = function () {
        SpriteBase_1.Sprite_Base.prototype.update.call(this);
        if (this._battler) {
            this.updateMain();
            this.updateAnimation();
            this.updateDamagePopup();
            this.updateSelectionEffect();
        }
        else {
            this.bitmap = null;
        }
    };
    Sprite_Battler.prototype.updateVisibility = function () {
        SpriteBase_1.Sprite_Base.prototype.updateVisibility.call(this);
        if (!this._battler || !this._battler.isSpriteVisible()) {
            this.visible = false;
        }
    };
    Sprite_Battler.prototype.updateMain = function () {
        if (this._battler.isSpriteVisible()) {
            this.updateBitmap();
            this.updateFrame();
        }
        this.updateMove();
        this.updatePosition();
    };
    Sprite_Battler.prototype.updateBitmap = function () {
        // nohting to do
    };
    Sprite_Battler.prototype.updateFrame = function () {
        // noting to do
    };
    Sprite_Battler.prototype.updateMove = function () {
        if (this._movementDuration > 0) {
            var d = this._movementDuration;
            this._offsetX = (this._offsetX * (d - 1) + this._targetOffsetX) / d;
            this._offsetY = (this._offsetY * (d - 1) + this._targetOffsetY) / d;
            this._movementDuration--;
            if (this._movementDuration === 0) {
                this.onMoveEnd();
            }
        }
    };
    Sprite_Battler.prototype.updatePosition = function () {
        this.x = this._homeX + this._offsetX;
        this.y = this._homeY + this._offsetY;
    };
    Sprite_Battler.prototype.updateAnimation = function () {
        this.setupAnimation();
    };
    Sprite_Battler.prototype.updateDamagePopup = function () {
        this.setupDamagePopup();
        if (this._damages.length > 0) {
            for (var i = 0; i < this._damages.length; i++) {
                this._damages[i].update();
            }
            if (!this._damages[0].isPlaying()) {
                this.parent.removeChild(this._damages[0]);
                this._damages.shift();
            }
        }
    };
    Sprite_Battler.prototype.updateSelectionEffect = function () {
        var target = this._effectTarget;
        if (this._battler.isSelected()) {
            this._selectionEffectCount++;
            if (this._selectionEffectCount % 30 < 15) {
                target.setBlendColor([255, 255, 255, 64]);
            }
            else {
                target.setBlendColor([0, 0, 0, 0]);
            }
        }
        else if (this._selectionEffectCount > 0) {
            this._selectionEffectCount = 0;
            target.setBlendColor([0, 0, 0, 0]);
        }
    };
    Sprite_Battler.prototype.setupAnimation = function () {
        while (this._battler.isAnimationRequested()) {
            var data = this._battler.shiftAnimation();
            var animation = globals_1.$dataAnimations[data.animationId];
            var mirror = data.mirror;
            var delay = animation.position === 3 ? 0 : data.delay;
            this.startAnimation(animation, mirror, delay);
            for (var i = 0; i < this._animationSprites.length; i++) {
                var sprite = this._animationSprites[i];
                sprite.visible = this._battler.isSpriteVisible();
            }
        }
    };
    Sprite_Battler.prototype.setupDamagePopup = function () {
        if (this._battler.isDamagePopupRequested()) {
            if (this._battler.isSpriteVisible()) {
                var sprite = new SpriteDamage_1.Sprite_Damage();
                sprite.x = this.x + this.damageOffsetX();
                sprite.y = this.y + this.damageOffsetY();
                sprite.setup(this._battler);
                this._damages.push(sprite);
                this.parent.addChild(sprite);
            }
            this._battler.clearDamagePopup();
            this._battler.clearResult();
        }
    };
    Sprite_Battler.prototype.damageOffsetX = function () {
        return 0;
    };
    Sprite_Battler.prototype.damageOffsetY = function () {
        return 0;
    };
    Sprite_Battler.prototype.startMove = function (x, y, duration) {
        if (this._targetOffsetX !== x || this._targetOffsetY !== y) {
            this._targetOffsetX = x;
            this._targetOffsetY = y;
            this._movementDuration = duration;
            if (duration === 0) {
                this._offsetX = x;
                this._offsetY = y;
            }
        }
    };
    Sprite_Battler.prototype.onMoveEnd = function () {
        // nothing to do.
    };
    Sprite_Battler.prototype.isEffecting = function () {
        return false;
    };
    Sprite_Battler.prototype.isMoving = function () {
        return this._movementDuration > 0;
    };
    Sprite_Battler.prototype.inHomePosition = function () {
        return this._offsetX === 0 && this._offsetY === 0;
    };
    return Sprite_Battler;
}(SpriteBase_1.Sprite_Base));
exports.Sprite_Battler = Sprite_Battler;

},{"../managers/globals":43,"./SpriteBase":96,"./SpriteDamage":100}],98:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Button = void 0;
var Rectangle_1 = require("../core/Rectangle");
var Sprite_1 = require("../core/Sprite");
var TouchInput_1 = require("../core/TouchInput");
var Sprite_Button = /** @class */ (function (_super) {
    __extends(Sprite_Button, _super);
    function Sprite_Button() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Sprite_Button.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._touching = false;
        this._coldFrame = null;
        this._hotFrame = null;
        this._clickHandler = null;
    };
    Sprite_Button.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateFrame();
        this.processTouch();
    };
    Sprite_Button.prototype.updateFrame = function () {
        var frame;
        if (this._touching) {
            frame = this._hotFrame;
        }
        else {
            frame = this._coldFrame;
        }
        if (frame) {
            this.setFrame(frame.x, frame.y, frame.width, frame.height);
        }
    };
    Sprite_Button.prototype.setColdFrame = function (x, y, width, height) {
        this._coldFrame = new Rectangle_1.Rectangle(x, y, width, height);
    };
    Sprite_Button.prototype.setHotFrame = function (x, y, width, height) {
        this._hotFrame = new Rectangle_1.Rectangle(x, y, width, height);
    };
    Sprite_Button.prototype.setClickHandler = function (method) {
        this._clickHandler = method;
    };
    Sprite_Button.prototype.callClickHandler = function () {
        if (this._clickHandler) {
            this._clickHandler();
        }
    };
    Sprite_Button.prototype.processTouch = function () {
        if (this.isActive()) {
            if (TouchInput_1.TouchInput.isTriggered() && this.isButtonTouched()) {
                this._touching = true;
            }
            if (this._touching) {
                if (TouchInput_1.TouchInput.isReleased() || !this.isButtonTouched()) {
                    this._touching = false;
                    if (TouchInput_1.TouchInput.isReleased()) {
                        this.callClickHandler();
                    }
                }
            }
        }
        else {
            this._touching = false;
        }
    };
    Sprite_Button.prototype.isActive = function () {
        var node = this;
        while (node) {
            if (!node.visible) {
                return false;
            }
            node = node.parent;
        }
        return true;
    };
    Sprite_Button.prototype.isButtonTouched = function () {
        var x = this.canvasToLocalX(TouchInput_1.TouchInput.x);
        var y = this.canvasToLocalY(TouchInput_1.TouchInput.y);
        return x >= 0 && y >= 0 && x < this.width && y < this.height;
    };
    Sprite_Button.prototype.canvasToLocalX = function (x) {
        var node = this;
        while (node) {
            x -= node.x;
            node = node.parent;
        }
        return x;
    };
    Sprite_Button.prototype.canvasToLocalY = function (y) {
        var node = this;
        while (node) {
            y -= node.y;
            node = node.parent;
        }
        return y;
    };
    return Sprite_Button;
}(Sprite_1.Sprite));
exports.Sprite_Button = Sprite_Button;

},{"../core/Rectangle":18,"../core/Sprite":21,"../core/TouchInput":27}],99:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Character = void 0;
var Sprite_1 = require("../core/Sprite");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SpriteBalloon_1 = require("./SpriteBalloon");
var SpriteBase_1 = require("./SpriteBase");
var Sprite_Character = /** @class */ (function (_super) {
    __extends(Sprite_Character, _super);
    function Sprite_Character() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Sprite_Character.prototype) {
        // 	this.initialize(param.character);
        // }
    }
    Sprite_Character.prototype.initialize = function (character) {
        _super.prototype.initialize.call(this);
        this.initMembers();
        this.setCharacter(character);
    };
    Sprite_Character.prototype.initMembers = function () {
        this.anchor.x = 0.5;
        this.anchor.y = 1;
        this._character = null;
        this._balloonDuration = 0;
        this._tilesetId = 0;
        this._upperBody = null;
        this._lowerBody = null;
    };
    Sprite_Character.prototype.setCharacter = function (character) {
        this._character = character;
    };
    Sprite_Character.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateBitmap();
        this.updateFrame();
        this.updatePosition();
        this.updateAnimation();
        this.updateBalloon();
        this.updateOther();
    };
    Sprite_Character.prototype.updateVisibility = function () {
        _super.prototype.updateVisibility.call(this);
        if (this._character.isTransparent()) {
            this.visible = false;
        }
    };
    Sprite_Character.prototype.isTile = function () {
        // NOTE: オリジナルにはバグがある？ 関数と数を比較している。
        // return this._character.tileId > 0;
        return this._character.tileId() > 0;
    };
    Sprite_Character.prototype.tilesetBitmap = function (tileId) {
        var tileset = globals_1.$gameMap.tileset();
        var setNumber = 5 + Math.floor(tileId / 256);
        return ImageManager_1.ImageManager.loadTileset(tileset.tilesetNames[setNumber]);
    };
    Sprite_Character.prototype.updateBitmap = function () {
        if (this.isImageChanged()) {
            this._tilesetId = globals_1.$gameMap.tilesetId();
            this._tileId = this._character.tileId();
            this._characterName = this._character.characterName();
            this._characterIndex = this._character.characterIndex();
            if (this._tileId > 0) {
                this.setTileBitmap();
            }
            else {
                this.setCharacterBitmap();
            }
        }
    };
    Sprite_Character.prototype.isImageChanged = function () {
        return (this._tilesetId !== globals_1.$gameMap.tilesetId() ||
            this._tileId !== this._character.tileId() ||
            this._characterName !== this._character.characterName() ||
            this._characterIndex !== this._character.characterIndex());
    };
    Sprite_Character.prototype.setTileBitmap = function () {
        this.bitmap = this.tilesetBitmap(this._tileId);
    };
    Sprite_Character.prototype.setCharacterBitmap = function () {
        this.bitmap = ImageManager_1.ImageManager.loadCharacter(this._characterName);
        this._isBigCharacter = ImageManager_1.ImageManager.isBigCharacter(this._characterName);
    };
    Sprite_Character.prototype.updateFrame = function () {
        if (this._tileId > 0) {
            this.updateTileFrame();
        }
        else {
            this.updateCharacterFrame();
        }
    };
    Sprite_Character.prototype.updateTileFrame = function () {
        var pw = this.patternWidth();
        var ph = this.patternHeight();
        var sx = ((Math.floor(this._tileId / 128) % 2) * 8 + (this._tileId % 8)) * pw;
        var sy = (Math.floor((this._tileId % 256) / 8) % 16) * ph;
        this.setFrame(sx, sy, pw, ph);
    };
    Sprite_Character.prototype.updateCharacterFrame = function () {
        var pw = this.patternWidth();
        var ph = this.patternHeight();
        var sx = (this.characterBlockX() + this.characterPatternX()) * pw;
        var sy = (this.characterBlockY() + this.characterPatternY()) * ph;
        this.updateHalfBodySprites();
        if (this._bushDepth > 0) {
            var d = this._bushDepth;
            this._upperBody.setFrame(sx, sy, pw, ph - d);
            this._lowerBody.setFrame(sx, sy + ph - d, pw, d);
            this.setFrame(sx, sy, 0, ph);
        }
        else {
            this.setFrame(sx, sy, pw, ph);
        }
    };
    Sprite_Character.prototype.characterBlockX = function () {
        if (this._isBigCharacter) {
            return 0;
        }
        else {
            var index = this._character.characterIndex();
            return (index % 4) * 3;
        }
    };
    Sprite_Character.prototype.characterBlockY = function () {
        if (this._isBigCharacter) {
            return 0;
        }
        else {
            var index = this._character.characterIndex();
            return Math.floor(index / 4) * 4;
        }
    };
    Sprite_Character.prototype.characterPatternX = function () {
        return this._character.pattern();
    };
    Sprite_Character.prototype.characterPatternY = function () {
        return (this._character.direction() - 2) / 2;
    };
    Sprite_Character.prototype.patternWidth = function () {
        if (this._tileId > 0) {
            return globals_1.$gameMap.tileWidth();
        }
        else if (this._isBigCharacter) {
            return this.bitmap.width / 3;
        }
        else {
            return this.bitmap.width / 12;
        }
    };
    Sprite_Character.prototype.patternHeight = function () {
        if (this._tileId > 0) {
            return globals_1.$gameMap.tileHeight();
        }
        else if (this._isBigCharacter) {
            return this.bitmap.height / 4;
        }
        else {
            return this.bitmap.height / 8;
        }
    };
    Sprite_Character.prototype.updateHalfBodySprites = function () {
        if (this._bushDepth > 0) {
            this.createHalfBodySprites();
            this._upperBody.bitmap = this.bitmap;
            this._upperBody.visible = true;
            this._upperBody.y = -this._bushDepth;
            this._lowerBody.bitmap = this.bitmap;
            this._lowerBody.visible = true;
            this._upperBody.setBlendColor(this.getBlendColor());
            this._lowerBody.setBlendColor(this.getBlendColor());
            this._upperBody.setColorTone(this.getColorTone());
            this._lowerBody.setColorTone(this.getColorTone());
        }
        else if (this._upperBody) {
            this._upperBody.visible = false;
            this._lowerBody.visible = false;
        }
    };
    Sprite_Character.prototype.createHalfBodySprites = function () {
        if (!this._upperBody) {
            this._upperBody = new Sprite_1.Sprite();
            this._upperBody.anchor.x = 0.5;
            this._upperBody.anchor.y = 1;
            this.addChild(this._upperBody);
        }
        if (!this._lowerBody) {
            this._lowerBody = new Sprite_1.Sprite();
            this._lowerBody.anchor.x = 0.5;
            this._lowerBody.anchor.y = 1;
            this._lowerBody.opacity = 128;
            this.addChild(this._lowerBody);
        }
    };
    Sprite_Character.prototype.updatePosition = function () {
        this.x = this._character.screenX();
        this.y = this._character.screenY();
        this.z = this._character.screenZ();
    };
    Sprite_Character.prototype.updateAnimation = function () {
        this.setupAnimation();
        if (!this.isAnimationPlaying()) {
            this._character.endAnimation();
        }
        if (!this.isBalloonPlaying()) {
            this._character.endBalloon();
        }
    };
    Sprite_Character.prototype.updateOther = function () {
        this.opacity = this._character.opacity();
        this.blendMode = this._character.blendMode();
        this._bushDepth = this._character.bushDepth();
    };
    Sprite_Character.prototype.setupAnimation = function () {
        if (this._character.animationId() > 0) {
            var animation = globals_1.$dataAnimations[this._character.animationId()];
            this.startAnimation(animation, false, 0);
            this._character.startAnimation();
        }
    };
    Sprite_Character.prototype.setupBalloon = function () {
        if (this._character.balloonId() > 0) {
            this.startBalloon();
            this._character.startBalloon();
        }
    };
    Sprite_Character.prototype.startBalloon = function () {
        if (!this._balloonSprite) {
            this._balloonSprite = new SpriteBalloon_1.Sprite_Balloon();
        }
        this._balloonSprite.setup(this._character.balloonId());
        this.parent.addChild(this._balloonSprite);
    };
    Sprite_Character.prototype.updateBalloon = function () {
        this.setupBalloon();
        if (this._balloonSprite) {
            this._balloonSprite.x = this.x;
            this._balloonSprite.y = this.y - this.height;
            if (!this._balloonSprite.isPlaying()) {
                this.endBalloon();
            }
        }
    };
    Sprite_Character.prototype.endBalloon = function () {
        if (this._balloonSprite) {
            this.parent.removeChild(this._balloonSprite);
            this._balloonSprite = null;
        }
    };
    Sprite_Character.prototype.isBalloonPlaying = function () {
        return !!this._balloonSprite;
    };
    return Sprite_Character;
}(SpriteBase_1.Sprite_Base));
exports.Sprite_Character = Sprite_Character;

},{"../core/Sprite":21,"../managers/ImageManager":37,"../managers/globals":43,"./SpriteBalloon":95,"./SpriteBase":96}],100:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Damage = void 0;
var Sprite_1 = require("../core/Sprite");
var ImageManager_1 = require("../managers/ImageManager");
var Sprite_Damage = /** @class */ (function (_super) {
    __extends(Sprite_Damage, _super);
    function Sprite_Damage() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Sprite_Damage.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._duration = 90;
        this._flashColor = [0, 0, 0, 0];
        this._flashDuration = 0;
        this._damageBitmap = ImageManager_1.ImageManager.loadSystem("Damage");
    };
    Sprite_Damage.prototype.setup = function (target) {
        var result = target.result();
        if (result.missed || result.evaded) {
            this.createMiss();
        }
        else if (result.hpAffected) {
            this.createDigits(0, result.hpDamage);
        }
        else if (target.isAlive() && result.mpDamage !== 0) {
            this.createDigits(2, result.mpDamage);
        }
        if (result.critical) {
            this.setupCriticalEffect();
        }
    };
    Sprite_Damage.prototype.setupCriticalEffect = function () {
        this._flashColor = [255, 0, 0, 160];
        this._flashDuration = 60;
    };
    Sprite_Damage.prototype.digitWidth = function () {
        return this._damageBitmap ? this._damageBitmap.width / 10 : 0;
    };
    Sprite_Damage.prototype.digitHeight = function () {
        return this._damageBitmap ? this._damageBitmap.height / 5 : 0;
    };
    Sprite_Damage.prototype.createMiss = function () {
        var w = this.digitWidth();
        var h = this.digitHeight();
        var sprite = this.createChildSprite();
        sprite.setFrame(0, 4 * h, 4 * w, h);
        sprite.dy = 0;
    };
    Sprite_Damage.prototype.createDigits = function (baseRow, value) {
        var string = Math.abs(value).toString();
        var row = baseRow + (value < 0 ? 1 : 0);
        var w = this.digitWidth();
        var h = this.digitHeight();
        for (var i = 0; i < string.length; i++) {
            var sprite = this.createChildSprite();
            var n = Number(string[i]);
            sprite.setFrame(n * w, row * h, w, h);
            sprite.x = (i - (string.length - 1) / 2) * w;
            sprite.dy = -i;
        }
    };
    Sprite_Damage.prototype.createChildSprite = function () {
        var sprite = new Sprite_1.Sprite();
        sprite.bitmap = this._damageBitmap;
        sprite.anchor.x = 0.5;
        sprite.anchor.y = 1;
        sprite.y = -40;
        sprite.ry = sprite.y;
        this.addChild(sprite);
        return sprite;
    };
    Sprite_Damage.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._duration > 0) {
            this._duration--;
            for (var i = 0; i < this.children.length; i++) {
                this.updateChild(this.children[i]);
            }
        }
        this.updateFlash();
        this.updateOpacity();
    };
    Sprite_Damage.prototype.updateChild = function (sprite) {
        sprite.dy += 0.5;
        sprite.ry += sprite.dy;
        if (sprite.ry >= 0) {
            sprite.ry = 0;
            sprite.dy *= -0.6;
        }
        sprite.y = Math.round(sprite.ry);
        sprite.setBlendColor(this._flashColor);
    };
    Sprite_Damage.prototype.updateFlash = function () {
        if (this._flashDuration > 0) {
            var d = this._flashDuration--;
            this._flashColor[3] *= (d - 1) / d;
        }
    };
    Sprite_Damage.prototype.updateOpacity = function () {
        if (this._duration < 10) {
            this.opacity = (255 * this._duration) / 10;
        }
    };
    Sprite_Damage.prototype.isPlaying = function () {
        return this._duration > 0;
    };
    return Sprite_Damage;
}(Sprite_1.Sprite));
exports.Sprite_Damage = Sprite_Damage;

},{"../core/Sprite":21,"../managers/ImageManager":37}],101:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Destination = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var globals_1 = require("../managers/globals");
var Sprite_Destination = /** @class */ (function (_super) {
    __extends(Sprite_Destination, _super);
    function Sprite_Destination() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Sprite_Destination.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.createBitmap();
        this._frameCount = 0;
    };
    Sprite_Destination.prototype.update = function () {
        _super.prototype.update.call(this);
        if (globals_1.$gameTemp.isDestinationValid()) {
            this.updatePosition();
            this.updateAnimation();
            this.visible = true;
        }
        else {
            this._frameCount = 0;
            this.visible = false;
        }
    };
    Sprite_Destination.prototype.createBitmap = function () {
        var tileWidth = globals_1.$gameMap.tileWidth();
        var tileHeight = globals_1.$gameMap.tileHeight();
        this.bitmap = new Bitmap_1.Bitmap(tileWidth, tileHeight);
        this.bitmap.fillAll("white");
        this.anchor.x = 0.5;
        this.anchor.y = 0.5;
        this.blendMode = Graphics_1.Graphics.BLEND_ADD;
    };
    Sprite_Destination.prototype.updatePosition = function () {
        var tileWidth = globals_1.$gameMap.tileWidth();
        var tileHeight = globals_1.$gameMap.tileHeight();
        var x = globals_1.$gameTemp.destinationX();
        var y = globals_1.$gameTemp.destinationY();
        this.x = (globals_1.$gameMap.adjustX(x) + 0.5) * tileWidth;
        this.y = (globals_1.$gameMap.adjustY(y) + 0.5) * tileHeight;
    };
    Sprite_Destination.prototype.updateAnimation = function () {
        this._frameCount++;
        this._frameCount %= 20;
        this.opacity = (20 - this._frameCount) * 6;
        this.scale.x = 1 + this._frameCount / 20;
        this.scale.y = this.scale.x;
    };
    return Sprite_Destination;
}(Sprite_1.Sprite));
exports.Sprite_Destination = Sprite_Destination;

},{"../core/Bitmap":13,"../core/Graphics":14,"../core/Sprite":21,"../managers/globals":43}],102:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Enemy = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SoundManager_1 = require("../managers/SoundManager");
var SpriteBattler_1 = require("./SpriteBattler");
var SpriteStateIcon_1 = require("./SpriteStateIcon");
var Sprite_Enemy = /** @class */ (function (_super) {
    __extends(Sprite_Enemy, _super);
    function Sprite_Enemy(enemy) {
        return _super.call(this, enemy) || this;
    }
    Sprite_Enemy.prototype.initialize = function (battler) {
        _super.prototype.initialize.call(this, battler);
    };
    Sprite_Enemy.prototype.initMembers = function () {
        _super.prototype.initMembers.call(this);
        this._enemy = null;
        this._appeared = false;
        this._battlerName = "";
        this._battlerHue = 0;
        this._effectType = null;
        this._effectDuration = 0;
        this._shake = 0;
        this.createStateIconSprite();
    };
    Sprite_Enemy.prototype.createStateIconSprite = function () {
        this._stateIconSprite = new SpriteStateIcon_1.Sprite_StateIcon();
        // これが黒い縦線の正体みたい
        this.addChild(this._stateIconSprite);
    };
    Sprite_Enemy.prototype.setBattler = function (battler) {
        _super.prototype.setBattler.call(this, battler);
        this._enemy = battler;
        this.setHome(battler.screenX(), battler.screenY());
        this._stateIconSprite.setup(battler);
    };
    Sprite_Enemy.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._enemy) {
            this.updateEffect();
            this.updateStateSprite();
        }
    };
    Sprite_Enemy.prototype.updateBitmap = function () {
        _super.prototype.updateBitmap.call(this);
        var name = this._enemy.battlerName();
        var hue = this._enemy.battlerHue();
        if (this._battlerName !== name || this._battlerHue !== hue) {
            this._battlerName = name;
            this._battlerHue = hue;
            this.loadBitmap(name, hue);
            this.initVisibility();
        }
    };
    Sprite_Enemy.prototype.loadBitmap = function (name, hue) {
        if (globals_1.$gameSystem.isSideView()) {
            this.bitmap = ImageManager_1.ImageManager.loadSvEnemy(name, hue);
        }
        else {
            this.bitmap = ImageManager_1.ImageManager.loadEnemy(name, hue);
        }
    };
    Sprite_Enemy.prototype.updateFrame = function () {
        _super.prototype.updateFrame.call(this);
        var frameHeight = this.bitmap.height;
        if (this._effectType === "bossCollapse") {
            frameHeight = this._effectDuration;
        }
        this.setFrame(0, 0, this.bitmap.width, frameHeight);
    };
    Sprite_Enemy.prototype.updatePosition = function () {
        _super.prototype.updatePosition.call(this);
        this.x += this._shake;
    };
    Sprite_Enemy.prototype.updateStateSprite = function () {
        // this._stateIconSprite.y = -Math.round((this.bitmap.height + 40) * 0.9);
        // if (this._stateIconSprite.y < 20 - this.y) {
        // 	this._stateIconSprite.y = 20 - this.y;
        // }
        this._stateIconSprite.x = this.width / 2 - SpriteStateIcon_1.Sprite_StateIcon._iconWidth / 2;
        this._stateIconSprite.y = (-1 * SpriteStateIcon_1.Sprite_StateIcon._iconHeight) / 2;
    };
    Sprite_Enemy.prototype.initVisibility = function () {
        this._appeared = this._enemy.isAlive();
        if (!this._appeared) {
            this.opacity = 0;
        }
    };
    Sprite_Enemy.prototype.setupEffect = function () {
        if (this._appeared && this._enemy.isEffectRequested()) {
            this.startEffect(this._enemy.effectType());
            this._enemy.clearEffect();
        }
        if (!this._appeared && this._enemy.isAlive()) {
            this.startEffect("appear");
        }
        else if (this._appeared && this._enemy.isHidden()) {
            this.startEffect("disappear");
        }
    };
    Sprite_Enemy.prototype.startEffect = function (effectType) {
        this._effectType = effectType;
        switch (this._effectType) {
            case "appear":
                this.startAppear();
                break;
            case "disappear":
                this.startDisappear();
                break;
            case "whiten":
                this.startWhiten();
                break;
            case "blink":
                this.startBlink();
                break;
            case "collapse":
                this.startCollapse();
                break;
            case "bossCollapse":
                this.startBossCollapse();
                break;
            case "instantCollapse":
                this.startInstantCollapse();
                break;
        }
        this.revertToNormal();
    };
    Sprite_Enemy.prototype.startAppear = function () {
        this._effectDuration = 16;
        this._appeared = true;
    };
    Sprite_Enemy.prototype.startDisappear = function () {
        this._effectDuration = 32;
        this._appeared = false;
    };
    Sprite_Enemy.prototype.startWhiten = function () {
        this._effectDuration = 16;
    };
    Sprite_Enemy.prototype.startBlink = function () {
        this._effectDuration = 20;
    };
    Sprite_Enemy.prototype.startCollapse = function () {
        this._effectDuration = 32;
        this._appeared = false;
    };
    Sprite_Enemy.prototype.startBossCollapse = function () {
        this._effectDuration = this.bitmap.height;
        this._appeared = false;
    };
    Sprite_Enemy.prototype.startInstantCollapse = function () {
        this._effectDuration = 16;
        this._appeared = false;
    };
    Sprite_Enemy.prototype.updateEffect = function () {
        this.setupEffect();
        if (this._effectDuration > 0) {
            this._effectDuration--;
            switch (this._effectType) {
                case "whiten":
                    this.updateWhiten();
                    break;
                case "blink":
                    this.updateBlink();
                    break;
                case "appear":
                    this.updateAppear();
                    break;
                case "disappear":
                    this.updateDisappear();
                    break;
                case "collapse":
                    this.updateCollapse();
                    break;
                case "bossCollapse":
                    this.updateBossCollapse();
                    break;
                case "instantCollapse":
                    this.updateInstantCollapse();
                    break;
            }
            if (this._effectDuration === 0) {
                this._effectType = null;
            }
        }
    };
    Sprite_Enemy.prototype.isEffecting = function () {
        return this._effectType !== null;
    };
    Sprite_Enemy.prototype.revertToNormal = function () {
        this._shake = 0;
        this.blendMode = 0;
        this.opacity = 255;
        this.setBlendColor([0, 0, 0, 0]);
    };
    Sprite_Enemy.prototype.updateWhiten = function () {
        var alpha = 128 - (16 - this._effectDuration) * 10;
        this.setBlendColor([255, 255, 255, alpha]);
    };
    Sprite_Enemy.prototype.updateBlink = function () {
        this.opacity = this._effectDuration % 10 < 5 ? 255 : 0;
    };
    Sprite_Enemy.prototype.updateAppear = function () {
        this.opacity = (16 - this._effectDuration) * 16;
    };
    Sprite_Enemy.prototype.updateDisappear = function () {
        this.opacity = 256 - (32 - this._effectDuration) * 10;
    };
    Sprite_Enemy.prototype.updateCollapse = function () {
        this.blendMode = Graphics_1.Graphics.BLEND_ADD;
        this.setBlendColor([255, 128, 128, 128]);
        this.opacity *= this._effectDuration / (this._effectDuration + 1);
    };
    Sprite_Enemy.prototype.updateBossCollapse = function () {
        this._shake = (this._effectDuration % 2) * 4 - 2;
        this.blendMode = Graphics_1.Graphics.BLEND_ADD;
        this.opacity *= this._effectDuration / (this._effectDuration + 1);
        this.setBlendColor([255, 255, 255, 255 - this.opacity]);
        if (this._effectDuration % 20 === 19) {
            SoundManager_1.SoundManager.playBossCollapse2();
        }
    };
    Sprite_Enemy.prototype.updateInstantCollapse = function () {
        this.opacity = 0;
    };
    Sprite_Enemy.prototype.damageOffsetX = function () {
        return 0;
    };
    Sprite_Enemy.prototype.damageOffsetY = function () {
        return -8;
    };
    return Sprite_Enemy;
}(SpriteBattler_1.Sprite_Battler));
exports.Sprite_Enemy = Sprite_Enemy;

},{"../core/Graphics":14,"../managers/ImageManager":37,"../managers/SoundManager":40,"../managers/globals":43,"./SpriteBattler":97,"./SpriteStateIcon":104}],103:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Picture = void 0;
var Sprite_1 = require("../core/Sprite");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var Sprite_Picture = /** @class */ (function (_super) {
    __extends(Sprite_Picture, _super);
    function Sprite_Picture(pictureId) {
        return _super.call(this, pictureId) || this;
        // if (Object.getPrototypeOf(this) === Sprite_Picture.prototype) {
        // 	this.initialize(param.pictureId);
        // }
    }
    Sprite_Picture.prototype.initialize = function (pictureId) {
        _super.prototype.initialize.call(this);
        this._pictureId = pictureId;
        this._pictureName = "";
        this._isPicture = true;
        this.update();
    };
    Sprite_Picture.prototype.picture = function () {
        return globals_1.$gameScreen.picture(this._pictureId);
    };
    Sprite_Picture.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateBitmap();
        if (this.visible) {
            this.updateOrigin();
            this.updatePosition();
            this.updateScale();
            this.updateTone();
            this.updateOther();
        }
    };
    Sprite_Picture.prototype.updateBitmap = function () {
        var picture = this.picture();
        if (picture) {
            var pictureName = picture.name();
            if (this._pictureName !== pictureName) {
                this._pictureName = pictureName;
                this.loadBitmap();
            }
            this.visible = true;
        }
        else {
            this._pictureName = "";
            this.bitmap = null;
            this.visible = false;
        }
    };
    Sprite_Picture.prototype.updateOrigin = function () {
        var picture = this.picture();
        if (picture.origin() === 0) {
            this.anchor.x = 0;
            this.anchor.y = 0;
        }
        else {
            this.anchor.x = 0.5;
            this.anchor.y = 0.5;
        }
    };
    Sprite_Picture.prototype.updatePosition = function () {
        var picture = this.picture();
        this.x = Math.floor(picture.x());
        this.y = Math.floor(picture.y());
    };
    Sprite_Picture.prototype.updateScale = function () {
        var picture = this.picture();
        this.scale.x = picture.scaleX() / 100;
        this.scale.y = picture.scaleY() / 100;
    };
    Sprite_Picture.prototype.updateTone = function () {
        var picture = this.picture();
        if (picture.tone()) {
            this.setColorTone(picture.tone());
        }
        else {
            this.setColorTone([0, 0, 0, 0]);
        }
    };
    Sprite_Picture.prototype.updateOther = function () {
        var picture = this.picture();
        this.opacity = picture.opacity();
        // TODO: impl
        // this.blendMode = picture.blendMode();
        this.rotation = (picture.angle() * Math.PI) / 180;
    };
    Sprite_Picture.prototype.loadBitmap = function () {
        this.bitmap = ImageManager_1.ImageManager.loadPicture(this._pictureName);
    };
    return Sprite_Picture;
}(Sprite_1.Sprite));
exports.Sprite_Picture = Sprite_Picture;

},{"../core/Sprite":21,"../managers/ImageManager":37,"../managers/globals":43}],104:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_StateIcon = void 0;
var Sprite_1 = require("../core/Sprite");
var ImageManager_1 = require("../managers/ImageManager");
var Sprite_StateIcon = /** @class */ (function (_super) {
    __extends(Sprite_StateIcon, _super);
    function Sprite_StateIcon() {
        return _super.call(this) || this;
    }
    Sprite_StateIcon.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initMembers();
        this.loadBitmap();
    };
    Sprite_StateIcon.prototype.initMembers = function () {
        this._battler = null;
        this._iconIndex = 0;
        this._animationCount = 0;
        this._animationIndex = 0;
        this.anchor.x = 0.5;
        this.anchor.y = 0.5;
    };
    Sprite_StateIcon.prototype.loadBitmap = function () {
        this.bitmap = ImageManager_1.ImageManager.loadSystem("IconSet");
        this.setFrame(0, 0, 0, 0);
    };
    Sprite_StateIcon.prototype.setup = function (battler) {
        this._battler = battler;
    };
    Sprite_StateIcon.prototype.update = function () {
        _super.prototype.update.call(this);
        this._animationCount++;
        if (this._animationCount >= this.animationWait()) {
            this.updateIcon();
            this.updateFrame();
            this._animationCount = 0;
        }
    };
    Sprite_StateIcon.prototype.animationWait = function () {
        return 40;
    };
    Sprite_StateIcon.prototype.updateIcon = function () {
        var icons = [];
        if (this._battler && this._battler.isAlive()) {
            icons = this._battler.allIcons();
        }
        if (icons.length > 0) {
            this._animationIndex++;
            if (this._animationIndex >= icons.length) {
                this._animationIndex = 0;
            }
            this._iconIndex = icons[this._animationIndex];
        }
        else {
            this._animationIndex = 0;
            this._iconIndex = 0;
        }
    };
    Sprite_StateIcon.prototype.updateFrame = function () {
        var pw = Sprite_StateIcon._iconWidth;
        var ph = Sprite_StateIcon._iconHeight;
        var sx = (this._iconIndex % 16) * pw; // + pw;
        var sy = Math.floor(this._iconIndex / 16) * ph;
        this.setFrame(sx, sy, pw, ph);
    };
    Sprite_StateIcon._iconWidth = 32;
    Sprite_StateIcon._iconHeight = 32;
    return Sprite_StateIcon;
}(Sprite_1.Sprite));
exports.Sprite_StateIcon = Sprite_StateIcon;

},{"../core/Sprite":21,"../managers/ImageManager":37}],105:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_StateOverlay = void 0;
var ImageManager_1 = require("../managers/ImageManager");
var SpriteBase_1 = require("./SpriteBase");
var Sprite_StateOverlay = /** @class */ (function (_super) {
    __extends(Sprite_StateOverlay, _super);
    function Sprite_StateOverlay() {
        return _super.call(this) || this;
    }
    Sprite_StateOverlay.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initMembers();
        this.loadBitmap();
    };
    Sprite_StateOverlay.prototype.initMembers = function () {
        this._battler = null;
        this._overlayIndex = 0;
        this._animationCount = 0;
        this._pattern = 0;
        this.anchor.x = 0.5;
        this.anchor.y = 1;
    };
    Sprite_StateOverlay.prototype.loadBitmap = function () {
        this.bitmap = ImageManager_1.ImageManager.loadSystem("States");
        this.setFrame(0, 0, 0, 0);
    };
    Sprite_StateOverlay.prototype.setup = function (battler) {
        this._battler = battler;
    };
    Sprite_StateOverlay.prototype.update = function () {
        SpriteBase_1.Sprite_Base.prototype.update.call(this);
        this._animationCount++;
        if (this._animationCount >= this.animationWait()) {
            this.updatePattern();
            this.updateFrame();
            this._animationCount = 0;
        }
    };
    Sprite_StateOverlay.prototype.animationWait = function () {
        return 8;
    };
    Sprite_StateOverlay.prototype.updatePattern = function () {
        this._pattern++;
        this._pattern %= 8;
        if (this._battler) {
            this._overlayIndex = this._battler.stateOverlayIndex();
        }
    };
    Sprite_StateOverlay.prototype.updateFrame = function () {
        if (this._overlayIndex > 0) {
            var w = 96;
            var h = 96;
            var sx = this._pattern * w;
            var sy = (this._overlayIndex - 1) * h;
            this.setFrame(sx, sy, w, h);
        }
        else {
            this.setFrame(0, 0, 0, 0);
        }
    };
    return Sprite_StateOverlay;
}(SpriteBase_1.Sprite_Base));
exports.Sprite_StateOverlay = Sprite_StateOverlay;

},{"../managers/ImageManager":37,"./SpriteBase":96}],106:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Timer = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var Sprite_Timer = /** @class */ (function (_super) {
    __extends(Sprite_Timer, _super);
    function Sprite_Timer() {
        return _super.call(this) || this;
        // if (Object.getPrototypeOf(this) === Sprite_Timer.prototype) {
        // 	this.initialize(param.bitmap);
        // }
    }
    Sprite_Timer.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._seconds = 0;
        this.createBitmap();
        this.update();
    };
    Sprite_Timer.prototype.createBitmap = function () {
        this.bitmap = new Bitmap_1.Bitmap(96, 48);
        this.bitmap.fontSize = 32;
    };
    Sprite_Timer.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateBitmap();
        this.updatePosition();
        this.updateVisibility();
    };
    Sprite_Timer.prototype.updateBitmap = function () {
        if (this._seconds !== globals_1.$gameTimer.seconds()) {
            this._seconds = globals_1.$gameTimer.seconds();
            this.redraw();
        }
    };
    Sprite_Timer.prototype.redraw = function () {
        var text = this.timerText();
        var width = this.bitmap.width;
        var height = this.bitmap.height;
        this.bitmap.clear();
        this.bitmap.drawText(text, 0, 0, width, height, "center");
    };
    Sprite_Timer.prototype.timerText = function () {
        var min = Math.floor(this._seconds / 60) % 60;
        var sec = this._seconds % 60;
        return Utils_1.Utils.padZero(min, 2) + ":" + Utils_1.Utils.padZero(sec, 2);
    };
    Sprite_Timer.prototype.updatePosition = function () {
        this.x = Graphics_1.Graphics.width - this.bitmap.width;
        this.y = 0;
    };
    Sprite_Timer.prototype.updateVisibility = function () {
        this.visible = globals_1.$gameTimer.isWorking();
    };
    return Sprite_Timer;
}(Sprite_1.Sprite));
exports.Sprite_Timer = Sprite_Timer;

},{"../core/Bitmap":13,"../core/Graphics":14,"../core/Sprite":21,"../core/Utils":28,"../managers/globals":43}],107:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sprite_Weapon = void 0;
var ImageManager_1 = require("../managers/ImageManager");
var SpriteBase_1 = require("./SpriteBase");
var Sprite_Weapon = /** @class */ (function (_super) {
    __extends(Sprite_Weapon, _super);
    function Sprite_Weapon() {
        return _super.call(this) || this;
    }
    Sprite_Weapon.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initMembers();
    };
    Sprite_Weapon.prototype.initMembers = function () {
        this._weaponImageId = 0;
        this._animationCount = 0;
        this._pattern = 0;
        this.anchor.x = 0.5;
        this.anchor.y = 1;
        this.x = -16;
    };
    Sprite_Weapon.prototype.setup = function (weaponImageId) {
        this._weaponImageId = weaponImageId;
        this._animationCount = 0;
        this._pattern = 0;
        this.loadBitmap();
        this.updateFrame();
    };
    Sprite_Weapon.prototype.update = function () {
        SpriteBase_1.Sprite_Base.prototype.update.call(this);
        this._animationCount++;
        if (this._animationCount >= this.animationWait()) {
            this.updatePattern();
            this.updateFrame();
            this._animationCount = 0;
        }
    };
    Sprite_Weapon.prototype.animationWait = function () {
        return 12;
    };
    Sprite_Weapon.prototype.updatePattern = function () {
        this._pattern++;
        if (this._pattern >= 3) {
            this._weaponImageId = 0;
        }
    };
    Sprite_Weapon.prototype.loadBitmap = function () {
        var pageId = Math.floor((this._weaponImageId - 1) / 12) + 1;
        if (pageId >= 1) {
            this.bitmap = ImageManager_1.ImageManager.loadSystem("Weapons" + pageId);
        }
        else {
            this.bitmap = ImageManager_1.ImageManager.loadSystem("");
        }
    };
    Sprite_Weapon.prototype.updateFrame = function () {
        if (this._weaponImageId > 0) {
            var index = (this._weaponImageId - 1) % 12;
            var w = 96;
            var h = 64;
            var sx = (Math.floor(index / 6) * 3 + this._pattern) * w;
            var sy = Math.floor(index % 6) * h;
            this.setFrame(sx, sy, w, h);
        }
        else {
            this.setFrame(0, 0, 0, 0);
        }
    };
    Sprite_Weapon.prototype.isPlaying = function () {
        return this._weaponImageId > 0;
    };
    return Sprite_Weapon;
}(SpriteBase_1.Sprite_Base));
exports.Sprite_Weapon = Sprite_Weapon;

},{"../managers/ImageManager":37,"./SpriteBase":96}],108:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spriteset_Base = void 0;
var Graphics_1 = require("../core/Graphics");
var ScreenSprite_1 = require("../core/ScreenSprite");
var Sprite_1 = require("../core/Sprite");
var ToneSprite_1 = require("../core/ToneSprite");
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var SpritePicture_1 = require("./SpritePicture");
var SpriteTimer_1 = require("./SpriteTimer");
var Spriteset_Base = /** @class */ (function (_super) {
    __extends(Spriteset_Base, _super);
    function Spriteset_Base() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Spriteset_Base.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.setFrame(0, 0, Graphics_1.Graphics.width, Graphics_1.Graphics.height);
        this._tone = [0, 0, 0, 0];
        this.opaque = true;
        this.createLowerLayer();
        this.createToneChanger();
        this.createUpperLayer();
        this.update();
    };
    Spriteset_Base.prototype.createLowerLayer = function () {
        this.createBaseSprite();
    };
    Spriteset_Base.prototype.createUpperLayer = function () {
        this.createPictures();
        this.createTimer();
        this.createScreenSprites();
    };
    Spriteset_Base.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateScreenSprites();
        this.updateToneChanger();
        this.updatePosition();
    };
    Spriteset_Base.prototype.createBaseSprite = function () {
        this._baseSprite = new Sprite_1.Sprite();
        this._baseSprite.setFrame(0, 0, this.width, this.height);
        this._blackScreen = new ScreenSprite_1.ScreenSprite();
        this._blackScreen.opacity = 255;
        this.addChild(this._baseSprite);
        this._baseSprite.addChild(this._blackScreen);
    };
    Spriteset_Base.prototype.createToneChanger = function () {
        if (Graphics_1.Graphics.isWebGL()) {
            this.createWebGLToneChanger();
        }
        else {
            this.createCanvasToneChanger();
        }
    };
    Spriteset_Base.prototype.createWebGLToneChanger = function () {
        // const margin = 48;
        // const width = Graphics.width + margin * 2;
        // const height = Graphics.height + margin * 2;
        // this._toneFilter = new ToneFilter();
        // this._baseSprite.filters = [this._toneFilter];
        // this._baseSprite.filterArea = new Rectangle(-margin, -margin, width, height);
    };
    Spriteset_Base.prototype.createCanvasToneChanger = function () {
        this._toneSprite = new ToneSprite_1.ToneSprite();
        this.addChild(this._toneSprite);
    };
    Spriteset_Base.prototype.createPictures = function () {
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight;
        var x = (Graphics_1.Graphics.width - width) / 2;
        var y = (Graphics_1.Graphics.height - height) / 2;
        this._pictureContainer = new Sprite_1.Sprite();
        this._pictureContainer.setFrame(x, y, width, height);
        for (var i = 1; i <= globals_1.$gameScreen.maxPictures(); i++) {
            this._pictureContainer.addChild(new SpritePicture_1.Sprite_Picture(i));
        }
        this.addChild(this._pictureContainer);
    };
    Spriteset_Base.prototype.createTimer = function () {
        this._timerSprite = new SpriteTimer_1.Sprite_Timer();
        this.addChild(this._timerSprite);
    };
    Spriteset_Base.prototype.createScreenSprites = function () {
        this._flashSprite = new ScreenSprite_1.ScreenSprite();
        this._fadeSprite = new ScreenSprite_1.ScreenSprite();
        this.addChild(this._flashSprite);
        this.addChild(this._fadeSprite);
    };
    Spriteset_Base.prototype.updateScreenSprites = function () {
        var color = globals_1.$gameScreen.flashColor();
        this._flashSprite.setColor(color[0], color[1], color[2]);
        this._flashSprite.opacity = color[3];
        this._fadeSprite.opacity = 255 - globals_1.$gameScreen.brightness();
    };
    Spriteset_Base.prototype.updateToneChanger = function () {
        var tone = globals_1.$gameScreen.tone();
        if (!Utils_1.Utils.equals(this._tone, tone)) {
            this._tone = Utils_1.Utils.cloneArray(tone);
            if (Graphics_1.Graphics.isWebGL()) {
                this.updateWebGLToneChanger();
            }
            else {
                this.updateCanvasToneChanger();
            }
        }
    };
    Spriteset_Base.prototype.updateWebGLToneChanger = function () {
        // const tone = this._tone;
        // this._toneFilter.reset();
        // this._toneFilter.adjustTone(tone[0], tone[1], tone[2]);
        // this._toneFilter.adjustSaturation(-tone[3]);
    };
    Spriteset_Base.prototype.updateCanvasToneChanger = function () {
        var tone = this._tone;
        this._toneSprite.setTone(tone[0], tone[1], tone[2], tone[3]);
    };
    Spriteset_Base.prototype.updatePosition = function () {
        var screen = globals_1.$gameScreen;
        var scale = screen.zoomScale();
        this.scale.x = scale;
        this.scale.y = scale;
        this.x = Math.round(-screen.zoomX() * (scale - 1));
        this.y = Math.round(-screen.zoomY() * (scale - 1));
        this.x += Math.round(screen.shake());
    };
    return Spriteset_Base;
}(Sprite_1.Sprite));
exports.Spriteset_Base = Spriteset_Base;

},{"../core/Graphics":14,"../core/ScreenSprite":20,"../core/Sprite":21,"../core/ToneSprite":26,"../core/Utils":28,"../managers/globals":43,"./SpritePicture":103,"./SpriteTimer":106}],109:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spriteset_Battle = void 0;
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var TilingSprite_1 = require("../core/TilingSprite");
var BattleManager_1 = require("../managers/BattleManager");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SceneManager_1 = require("../managers/SceneManager");
var SpriteActor_1 = require("./SpriteActor");
var SpriteEnemy_1 = require("./SpriteEnemy");
var SpritesetBase_1 = require("./SpritesetBase");
var Spriteset_Battle = /** @class */ (function (_super) {
    __extends(Spriteset_Battle, _super);
    function Spriteset_Battle() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Spriteset_Battle.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this._battlebackLocated = false;
    };
    Spriteset_Battle.prototype.createLowerLayer = function () {
        _super.prototype.createLowerLayer.call(this);
        this.createBackground();
        this.createBattleField();
        this.createBattleback();
        this.createEnemies();
        this.createActors();
    };
    Spriteset_Battle.prototype.createBackground = function () {
        this._backgroundSprite = new Sprite_1.Sprite();
        this._backgroundSprite.bitmap = SceneManager_1.SceneManager.backgroundBitmap();
        this._baseSprite.addChild(this._backgroundSprite);
    };
    Spriteset_Battle.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateActors();
        this.updateBattleback();
    };
    Spriteset_Battle.prototype.createBattleField = function () {
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight;
        var x = (Graphics_1.Graphics.width - width) / 2;
        var y = (Graphics_1.Graphics.height - height) / 2;
        this._battleField = new Sprite_1.Sprite();
        this._battleField.setFrame(x, y, width, height);
        this._battleField.x = x;
        this._battleField.y = y;
        this._baseSprite.addChild(this._battleField);
    };
    Spriteset_Battle.prototype.createBattleback = function () {
        var margin = 32;
        var x = -this._battleField.x - margin;
        var y = -this._battleField.y - margin;
        var width = Graphics_1.Graphics.width + margin * 2;
        var height = Graphics_1.Graphics.height + margin * 2;
        this._back1Sprite = new TilingSprite_1.TilingSprite();
        this._back2Sprite = new TilingSprite_1.TilingSprite();
        this._back1Sprite.bitmap = this.battleback1Bitmap();
        this._back2Sprite.bitmap = this.battleback2Bitmap();
        this._back1Sprite.move(x, y, width, height);
        this._back2Sprite.move(x, y, width, height);
        this._battleField.addChild(this._back1Sprite);
        this._battleField.addChild(this._back2Sprite);
    };
    Spriteset_Battle.prototype.updateBattleback = function () {
        if (!this._battlebackLocated) {
            this.locateBattleback();
            this._battlebackLocated = true;
        }
    };
    Spriteset_Battle.prototype.locateBattleback = function () {
        var width = this._battleField.width;
        var height = this._battleField.height;
        var sprite1 = this._back1Sprite;
        var sprite2 = this._back2Sprite;
        sprite1.origin.x = sprite1.x + (sprite1.bitmap.width - width) / 2;
        sprite2.origin.x = sprite1.y + (sprite2.bitmap.width - width) / 2;
        if (globals_1.$gameSystem.isSideView()) {
            sprite1.origin.y = sprite1.x + sprite1.bitmap.height - height;
            sprite2.origin.y = sprite1.y + sprite2.bitmap.height - height;
        }
    };
    Spriteset_Battle.prototype.battleback1Bitmap = function () {
        return ImageManager_1.ImageManager.loadBattleback1(this.battleback1Name());
    };
    Spriteset_Battle.prototype.battleback2Bitmap = function () {
        return ImageManager_1.ImageManager.loadBattleback2(this.battleback2Name());
    };
    Spriteset_Battle.prototype.battleback1Name = function () {
        if (BattleManager_1.BattleManager.isBattleTest()) {
            return globals_1.$dataSystem.battleback1Name;
        }
        else if (globals_1.$gameMap.battleback1Name()) {
            return globals_1.$gameMap.battleback1Name();
        }
        else if (globals_1.$gameMap.isOverworld()) {
            return this.overworldBattleback1Name();
        }
        else {
            return "";
        }
    };
    Spriteset_Battle.prototype.battleback2Name = function () {
        if (BattleManager_1.BattleManager.isBattleTest()) {
            return globals_1.$dataSystem.battleback2Name;
        }
        else if (globals_1.$gameMap.battleback2Name()) {
            return globals_1.$gameMap.battleback2Name();
        }
        else if (globals_1.$gameMap.isOverworld()) {
            return this.overworldBattleback2Name();
        }
        else {
            return "";
        }
    };
    Spriteset_Battle.prototype.overworldBattleback1Name = function () {
        if (globals_1.$gameMap.battleback1Name() === "")
            return "";
        if (globals_1.$gamePlayer.isInVehicle()) {
            return this.shipBattleback1Name();
        }
        else {
            return this.normalBattleback1Name();
        }
    };
    Spriteset_Battle.prototype.overworldBattleback2Name = function () {
        if (globals_1.$gameMap.battleback2Name() === "")
            return "";
        if (globals_1.$gamePlayer.isInVehicle()) {
            return this.shipBattleback2Name();
        }
        else {
            return this.normalBattleback2Name();
        }
    };
    Spriteset_Battle.prototype.normalBattleback1Name = function () {
        return (this.terrainBattleback1Name(this.autotileType(1)) ||
            this.terrainBattleback1Name(this.autotileType(0)) ||
            this.defaultBattleback1Name());
    };
    Spriteset_Battle.prototype.normalBattleback2Name = function () {
        return (this.terrainBattleback2Name(this.autotileType(1)) ||
            this.terrainBattleback2Name(this.autotileType(0)) ||
            this.defaultBattleback2Name());
    };
    Spriteset_Battle.prototype.terrainBattleback1Name = function (type) {
        switch (type) {
            case 24:
            case 25:
                return "Wasteland";
            case 26:
            case 27:
                return "DirtField";
            case 32:
            case 33:
                return "Desert";
            case 34:
                return "Lava1";
            case 35:
                return "Lava2";
            case 40:
            case 41:
                return "Snowfield";
            case 42:
                return "Clouds";
            case 4:
            case 5:
                return "PoisonSwamp";
            default:
                return null;
        }
    };
    Spriteset_Battle.prototype.terrainBattleback2Name = function (type) {
        switch (type) {
            case 20:
            case 21:
                return "Forest";
            case 22:
            case 30:
            case 38:
                return "Cliff";
            case 24:
            case 25:
            case 26:
            case 27:
                return "Wasteland";
            case 32:
            case 33:
                return "Desert";
            case 34:
            case 35:
                return "Lava";
            case 40:
            case 41:
                return "Snowfield";
            case 42:
                return "Clouds";
            case 4:
            case 5:
                return "PoisonSwamp";
        }
    };
    Spriteset_Battle.prototype.defaultBattleback1Name = function () {
        return "Grassland";
    };
    Spriteset_Battle.prototype.defaultBattleback2Name = function () {
        return "Grassland";
    };
    Spriteset_Battle.prototype.shipBattleback1Name = function () {
        return "Ship";
    };
    Spriteset_Battle.prototype.shipBattleback2Name = function () {
        return "Ship";
    };
    Spriteset_Battle.prototype.autotileType = function (z) {
        return globals_1.$gameMap.autotileType(globals_1.$gamePlayer.x, globals_1.$gamePlayer.y, z);
    };
    Spriteset_Battle.prototype.createEnemies = function () {
        var enemies = globals_1.$gameTroop.members();
        var sprites = [];
        for (var i = 0; i < enemies.length; i++) {
            sprites[i] = new SpriteEnemy_1.Sprite_Enemy(enemies[i]);
        }
        sprites.sort(this.compareEnemySprite.bind(this));
        for (var j = 0; j < sprites.length; j++) {
            this._battleField.addChild(sprites[j]);
        }
        this._enemySprites = sprites;
    };
    Spriteset_Battle.prototype.compareEnemySprite = function (a, b) {
        if (a.y !== b.y) {
            return a.y - b.y;
        }
        else {
            return b.spriteId - a.spriteId;
        }
    };
    Spriteset_Battle.prototype.createActors = function () {
        this._actorSprites = [];
        for (var i = 0; i < globals_1.$gameParty.maxBattleMembers(); i++) {
            this._actorSprites[i] = new SpriteActor_1.Sprite_Actor();
            this._battleField.addChild(this._actorSprites[i]);
        }
    };
    Spriteset_Battle.prototype.updateActors = function () {
        var members = globals_1.$gameParty.battleMembers();
        for (var i = 0; i < this._actorSprites.length; i++) {
            this._actorSprites[i].setBattler(members[i]);
        }
    };
    Spriteset_Battle.prototype.battlerSprites = function () {
        // return this._enemySprites.concat(this._actorSprites);
        return new Array().concat(this._enemySprites, this._actorSprites);
    };
    Spriteset_Battle.prototype.isAnimationPlaying = function () {
        return this.battlerSprites().some(function (sprite) {
            return sprite.isAnimationPlaying();
        });
    };
    Spriteset_Battle.prototype.isEffecting = function () {
        return this.battlerSprites().some(function (sprite) {
            return sprite.isEffecting();
        });
    };
    Spriteset_Battle.prototype.isAnyoneMoving = function () {
        return this.battlerSprites().some(function (sprite) {
            return sprite.isMoving();
        });
    };
    Spriteset_Battle.prototype.isBusy = function () {
        return this.isAnimationPlaying() || this.isAnyoneMoving();
    };
    return Spriteset_Battle;
}(SpritesetBase_1.Spriteset_Base));
exports.Spriteset_Battle = Spriteset_Battle;

},{"../core/Graphics":14,"../core/Sprite":21,"../core/TilingSprite":24,"../managers/BattleManager":34,"../managers/ImageManager":37,"../managers/SceneManager":39,"../managers/globals":43,"./SpriteActor":93,"./SpriteEnemy":102,"./SpritesetBase":108}],110:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spriteset_Map = void 0;
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var Tilemap_1 = require("../core/Tilemap");
var TilingSprite_1 = require("../core/TilingSprite");
var Utils_1 = require("../core/Utils");
var Weather_1 = require("../core/Weather");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SpriteCharacter_1 = require("./SpriteCharacter");
var SpriteDestination_1 = require("./SpriteDestination");
var SpritesetBase_1 = require("./SpritesetBase");
var Spriteset_Map = /** @class */ (function (_super) {
    __extends(Spriteset_Map, _super);
    function Spriteset_Map() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Spriteset_Map.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
    };
    Spriteset_Map.prototype.createLowerLayer = function () {
        _super.prototype.createLowerLayer.call(this);
        this.createParallax();
        this.createTilemap();
        this.createCharacters();
        this.createShadow();
        this.createDestination();
        this.createWeather();
    };
    Spriteset_Map.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateTileset();
        this.updateParallax();
        this.updateTilemap();
        this.updateShadow();
        this.updateWeather();
    };
    Spriteset_Map.prototype.hideCharacters = function () {
        for (var i = 0; i < this._characterSprites.length; i++) {
            var sprite = this._characterSprites[i];
            if (!sprite.isTile()) {
                sprite.hide();
            }
        }
    };
    Spriteset_Map.prototype.createParallax = function () {
        this._parallax = new TilingSprite_1.TilingSprite();
        this._parallax.move(0, 0, Graphics_1.Graphics.width, Graphics_1.Graphics.height);
        this._baseSprite.addChild(this._parallax);
    };
    Spriteset_Map.prototype.createTilemap = function () {
        // if (Graphics.isWebGL()) {
        // 	this._tilemap = new ShaderTilemap();
        // } else {
        // 	this._tilemap = new Tilemap();
        // }
        this._tilemap = new Tilemap_1.Tilemap();
        this._tilemap.tileWidth = globals_1.$gameMap.tileWidth();
        this._tilemap.tileHeight = globals_1.$gameMap.tileHeight();
        this._tilemap.setData(globals_1.$gameMap.width(), globals_1.$gameMap.height(), globals_1.$gameMap.data());
        this._tilemap.horizontalWrap = globals_1.$gameMap.isLoopHorizontal();
        this._tilemap.verticalWrap = globals_1.$gameMap.isLoopVertical();
        this.loadTileset();
        this._baseSprite.addChild(this._tilemap);
    };
    Spriteset_Map.prototype.loadTileset = function () {
        this._tileset = globals_1.$gameMap.tileset();
        if (this._tileset) {
            var tilesetNames = this._tileset.tilesetNames;
            for (var i = 0; i < tilesetNames.length; i++) {
                this._tilemap.bitmaps[i] = ImageManager_1.ImageManager.loadTileset(tilesetNames[i]);
            }
            var newTilesetFlags = globals_1.$gameMap.tilesetFlags();
            this._tilemap.refreshTileset();
            if ( /* !this._tilemap.flags.equals(newTilesetFlags)*/!Utils_1.Utils.equals(this._tilemap.flags, newTilesetFlags)) {
                this._tilemap.refresh();
            }
            this._tilemap.flags = newTilesetFlags;
        }
    };
    Spriteset_Map.prototype.createCharacters = function () {
        var _this = this;
        this._characterSprites = [];
        globals_1.$gameMap.events().forEach(function (event) {
            _this._characterSprites.push(new SpriteCharacter_1.Sprite_Character(event));
        });
        globals_1.$gameMap.vehicles().forEach(function (vehicle) {
            _this._characterSprites.push(new SpriteCharacter_1.Sprite_Character(vehicle));
        });
        globals_1.$gamePlayer.followers().reverseEach(function (follower) {
            _this._characterSprites.push(new SpriteCharacter_1.Sprite_Character(follower));
        });
        this._characterSprites.push(new SpriteCharacter_1.Sprite_Character(globals_1.$gamePlayer));
        for (var i = 0; i < this._characterSprites.length; i++) {
            this._tilemap.addChild(this._characterSprites[i]);
        }
    };
    Spriteset_Map.prototype.createShadow = function () {
        this._shadowSprite = new Sprite_1.Sprite();
        this._shadowSprite.bitmap = ImageManager_1.ImageManager.loadSystem("Shadow1");
        this._shadowSprite.anchor.x = 0.5;
        this._shadowSprite.anchor.y = 1;
        this._shadowSprite.z = 6;
        this._tilemap.addChild(this._shadowSprite);
    };
    Spriteset_Map.prototype.createDestination = function () {
        this._destinationSprite = new SpriteDestination_1.Sprite_Destination();
        this._destinationSprite.z = 9;
        this._tilemap.addChild(this._destinationSprite);
    };
    Spriteset_Map.prototype.createWeather = function () {
        this._weather = new Weather_1.Weather();
        this.addChild(this._weather);
    };
    Spriteset_Map.prototype.updateTileset = function () {
        if (this._tileset !== globals_1.$gameMap.tileset()) {
            this.loadTileset();
        }
    };
    /*
     * Simple fix for canvas parallax issue, destroy old parallax and readd to  the tree.
     */
    Spriteset_Map.prototype._canvasReAddParallax = function () {
        var index = this._baseSprite.children.indexOf(this._parallax);
        this._baseSprite.removeChild(this._parallax);
        this._parallax = new TilingSprite_1.TilingSprite();
        this._parallax.move(0, 0, Graphics_1.Graphics.width, Graphics_1.Graphics.height);
        this._parallax.bitmap = ImageManager_1.ImageManager.loadParallax(this._parallaxName);
        this._baseSprite.addChildAt(this._parallax, index);
    };
    Spriteset_Map.prototype.updateParallax = function () {
        if (this._parallaxName !== globals_1.$gameMap.parallaxName()) {
            this._parallaxName = globals_1.$gameMap.parallaxName();
            if (this._parallax.bitmap && /* Graphics.isWebGL() != true*/ !Graphics_1.Graphics.isWebGL()) {
                this._canvasReAddParallax();
            }
            else {
                this._parallax.bitmap = ImageManager_1.ImageManager.loadParallax(this._parallaxName);
            }
        }
        if (this._parallax.bitmap) {
            this._parallax.origin.x = globals_1.$gameMap.parallaxOx();
            this._parallax.origin.y = globals_1.$gameMap.parallaxOy();
        }
    };
    Spriteset_Map.prototype.updateTilemap = function () {
        this._tilemap.origin.x = globals_1.$gameMap.displayX() * globals_1.$gameMap.tileWidth();
        this._tilemap.origin.y = globals_1.$gameMap.displayY() * globals_1.$gameMap.tileHeight();
    };
    Spriteset_Map.prototype.updateShadow = function () {
        var airship = globals_1.$gameMap.airship();
        this._shadowSprite.x = airship.shadowX();
        this._shadowSprite.y = airship.shadowY();
        this._shadowSprite.opacity = airship.shadowOpacity();
    };
    Spriteset_Map.prototype.updateWeather = function () {
        this._weather.type = globals_1.$gameScreen.weatherType();
        this._weather.power = globals_1.$gameScreen.weatherPower();
        this._weather.origin.x = globals_1.$gameMap.displayX() * globals_1.$gameMap.tileWidth();
        this._weather.origin.y = globals_1.$gameMap.displayY() * globals_1.$gameMap.tileHeight();
    };
    return Spriteset_Map;
}(SpritesetBase_1.Spriteset_Base));
exports.Spriteset_Map = Spriteset_Map;

},{"../core/Graphics":14,"../core/Sprite":21,"../core/Tilemap":23,"../core/TilingSprite":24,"../core/Utils":28,"../core/Weather":29,"../managers/ImageManager":37,"../managers/globals":43,"./SpriteCharacter":99,"./SpriteDestination":101,"./SpritesetBase":108}],111:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ActorCommand = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_ActorCommand = /** @class */ (function (_super) {
    __extends(Window_ActorCommand, _super);
    function Window_ActorCommand() {
        return _super.call(this) || this;
    }
    Window_ActorCommand.prototype.initialize = function () {
        var y = Graphics_1.Graphics.boxHeight - this.windowHeight();
        _super.prototype.initialize.call(this, 0, y);
        this.openness = 0;
        this.deactivate();
        this._actor = null;
    };
    Window_ActorCommand.prototype.windowWidth = function () {
        return 192;
    };
    Window_ActorCommand.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_ActorCommand.prototype.makeCommandList = function () {
        if (this._actor) {
            this.addAttackCommand();
            this.addSkillCommands();
            this.addGuardCommand();
            this.addItemCommand();
        }
    };
    Window_ActorCommand.prototype.addAttackCommand = function () {
        this.addCommand(TextManager_1.TextManager.attack, "attack", this._actor.canAttack());
    };
    Window_ActorCommand.prototype.addSkillCommands = function () {
        var _this = this;
        var skillTypes = this._actor.addedSkillTypes();
        skillTypes.sort(function (a, b) {
            return a - b;
        });
        skillTypes.forEach(function (stypeId) {
            var name = globals_1.$dataSystem.skillTypes[stypeId];
            _this.addCommand(name, "skill", true, stypeId);
        });
    };
    Window_ActorCommand.prototype.addGuardCommand = function () {
        this.addCommand(TextManager_1.TextManager.guard, "guard", this._actor.canGuard());
    };
    Window_ActorCommand.prototype.addItemCommand = function () {
        this.addCommand(TextManager_1.TextManager.item, "item");
    };
    Window_ActorCommand.prototype.setup = function (actor) {
        this._actor = actor;
        this.clearCommandList();
        this.makeCommandList();
        this.refresh();
        this.selectLast();
        this.activate();
        this.open();
    };
    Window_ActorCommand.prototype.processOk = function () {
        if (this._actor) {
            // TODO: impl
            // if (ConfigManager.commandRemember) {
            // 	this._actor.setLastCommandSymbol(this.currentSymbol());
            // } else {
            // 	this._actor.setLastCommandSymbol("");
            // }
            // とりあえず設定を見ずにこの処理に回す
            this._actor.setLastCommandSymbol("");
        }
        WindowCommand_1.Window_Command.prototype.processOk.call(this);
    };
    Window_ActorCommand.prototype.selectLast = function () {
        this.select(0);
        // TODO: impl
        // if (this._actor && ConfigManager.commandRemember) {
        // 	const symbol = this._actor.lastCommandSymbol();
        // 	this.selectSymbol(symbol);
        // 	if (symbol === "skill") {
        // 		const skill = this._actor.lastBattleSkill();
        // 		if (skill) {
        // 			this.selectExt(skill.stypeId);
        // 		}
        // 	}
        // }
    };
    return Window_ActorCommand;
}(WindowCommand_1.Window_Command));
exports.Window_ActorCommand = Window_ActorCommand;

},{"../core/Graphics":14,"../managers/TextManager":42,"../managers/globals":43,"./WindowCommand":120}],112:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Base = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Sprite_1 = require("../core/Sprite");
var Window_1 = require("../core/Window");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var TextManager_1 = require("../managers/TextManager");
// Window.pngから色情報を取得するために毎回ImageDataを使い捨てるのが無駄なので、これらの変数で色情報をキャッシュする
var textColorMap = {};
var pendingColor;
var Window_Base = /** @class */ (function (_super) {
    __extends(Window_Base, _super);
    function Window_Base() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Window_Base.prototype) {
        // 	this.initialize(this.x, this.y, this.width, this.height);
        // }
    }
    Window_Base.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // 派生クラスの initialize() のシグネチャがまちまちのため
        var x = args[0];
        var y = args[1];
        var width = args[2];
        var height = args[3];
        _super.prototype.initialize.call(this);
        this.loadWindowskin();
        this.move(x, y, width, height);
        this.updatePadding();
        this.updateBackOpacity();
        this.updateTone();
        this.createContents();
        this._opening = false;
        this._closing = false;
        this._dimmerSprite = null;
    };
    Window_Base.prototype.lineHeight = function () {
        return 36;
    };
    Window_Base.prototype.standardFontFace = function () {
        if (globals_1.$gameSystem.isChinese()) {
            return "SimHei, Heiti TC, sans-serif";
        }
        else if (globals_1.$gameSystem.isKorean()) {
            return "Dotum, AppleGothic, sans-serif";
        }
        else {
            return "GameFont";
        }
    };
    Window_Base.prototype.standardFontSize = function () {
        return 28;
    };
    Window_Base.prototype.standardPadding = function () {
        return 18;
    };
    Window_Base.prototype.textPadding = function () {
        return 6;
    };
    Window_Base.prototype.standardBackOpacity = function () {
        return 192;
    };
    Window_Base.prototype.loadWindowskin = function () {
        this.windowskin = ImageManager_1.ImageManager.loadSystem("Window");
    };
    Window_Base.prototype.updatePadding = function () {
        this.padding = this.standardPadding();
    };
    Window_Base.prototype.updateBackOpacity = function () {
        this.backOpacity = this.standardBackOpacity();
    };
    Window_Base.prototype.contentsWidth = function () {
        return this.width - this.standardPadding() * 2;
    };
    Window_Base.prototype.contentsHeight = function () {
        return this.height - this.standardPadding() * 2;
    };
    Window_Base.prototype.fittingHeight = function (numLines) {
        return numLines * this.lineHeight() + this.standardPadding() * 2;
    };
    Window_Base.prototype.updateTone = function () {
        var tone = globals_1.$gameSystem.windowTone();
        this.setTone(tone[0], tone[1], tone[2]);
    };
    Window_Base.prototype.createContents = function () {
        this.contents = new Bitmap_1.Bitmap(this.contentsWidth(), this.contentsHeight());
        this.resetFontSettings();
    };
    Window_Base.prototype.resetFontSettings = function () {
        this.contents.fontFace = this.standardFontFace();
        this.contents.fontSize = this.standardFontSize();
        this.resetTextColor();
    };
    Window_Base.prototype.resetTextColor = function () {
        this.changeTextColor(this.normalColor());
    };
    Window_Base.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updateTone();
        this.updateOpen();
        this.updateClose();
        this.updateBackgroundDimmer();
    };
    Window_Base.prototype.updateOpen = function () {
        if (this._opening) {
            this.openness += 32;
            if (this.isOpen()) {
                this._opening = false;
            }
        }
    };
    Window_Base.prototype.updateClose = function () {
        if (this._closing) {
            this.openness -= 32;
            if (this.isClosed()) {
                this._closing = false;
            }
        }
    };
    Window_Base.prototype.open = function () {
        if (!this.isOpen()) {
            this._opening = true;
        }
        this._closing = false;
    };
    Window_Base.prototype.close = function () {
        if (!this.isClosed()) {
            this._closing = true;
        }
        this._opening = false;
    };
    Window_Base.prototype.isOpening = function () {
        return this._opening;
    };
    Window_Base.prototype.isClosing = function () {
        return this._closing;
    };
    Window_Base.prototype.show = function () {
        this.visible = true;
    };
    Window_Base.prototype.hide = function () {
        this.visible = false;
    };
    Window_Base.prototype.activate = function () {
        this.active = true;
    };
    Window_Base.prototype.deactivate = function () {
        this.active = false;
    };
    Window_Base.prototype.textColor = function (n) {
        if (!textColorMap[n]) {
            var px = 96 + (n % 8) * 12 + 6;
            var py = 144 + Math.floor(n / 8) * 12 + 6;
            textColorMap[n] = this.windowskin.getPixel(px, py);
        }
        return textColorMap[n];
    };
    Window_Base.prototype.normalColor = function () {
        return this.textColor(0);
    };
    Window_Base.prototype.systemColor = function () {
        return this.textColor(16);
    };
    Window_Base.prototype.crisisColor = function () {
        return this.textColor(17);
    };
    Window_Base.prototype.deathColor = function () {
        return this.textColor(18);
    };
    Window_Base.prototype.gaugeBackColor = function () {
        return this.textColor(19);
    };
    Window_Base.prototype.hpGaugeColor1 = function () {
        return this.textColor(20);
    };
    Window_Base.prototype.hpGaugeColor2 = function () {
        return this.textColor(21);
    };
    Window_Base.prototype.mpGaugeColor1 = function () {
        return this.textColor(22);
    };
    Window_Base.prototype.mpGaugeColor2 = function () {
        return this.textColor(23);
    };
    Window_Base.prototype.mpCostColor = function () {
        return this.textColor(23);
    };
    Window_Base.prototype.powerUpColor = function () {
        return this.textColor(24);
    };
    Window_Base.prototype.powerDownColor = function () {
        return this.textColor(25);
    };
    Window_Base.prototype.tpGaugeColor1 = function () {
        return this.textColor(28);
    };
    Window_Base.prototype.tpGaugeColor2 = function () {
        return this.textColor(29);
    };
    Window_Base.prototype.tpCostColor = function () {
        return this.textColor(29);
    };
    Window_Base.prototype.pendingColor = function () {
        if (!pendingColor) {
            pendingColor = this.windowskin.getPixel(120, 120);
        }
        return pendingColor;
    };
    Window_Base.prototype.translucentOpacity = function () {
        return 160;
    };
    Window_Base.prototype.changeTextColor = function (color) {
        this.contents.textColor = color;
    };
    Window_Base.prototype.changePaintOpacity = function (enabled) {
        this.contents.paintOpacity = enabled ? 255 : this.translucentOpacity();
    };
    Window_Base.prototype.drawText = function (text, x, y, maxWidth, align) {
        this.contents.drawText(text, x, y, maxWidth, this.lineHeight(), align);
    };
    Window_Base.prototype.textWidth = function (text) {
        return this.contents.measureTextWidth(text);
    };
    // NOTE: なぜかWindow_BattleLogだけが第４引数を与えていた
    Window_Base.prototype.drawTextEx = function (text, x, y, _width) {
        if (text) {
            var textState = { index: 0, x: x, y: y, left: x, text: "", height: 0 };
            textState.text = this.convertEscapeCharacters(text);
            textState.height = this.calcTextHeight(textState, false);
            this.resetFontSettings();
            while (textState.index < textState.text.length) {
                this.processCharacter(textState);
            }
            return textState.x - x;
        }
        else {
            return 0;
        }
    };
    Window_Base.prototype.convertEscapeCharacters = function (text) {
        var _this = this;
        text = text.replace(/\\/g, "\x1b");
        text = text.replace(/\x1b\x1b/g, "\\");
        text = text.replace(/\x1bV\[(\d+)\]/gi, function (_match, p1) {
            return globals_1.$gameVariables.value(parseInt(p1, 10)) + "";
        });
        text = text.replace(/\x1bV\[(\d+)\]/gi, function (_match, p1) {
            return globals_1.$gameVariables.value(parseInt(p1, 10)) + "";
        });
        text = text.replace(/\x1bN\[(\d+)\]/gi, function (_match, p1) {
            return _this.actorName(parseInt(p1, 10));
        });
        text = text.replace(/\x1bP\[(\d+)\]/gi, function (_match, p1) {
            return _this.partyMemberName(parseInt(p1, 10));
        });
        text = text.replace(/\x1bG/gi, TextManager_1.TextManager.currencyUnit);
        return text;
    };
    Window_Base.prototype.actorName = function (n) {
        var actor = n >= 1 ? globals_1.$gameActors.actor(n) : null;
        return actor ? actor.name() : "";
    };
    Window_Base.prototype.partyMemberName = function (n) {
        var actor = n >= 1 ? globals_1.$gameParty.members()[n - 1] : null;
        return actor ? actor.name() : "";
    };
    Window_Base.prototype.processCharacter = function (textState) {
        switch (textState.text[textState.index]) {
            case "\n":
                this.processNewLine(textState);
                break;
            case "\f":
                this.processNewPage(textState);
                break;
            case "\x1b":
                this.processEscapeCharacter(this.obtainEscapeCode(textState), textState);
                break;
            default:
                this.processNormalCharacter(textState);
                break;
        }
    };
    Window_Base.prototype.processNormalCharacter = function (textState) {
        var c = textState.text[textState.index++];
        var w = this.textWidth(c);
        this.contents.drawText(c, textState.x, textState.y, w * 2, textState.height);
        textState.x += w;
    };
    Window_Base.prototype.processNewLine = function (textState) {
        textState.x = textState.left;
        textState.y += textState.height;
        textState.height = this.calcTextHeight(textState, false);
        textState.index++;
    };
    Window_Base.prototype.processNewPage = function (textState) {
        textState.index++;
    };
    Window_Base.prototype.obtainEscapeCode = function (textState) {
        textState.index++;
        var regExp = /^[\$\.\|\^!><\{\}\\]|^[A-Z]+/i;
        var arr = regExp.exec(textState.text.slice(textState.index));
        if (arr) {
            textState.index += arr[0].length;
            return arr[0].toUpperCase();
        }
        else {
            return "";
        }
    };
    Window_Base.prototype.obtainEscapeParam = function (textState) {
        var arr = /^\[\d+\]/.exec(textState.text.slice(textState.index));
        if (arr) {
            textState.index += arr[0].length;
            return parseInt(arr[0].slice(1), 10);
        }
        else {
            return /* ""*/ 0; // 空文字列はコンテキストによってはゼロ扱いになる
        }
    };
    Window_Base.prototype.processEscapeCharacter = function (code, textState) {
        switch (code) {
            case "C":
                this.changeTextColor(this.textColor(this.obtainEscapeParam(textState)));
                break;
            case "I":
                this.processDrawIcon(this.obtainEscapeParam(textState), textState);
                break;
            case "{":
                this.makeFontBigger();
                break;
            case "}":
                this.makeFontSmaller();
                break;
        }
    };
    Window_Base.prototype.processDrawIcon = function (iconIndex, textState) {
        this.drawIcon(iconIndex, textState.x + 2, textState.y + 2);
        textState.x += Window_Base._iconWidth + 4;
    };
    Window_Base.prototype.makeFontBigger = function () {
        if (this.contents.fontSize <= 96) {
            this.contents.fontSize += 12;
        }
    };
    Window_Base.prototype.makeFontSmaller = function () {
        if (this.contents.fontSize >= 24) {
            this.contents.fontSize -= 12;
        }
    };
    Window_Base.prototype.calcTextHeight = function (textState, all) {
        var lastFontSize = this.contents.fontSize;
        var textHeight = 0;
        var lines = textState.text.slice(textState.index).split("\n");
        var maxLines = all ? lines.length : 1;
        for (var i = 0; i < maxLines; i++) {
            var maxFontSize = this.contents.fontSize;
            var regExp = /\x1b[\{\}]/g;
            for (;;) {
                var array = regExp.exec(lines[i]);
                if (array) {
                    if (array[0] === "\x1b{") {
                        this.makeFontBigger();
                    }
                    if (array[0] === "\x1b}") {
                        this.makeFontSmaller();
                    }
                    if (maxFontSize < this.contents.fontSize) {
                        maxFontSize = this.contents.fontSize;
                    }
                }
                else {
                    break;
                }
            }
            textHeight += maxFontSize + 8;
        }
        this.contents.fontSize = lastFontSize;
        return textHeight;
    };
    Window_Base.prototype.drawIcon = function (iconIndex, x, y) {
        // TODO: もしかするとシーン構築で予めロードする必要があるかも
        var bitmap = ImageManager_1.ImageManager.loadSystem("IconSet");
        var pw = Window_Base._iconWidth;
        var ph = Window_Base._iconHeight;
        var sx = (iconIndex % 16) * pw;
        var sy = Math.floor(iconIndex / 16) * ph;
        this.contents.blt(bitmap, sx, sy, pw, ph, x, y);
    };
    Window_Base.prototype.drawFace = function (faceName, faceIndex, x, y, width, height) {
        width = width || Window_Base._faceWidth;
        height = height || Window_Base._faceHeight;
        var bitmap = ImageManager_1.ImageManager.loadFace(faceName); // このあとで `blt` してるので、読み込み済みでなければならないはず。
        var pw = Window_Base._faceWidth;
        var ph = Window_Base._faceHeight;
        var sw = Math.min(width, pw);
        var sh = Math.min(height, ph);
        var dx = Math.floor(x + Math.max(width - pw, 0) / 2);
        var dy = Math.floor(y + Math.max(height - ph, 0) / 2);
        var sx = (faceIndex % 4) * pw + (pw - sw) / 2;
        var sy = Math.floor(faceIndex / 4) * ph + (ph - sh) / 2;
        this.contents.blt(bitmap, sx, sy, sw, sh, dx, dy);
    };
    Window_Base.prototype.drawCharacter = function (characterName, characterIndex, x, y) {
        var bitmap = ImageManager_1.ImageManager.loadCharacter(characterName);
        var big = ImageManager_1.ImageManager.isBigCharacter(characterName);
        var pw = bitmap.width / (big ? 3 : 12);
        var ph = bitmap.height / (big ? 4 : 8);
        var n = characterIndex;
        var sx = ((n % 4) * 3 + 1) * pw;
        var sy = Math.floor(n / 4) * 4 * ph;
        this.contents.blt(bitmap, sx, sy, pw, ph, x - pw / 2, y - ph);
    };
    Window_Base.prototype.drawGauge = function (x, y, width, rate, color1, color2) {
        var fillW = Math.floor(width * rate);
        var gaugeY = y + this.lineHeight() - 8;
        this.contents.fillRect(x, gaugeY, width, 6, this.gaugeBackColor());
        this.contents.gradientFillRect(x, gaugeY, fillW, 6, color1, color2);
    };
    Window_Base.prototype.hpColor = function (actor) {
        if (actor.isDead()) {
            return this.deathColor();
        }
        else if (actor.isDying()) {
            return this.crisisColor();
        }
        else {
            return this.normalColor();
        }
    };
    Window_Base.prototype.mpColor = function (_actor) {
        return this.normalColor();
    };
    Window_Base.prototype.tpColor = function (_actor) {
        return this.normalColor();
    };
    Window_Base.prototype.drawActorCharacter = function (actor, x, y) {
        this.drawCharacter(actor.characterName(), actor.characterIndex(), x, y);
    };
    Window_Base.prototype.drawActorFace = function (actor, x, y, width, height) {
        this.drawFace(actor.faceName(), actor.faceIndex(), x, y, width, height);
    };
    Window_Base.prototype.drawActorName = function (actor, x, y, width) {
        width = width || 168;
        this.changeTextColor(this.hpColor(actor));
        this.drawText(actor.name(), x, y, width);
    };
    Window_Base.prototype.drawActorClass = function (actor, x, y, width) {
        width = width || 168;
        this.resetTextColor();
        this.drawText(actor.currentClass().name, x, y, width);
    };
    Window_Base.prototype.drawActorNickname = function (actor, x, y, width) {
        width = width || 270;
        this.resetTextColor();
        this.drawText(actor.nickname(), x, y, width);
    };
    Window_Base.prototype.drawActorLevel = function (actor, x, y) {
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.levelA, x, y, 48);
        this.resetTextColor();
        this.drawText(actor.level + "", x + 84, y, 36, "right");
    };
    Window_Base.prototype.drawActorIcons = function (actor, x, y, width) {
        width = width || 144;
        var icons = actor.allIcons().slice(0, Math.floor(width / Window_Base._iconWidth));
        for (var i = 0; i < icons.length; i++) {
            this.drawIcon(icons[i], x + Window_Base._iconWidth * i, y + 2);
        }
    };
    Window_Base.prototype.drawCurrentAndMax = function (current, max, x, y, width, color1, color2) {
        var labelWidth = this.textWidth("HP");
        var valueWidth = this.textWidth("0000");
        var slashWidth = this.textWidth("/");
        var x1 = x + width - valueWidth;
        var x2 = x1 - slashWidth;
        var x3 = x2 - valueWidth;
        if (x3 >= x + labelWidth) {
            this.changeTextColor(color1);
            this.drawText(current, x3, y, valueWidth, "right");
            this.changeTextColor(color2);
            this.drawText("/", x2, y, slashWidth, "right");
            this.drawText(max, x1, y, valueWidth, "right");
        }
        else {
            this.changeTextColor(color1);
            this.drawText(current, x1, y, valueWidth, "right");
        }
    };
    Window_Base.prototype.drawActorHp = function (actor, x, y, width) {
        width = width || 186;
        var color1 = this.hpGaugeColor1();
        var color2 = this.hpGaugeColor2();
        this.drawGauge(x, y, width, actor.hpRate(), color1, color2);
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.hpA, x, y, 44);
        this.drawCurrentAndMax(actor.hp + "", actor.mhp, x, y, width, this.hpColor(actor), this.normalColor());
    };
    Window_Base.prototype.drawActorMp = function (actor, x, y, width) {
        width = width || 186;
        var color1 = this.mpGaugeColor1();
        var color2 = this.mpGaugeColor2();
        this.drawGauge(x, y, width, actor.mpRate(), color1, color2);
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.mpA, x, y, 44);
        this.drawCurrentAndMax(actor.mp, actor.mmp, x, y, width, this.mpColor(actor), this.normalColor());
    };
    Window_Base.prototype.drawActorTp = function (actor, x, y, width) {
        width = width || 96;
        var color1 = this.tpGaugeColor1();
        var color2 = this.tpGaugeColor2();
        this.drawGauge(x, y, width, actor.tpRate(), color1, color2);
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.tpA, x, y, 44);
        this.changeTextColor(this.tpColor(actor));
        this.drawText(actor.tp, x + width - 64, y, 64, "right");
    };
    Window_Base.prototype.drawActorSimpleStatus = function (actor, x, y, width) {
        var lineHeight = this.lineHeight();
        var x2 = x + 180;
        var width2 = Math.min(200, width - 180 - this.textPadding());
        this.drawActorName(actor, x, y);
        this.drawActorLevel(actor, x, y + lineHeight * 1);
        this.drawActorIcons(actor, x, y + lineHeight * 2);
        this.drawActorClass(actor, x2, y);
        this.drawActorHp(actor, x2, y + lineHeight * 1, width2);
        this.drawActorMp(actor, x2, y + lineHeight * 2, width2);
    };
    Window_Base.prototype.drawItemName = function (item, x, y, width) {
        width = width || 312;
        if (item) {
            var iconBoxWidth = Window_Base._iconWidth + 4;
            this.resetTextColor();
            this.drawIcon(item.iconIndex, x + 2, y + 2);
            this.drawText(item.name, x + iconBoxWidth, y, width - iconBoxWidth);
        }
    };
    Window_Base.prototype.drawCurrencyValue = function (value, unit, x, y, width) {
        var unitWidth = Math.min(80, this.textWidth(unit));
        this.resetTextColor();
        this.drawText(value, x, y, width - unitWidth - 6, "right");
        this.changeTextColor(this.systemColor());
        this.drawText(unit, x + width - unitWidth, y, unitWidth, "right");
    };
    Window_Base.prototype.paramchangeTextColor = function (change) {
        if (change > 0) {
            return this.powerUpColor();
        }
        else if (change < 0) {
            return this.powerDownColor();
        }
        else {
            return this.normalColor();
        }
    };
    Window_Base.prototype.setBackgroundType = function (type) {
        if (type === 0) {
            this.opacity = 255;
        }
        else {
            this.opacity = 0;
        }
        if (type === 1) {
            this.showBackgroundDimmer();
        }
        else {
            this.hideBackgroundDimmer();
        }
    };
    Window_Base.prototype.showBackgroundDimmer = function () {
        if (!this._dimmerSprite) {
            this._dimmerSprite = new Sprite_1.Sprite(new Bitmap_1.Bitmap(0, 0));
            // this._dimmerSprite.bitmap = new Bitmap(0, 0);
            this.addChildToBack(this._dimmerSprite);
        }
        var bitmap = this._dimmerSprite.bitmap;
        if (bitmap.width !== this.width || bitmap.height !== this.height) {
            this.refreshDimmerBitmap();
        }
        this._dimmerSprite.visible = true;
        this.updateBackgroundDimmer();
    };
    Window_Base.prototype.hideBackgroundDimmer = function () {
        if (this._dimmerSprite) {
            this._dimmerSprite.visible = false;
        }
    };
    Window_Base.prototype.updateBackgroundDimmer = function () {
        if (this._dimmerSprite) {
            this._dimmerSprite.opacity = this.openness;
        }
    };
    Window_Base.prototype.refreshDimmerBitmap = function () {
        if (this._dimmerSprite) {
            var bitmap = this._dimmerSprite.bitmap;
            var w = this.width;
            var h = this.height;
            var m = this.padding;
            var c1 = this.dimColor1();
            var c2 = this.dimColor2();
            bitmap.resize(w, h);
            bitmap.gradientFillRect(0, 0, w, m, c2, c1, true);
            bitmap.fillRect(0, m, w, h - m * 2, c1);
            bitmap.gradientFillRect(0, h - m, w, m, c1, c2, true);
            this._dimmerSprite.setFrame(0, 0, w, h);
        }
    };
    Window_Base.prototype.dimColor1 = function () {
        return "rgba(0, 0, 0, 0.6)";
    };
    Window_Base.prototype.dimColor2 = function () {
        return "rgba(0, 0, 0, 0)";
    };
    Window_Base.prototype.canvasToLocalX = function (x) {
        var node = this;
        while (node && typeof node.x === "number") {
            // g.Scene に到達すると x が存在しない
            x -= node.x;
            node = node.parent;
        }
        return x;
    };
    Window_Base.prototype.canvasToLocalY = function (y) {
        var node = this;
        while (node && typeof node.y === "number") {
            // g.Scene に到達すると y が存在しない
            y -= node.y;
            node = node.parent;
        }
        return y;
    };
    Window_Base.prototype.reserveFaceImages = function () {
        globals_1.$gameParty.members().forEach(function (actor) {
            ImageManager_1.ImageManager.reserveFace(actor.faceName());
        });
    };
    Window_Base._iconWidth = 32;
    Window_Base._iconHeight = 32;
    Window_Base._faceWidth = 144;
    Window_Base._faceHeight = 144;
    return Window_Base;
}(Window_1.Window));
exports.Window_Base = Window_Base;

},{"../core/Bitmap":13,"../core/Sprite":21,"../core/Window":30,"../managers/ImageManager":37,"../managers/TextManager":42,"../managers/globals":43}],113:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleActor = void 0;
var globals_1 = require("../managers/globals");
var WindowBattleStatus_1 = require("./WindowBattleStatus");
var Window_BattleActor = /** @class */ (function (_super) {
    __extends(Window_BattleActor, _super);
    function Window_BattleActor(x, y) {
        return _super.call(this, x, y) || this;
    }
    Window_BattleActor.prototype.initialize = function (x, y) {
        _super.prototype.initialize.call(this);
        this.x = x;
        this.y = y;
        this.openness = 255;
        this.hide();
    };
    Window_BattleActor.prototype.show = function () {
        this.select(0);
        _super.prototype.show.call(this);
    };
    Window_BattleActor.prototype.hide = function () {
        _super.prototype.hide.call(this);
        globals_1.$gameParty.select(null);
    };
    Window_BattleActor.prototype.select = function (index) {
        _super.prototype.select.call(this, index);
        globals_1.$gameParty.select(this.actor());
    };
    Window_BattleActor.prototype.actor = function () {
        return globals_1.$gameParty.members()[this.index()];
    };
    return Window_BattleActor;
}(WindowBattleStatus_1.Window_BattleStatus));
exports.Window_BattleActor = Window_BattleActor;

},{"../managers/globals":43,"./WindowBattleStatus":118}],114:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleEnemy = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_BattleEnemy = /** @class */ (function (_super) {
    __extends(Window_BattleEnemy, _super);
    function Window_BattleEnemy(x, y) {
        return _super.call(this, x, y) || this;
    }
    Window_BattleEnemy.prototype.initialize = function (x, y) {
        this._enemies = [];
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, x, y, width, height);
        this.refresh();
        this.hide();
    };
    Window_BattleEnemy.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth - 192;
    };
    Window_BattleEnemy.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_BattleEnemy.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_BattleEnemy.prototype.maxCols = function () {
        return 2;
    };
    Window_BattleEnemy.prototype.maxItems = function () {
        return this._enemies.length;
    };
    Window_BattleEnemy.prototype.enemy = function () {
        return this._enemies[this.index()];
    };
    Window_BattleEnemy.prototype.enemyIndex = function () {
        var enemy = this.enemy();
        return enemy ? enemy.index() : -1;
    };
    Window_BattleEnemy.prototype.drawItem = function (index) {
        this.resetTextColor();
        var name = this._enemies[index].name();
        var rect = this.itemRectForText(index);
        this.drawText(name, rect.x, rect.y, rect.width);
    };
    Window_BattleEnemy.prototype.show = function () {
        this.refresh();
        this.select(0);
        _super.prototype.show.call(this);
    };
    Window_BattleEnemy.prototype.hide = function () {
        _super.prototype.hide.call(this);
        globals_1.$gameTroop.select(null);
    };
    Window_BattleEnemy.prototype.refresh = function () {
        this._enemies = globals_1.$gameTroop.aliveMembers();
        _super.prototype.refresh.call(this);
    };
    Window_BattleEnemy.prototype.select = function (index) {
        _super.prototype.select.call(this, index);
        globals_1.$gameTroop.select(this.enemy());
    };
    return Window_BattleEnemy;
}(WindowSelectable_1.Window_Selectable));
exports.Window_BattleEnemy = Window_BattleEnemy;

},{"../core/Graphics":14,"../managers/globals":43,"./WindowSelectable":142}],115:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleItem = void 0;
var globals_1 = require("../managers/globals");
var WindowItemList_1 = require("./WindowItemList");
var Window_BattleItem = /** @class */ (function (_super) {
    __extends(Window_BattleItem, _super);
    function Window_BattleItem(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_BattleItem.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this.hide();
    };
    Window_BattleItem.prototype.includes = function (item) {
        return globals_1.$gameParty.canUse(item);
    };
    Window_BattleItem.prototype.show = function () {
        this.selectLast();
        this.showHelpWindow();
        _super.prototype.show.call(this);
    };
    Window_BattleItem.prototype.hide = function () {
        this.hideHelpWindow();
        _super.prototype.hide.call(this);
    };
    return Window_BattleItem;
}(WindowItemList_1.Window_ItemList));
exports.Window_BattleItem = Window_BattleItem;

},{"../managers/globals":43,"./WindowItemList":131}],116:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleLog = void 0;
var Bitmap_1 = require("../core/Bitmap");
var Graphics_1 = require("../core/Graphics");
var Sprite_1 = require("../core/Sprite");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_BattleLog = /** @class */ (function (_super) {
    __extends(Window_BattleLog, _super);
    function Window_BattleLog() {
        return _super.call(this) || this;
    }
    Window_BattleLog.prototype.initialize = function () {
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, 0, 0, width, height);
        // このプロパティは Window 自身でなく Window._windowSpriteContainer を操作する（子要素）。
        // ウィンドウ枠を非表示にし、黒帯をつけた文字列だけを表示する意図でそのようにしている。
        this.opacity = 0;
        this._lines = [];
        this._methods = [];
        this._waitCount = 0;
        this._waitMode = "";
        this._baseLineStack = [];
        this._spriteset = null;
        this.createBackBitmap();
        this.createBackSprite();
        this.refresh();
    };
    Window_BattleLog.prototype.setSpriteset = function (spriteset) {
        this._spriteset = spriteset;
    };
    Window_BattleLog.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth;
    };
    Window_BattleLog.prototype.windowHeight = function () {
        return this.fittingHeight(this.maxLines());
    };
    Window_BattleLog.prototype.maxLines = function () {
        return 10;
    };
    Window_BattleLog.prototype.createBackBitmap = function () {
        this._backBitmap = new Bitmap_1.Bitmap(this.width, this.height);
    };
    Window_BattleLog.prototype.createBackSprite = function () {
        this._backSprite = new Sprite_1.Sprite();
        this._backSprite.bitmap = this._backBitmap;
        this._backSprite.y = this.y;
        this.addChildToBack(this._backSprite);
    };
    Window_BattleLog.prototype.numLines = function () {
        return this._lines.length;
    };
    Window_BattleLog.prototype.messageSpeed = function () {
        return 16;
    };
    Window_BattleLog.prototype.isBusy = function () {
        return this._waitCount > 0 || this._waitMode || this._methods.length > 0;
    };
    Window_BattleLog.prototype.update = function () {
        if (!this.updateWait()) {
            this.callNextMethod();
        }
    };
    Window_BattleLog.prototype.updateWait = function () {
        return this.updateWaitCount() || this.updateWaitMode();
    };
    Window_BattleLog.prototype.updateWaitCount = function () {
        if (this._waitCount > 0) {
            this._waitCount -= this.isFastForward() ? 3 : 1;
            if (this._waitCount < 0) {
                this._waitCount = 0;
            }
            return true;
        }
        return false;
    };
    Window_BattleLog.prototype.updateWaitMode = function () {
        var waiting = false;
        switch (this._waitMode) {
            case "effect":
                waiting = this._spriteset.isEffecting();
                break;
            case "movement":
                waiting = this._spriteset.isAnyoneMoving();
                break;
        }
        if (!waiting) {
            this._waitMode = "";
        }
        return waiting;
    };
    Window_BattleLog.prototype.setWaitMode = function (waitMode) {
        this._waitMode = waitMode;
    };
    Window_BattleLog.prototype.callNextMethod = function () {
        if (this._methods.length > 0) {
            var method = this._methods.shift();
            if (method.name && this[method.name]) {
                this[method.name].apply(this, method.params);
            }
            else {
                throw new Error("Method not found: " + method.name);
            }
        }
    };
    Window_BattleLog.prototype.isFastForward = function () {
        return (
        /* Input.isLongPressed("ok") || Input.isPressed("shift") ||*/
        TouchInput_1.TouchInput.isLongPressed());
    };
    // push(methodName: string) {
    // 	const methodArgs = Array.prototype.slice.call(arguments, 1);
    // 	this._methods.push({ name: methodName, params: methodArgs });
    // }
    Window_BattleLog.prototype.push = function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var methodArgs = args; // Array.prototype.slice.call(arguments, 1);
        this._methods.push({ name: methodName, params: methodArgs });
    };
    Window_BattleLog.prototype.clear = function () {
        this._lines = [];
        this._baseLineStack = [];
        this.refresh();
    };
    Window_BattleLog.prototype.wait = function () {
        this._waitCount = this.messageSpeed();
    };
    Window_BattleLog.prototype.waitForEffect = function () {
        this.setWaitMode("effect");
    };
    Window_BattleLog.prototype.waitForMovement = function () {
        this.setWaitMode("movement");
    };
    Window_BattleLog.prototype.addText = function (text) {
        this._lines.push(text);
        this.refresh();
        this.wait();
    };
    Window_BattleLog.prototype.pushBaseLine = function () {
        this._baseLineStack.push(this._lines.length);
    };
    Window_BattleLog.prototype.popBaseLine = function () {
        var baseLine = this._baseLineStack.pop();
        while (this._lines.length > baseLine) {
            this._lines.pop();
        }
    };
    Window_BattleLog.prototype.waitForNewLine = function () {
        var baseLine = 0;
        if (this._baseLineStack.length > 0) {
            baseLine = this._baseLineStack[this._baseLineStack.length - 1];
        }
        if (this._lines.length > baseLine) {
            this.wait();
        }
    };
    Window_BattleLog.prototype.popupDamage = function (target) {
        target.startDamagePopup();
    };
    Window_BattleLog.prototype.performActionStart = function (subject, action) {
        subject.performActionStart(action);
    };
    Window_BattleLog.prototype.performAction = function (subject, action) {
        subject.performAction(action);
    };
    Window_BattleLog.prototype.performActionEnd = function (subject) {
        subject.performActionEnd();
    };
    Window_BattleLog.prototype.performDamage = function (target) {
        target.performDamage();
    };
    Window_BattleLog.prototype.performMiss = function (target) {
        target.performMiss();
    };
    Window_BattleLog.prototype.performRecovery = function (target) {
        target.performRecovery();
    };
    Window_BattleLog.prototype.performEvasion = function (target) {
        target.performEvasion();
    };
    Window_BattleLog.prototype.performMagicEvasion = function (target) {
        target.performMagicEvasion();
    };
    Window_BattleLog.prototype.performCounter = function (target) {
        target.performCounter();
    };
    Window_BattleLog.prototype.performReflection = function (target) {
        target.performReflection();
    };
    Window_BattleLog.prototype.performSubstitute = function (substitute, target) {
        substitute.performSubstitute(target);
    };
    Window_BattleLog.prototype.performCollapse = function (target) {
        target.performCollapse();
    };
    Window_BattleLog.prototype.showAnimation = function (subject, targets, animationId) {
        if (animationId < 0) {
            this.showAttackAnimation(subject, targets);
        }
        else {
            this.showNormalAnimation(targets, animationId);
        }
    };
    Window_BattleLog.prototype.showAttackAnimation = function (subject, targets) {
        if (subject.isActor()) {
            this.showActorAttackAnimation(subject, targets);
        }
        else {
            this.showEnemyAttackAnimation(subject, targets);
        }
    };
    Window_BattleLog.prototype.showActorAttackAnimation = function (subject, targets) {
        this.showNormalAnimation(targets, subject.attackAnimationId1(), false);
        this.showNormalAnimation(targets, subject.attackAnimationId2(), true);
    };
    Window_BattleLog.prototype.showEnemyAttackAnimation = function (_subject, _targets) {
        SoundManager_1.SoundManager.playEnemyAttack();
    };
    Window_BattleLog.prototype.showNormalAnimation = function (targets, animationId, mirror) {
        var animation = globals_1.$dataAnimations[animationId];
        if (animation) {
            var delay_1 = this.animationBaseDelay();
            var nextDelay_1 = this.animationNextDelay();
            targets.forEach(function (target) {
                target.startAnimation(animationId, mirror, delay_1);
                delay_1 += nextDelay_1;
            });
        }
    };
    Window_BattleLog.prototype.animationBaseDelay = function () {
        return 8;
    };
    Window_BattleLog.prototype.animationNextDelay = function () {
        return 12;
    };
    Window_BattleLog.prototype.refresh = function () {
        this.drawBackground();
        this.contents.clear();
        for (var i = 0; i < this._lines.length; i++) {
            this.drawLineText(i);
        }
    };
    Window_BattleLog.prototype.drawBackground = function () {
        var rect = this.backRect();
        var color = this.backColor();
        this._backBitmap.clear();
        this._backBitmap.paintOpacity = this.backPaintOpacity();
        this._backBitmap.fillRect(rect.x, rect.y, rect.width, rect.height, color);
        this._backBitmap.paintOpacity = 255;
    };
    Window_BattleLog.prototype.backRect = function () {
        return {
            x: 0,
            y: this.padding,
            width: this.width,
            height: this.numLines() * this.lineHeight()
        };
    };
    Window_BattleLog.prototype.backColor = function () {
        return "#000000";
    };
    Window_BattleLog.prototype.backPaintOpacity = function () {
        return 64;
    };
    Window_BattleLog.prototype.drawLineText = function (index) {
        var rect = this.itemRectForText(index);
        this.contents.clearRect(rect.x, rect.y, rect.width, rect.height);
        this.drawTextEx(this._lines[index], rect.x, rect.y, rect.width);
    };
    Window_BattleLog.prototype.startTurn = function () {
        this.push("wait");
    };
    Window_BattleLog.prototype.startAction = function (subject, action, targets) {
        var item = action.item();
        this.push("performActionStart", subject, action);
        this.push("waitForMovement");
        this.push("performAction", subject, action);
        this.push("showAnimation", subject, Utils_1.Utils.cloneArray(targets), item.animationId);
        this.displayAction(subject, item);
    };
    Window_BattleLog.prototype.endAction = function (subject) {
        this.push("waitForNewLine");
        this.push("clear");
        this.push("performActionEnd", subject);
    };
    Window_BattleLog.prototype.displayCurrentState = function (subject) {
        var stateText = subject.mostImportantStateText();
        if (stateText) {
            this.push("addText", subject.name() + stateText);
            this.push("wait");
            this.push("clear");
        }
    };
    Window_BattleLog.prototype.displayRegeneration = function (subject) {
        this.push("popupDamage", subject);
    };
    Window_BattleLog.prototype.displayAction = function (subject, item) {
        var numMethods = this._methods.length;
        if (DataManager_1.DataManager.isSkill(item)) {
            if (item.message1) {
                this.push("addText", subject.name() + Utils_1.Utils.format(item.message1, item.name));
            }
            if (item.message2) {
                this.push("addText", Utils_1.Utils.format(item.message2, item.name));
            }
        }
        else {
            this.push("addText", Utils_1.Utils.format(TextManager_1.TextManager.useItem, subject.name(), item.name));
        }
        if (this._methods.length === numMethods) {
            this.push("wait");
        }
    };
    Window_BattleLog.prototype.displayCounter = function (target) {
        this.push("performCounter", target);
        this.push("addText", Utils_1.Utils.format(TextManager_1.TextManager.counterAttack, target.name()));
    };
    Window_BattleLog.prototype.displayReflection = function (target) {
        this.push("performReflection", target);
        this.push("addText", Utils_1.Utils.format(TextManager_1.TextManager.magicReflection, target.name()));
    };
    Window_BattleLog.prototype.displaySubstitute = function (substitute, target) {
        var substName = substitute.name();
        this.push("performSubstitute", substitute, target);
        this.push("addText", Utils_1.Utils.format(TextManager_1.TextManager.substitute, substName, target.name()));
    };
    Window_BattleLog.prototype.displayActionResults = function (subject, target) {
        if (target.result().used) {
            this.push("pushBaseLine");
            this.displayCritical(target);
            this.push("popupDamage", target);
            this.push("popupDamage", subject);
            this.displayDamage(target);
            this.displayAffectedStatus(target);
            this.displayFailure(target);
            this.push("waitForNewLine");
            this.push("popBaseLine");
        }
    };
    Window_BattleLog.prototype.displayFailure = function (target) {
        if (target.result().isHit() && !target.result().success) {
            this.push("addText", Utils_1.Utils.format(TextManager_1.TextManager.actionFailure, target.name()));
        }
    };
    Window_BattleLog.prototype.displayCritical = function (target) {
        if (target.result().critical) {
            if (target.isActor()) {
                this.push("addText", TextManager_1.TextManager.criticalToActor);
            }
            else {
                this.push("addText", TextManager_1.TextManager.criticalToEnemy);
            }
        }
    };
    Window_BattleLog.prototype.displayDamage = function (target) {
        if (target.result().missed) {
            this.displayMiss(target);
        }
        else if (target.result().evaded) {
            this.displayEvasion(target);
        }
        else {
            this.displayHpDamage(target);
            this.displayMpDamage(target);
            this.displayTpDamage(target);
        }
    };
    Window_BattleLog.prototype.displayMiss = function (target) {
        var fmt;
        if (target.result().physical) {
            fmt = target.isActor() ? TextManager_1.TextManager.actorNoHit : TextManager_1.TextManager.enemyNoHit;
            this.push("performMiss", target);
        }
        else {
            fmt = TextManager_1.TextManager.actionFailure;
        }
        this.push("addText", Utils_1.Utils.format(fmt, target.name()));
    };
    Window_BattleLog.prototype.displayEvasion = function (target) {
        var fmt;
        if (target.result().physical) {
            fmt = TextManager_1.TextManager.evasion;
            this.push("performEvasion", target);
        }
        else {
            fmt = TextManager_1.TextManager.magicEvasion;
            this.push("performMagicEvasion", target);
        }
        this.push("addText", Utils_1.Utils.format(fmt, target.name()));
    };
    Window_BattleLog.prototype.displayHpDamage = function (target) {
        if (target.result().hpAffected) {
            if (target.result().hpDamage > 0 && !target.result().drain) {
                this.push("performDamage", target);
            }
            if (target.result().hpDamage < 0) {
                this.push("performRecovery", target);
            }
            this.push("addText", this.makeHpDamageText(target));
        }
    };
    Window_BattleLog.prototype.displayMpDamage = function (target) {
        if (target.isAlive() && target.result().mpDamage !== 0) {
            if (target.result().mpDamage < 0) {
                this.push("performRecovery", target);
            }
            this.push("addText", this.makeMpDamageText(target));
        }
    };
    Window_BattleLog.prototype.displayTpDamage = function (target) {
        if (target.isAlive() && target.result().tpDamage !== 0) {
            if (target.result().tpDamage < 0) {
                this.push("performRecovery", target);
            }
            this.push("addText", this.makeTpDamageText(target));
        }
    };
    Window_BattleLog.prototype.displayAffectedStatus = function (target, _value) {
        // なぜか displayAutoAffectedStatus が第二引数を与える
        if (target.result().isStatusAffected()) {
            this.push("pushBaseLine");
            this.displayChangedStates(target);
            this.displayChangedBuffs(target);
            this.push("waitForNewLine");
            this.push("popBaseLine");
        }
    };
    Window_BattleLog.prototype.displayAutoAffectedStatus = function (target) {
        if (target.result().isStatusAffected()) {
            this.displayAffectedStatus(target, null);
            this.push("clear");
        }
    };
    Window_BattleLog.prototype.displayChangedStates = function (target) {
        this.displayAddedStates(target);
        this.displayRemovedStates(target);
    };
    Window_BattleLog.prototype.displayAddedStates = function (target) {
        var _this = this;
        target
            .result()
            .addedStateObjects()
            .forEach(function (state) {
            var stateMsg = target.isActor() ? state.message1 : state.message2;
            if (state.id === target.deathStateId()) {
                _this.push("performCollapse", target);
            }
            if (stateMsg) {
                _this.push("popBaseLine");
                _this.push("pushBaseLine");
                _this.push("addText", target.name() + stateMsg);
                _this.push("waitForEffect");
            }
        });
    };
    Window_BattleLog.prototype.displayRemovedStates = function (target) {
        var _this = this;
        target
            .result()
            .removedStateObjects()
            .forEach(function (state) {
            if (state.message4) {
                _this.push("popBaseLine");
                _this.push("pushBaseLine");
                _this.push("addText", target.name() + state.message4);
            }
        });
    };
    Window_BattleLog.prototype.displayChangedBuffs = function (target) {
        var result = target.result();
        this.displayBuffs(target, result.addedBuffs, TextManager_1.TextManager.buffAdd);
        this.displayBuffs(target, result.addedDebuffs, TextManager_1.TextManager.debuffAdd);
        this.displayBuffs(target, result.removedBuffs, TextManager_1.TextManager.buffRemove);
    };
    Window_BattleLog.prototype.displayBuffs = function (target, buffs, fmt) {
        var _this = this;
        buffs.forEach(function (paramId) {
            _this.push("popBaseLine");
            _this.push("pushBaseLine");
            _this.push("addText", Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.param(paramId)));
        });
    };
    Window_BattleLog.prototype.makeHpDamageText = function (target) {
        var result = target.result();
        var damage = result.hpDamage;
        var isActor = target.isActor();
        var fmt;
        if (damage > 0 && result.drain) {
            fmt = isActor ? TextManager_1.TextManager.actorDrain : TextManager_1.TextManager.enemyDrain;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.hp, damage);
        }
        else if (damage > 0) {
            fmt = isActor ? TextManager_1.TextManager.actorDamage : TextManager_1.TextManager.enemyDamage;
            return Utils_1.Utils.format(fmt, target.name(), damage);
        }
        else if (damage < 0) {
            fmt = isActor ? TextManager_1.TextManager.actorRecovery : TextManager_1.TextManager.enemyRecovery;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.hp, -damage);
        }
        else {
            fmt = isActor ? TextManager_1.TextManager.actorNoDamage : TextManager_1.TextManager.enemyNoDamage;
            return Utils_1.Utils.format(fmt, target.name());
        }
    };
    Window_BattleLog.prototype.makeMpDamageText = function (target) {
        var result = target.result();
        var damage = result.mpDamage;
        var isActor = target.isActor();
        var fmt;
        if (damage > 0 && result.drain) {
            fmt = isActor ? TextManager_1.TextManager.actorDrain : TextManager_1.TextManager.enemyDrain;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.mp, damage);
        }
        else if (damage > 0) {
            fmt = isActor ? TextManager_1.TextManager.actorLoss : TextManager_1.TextManager.enemyLoss;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.mp, damage);
        }
        else if (damage < 0) {
            fmt = isActor ? TextManager_1.TextManager.actorRecovery : TextManager_1.TextManager.enemyRecovery;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.mp, -damage);
        }
        else {
            return "";
        }
    };
    Window_BattleLog.prototype.makeTpDamageText = function (target) {
        var result = target.result();
        var damage = result.tpDamage;
        var isActor = target.isActor();
        var fmt;
        if (damage > 0) {
            fmt = isActor ? TextManager_1.TextManager.actorLoss : TextManager_1.TextManager.enemyLoss;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.tp, damage);
        }
        else if (damage < 0) {
            fmt = isActor ? TextManager_1.TextManager.actorGain : TextManager_1.TextManager.enemyGain;
            return Utils_1.Utils.format(fmt, target.name(), TextManager_1.TextManager.tp, -damage);
        }
        else {
            return "";
        }
    };
    return Window_BattleLog;
}(WindowSelectable_1.Window_Selectable));
exports.Window_BattleLog = Window_BattleLog;

},{"../core/Bitmap":13,"../core/Graphics":14,"../core/Sprite":21,"../core/TouchInput":27,"../core/Utils":28,"../managers/DataManager":36,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./WindowSelectable":142}],117:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleSkill = void 0;
var WindowSkillList_1 = require("./WindowSkillList");
var Window_BattleSkill = /** @class */ (function (_super) {
    __extends(Window_BattleSkill, _super);
    function Window_BattleSkill(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_BattleSkill.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this.hide();
    };
    Window_BattleSkill.prototype.show = function () {
        this.selectLast();
        this.showHelpWindow();
        _super.prototype.show.call(this);
    };
    Window_BattleSkill.prototype.hide = function () {
        this.hideHelpWindow();
        _super.prototype.hide.call(this);
    };
    return Window_BattleSkill;
}(WindowSkillList_1.Window_SkillList));
exports.Window_BattleSkill = Window_BattleSkill;

},{"./WindowSkillList":148}],118:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_BattleStatus = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_BattleStatus = /** @class */ (function (_super) {
    __extends(Window_BattleStatus, _super);
    function Window_BattleStatus() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_BattleStatus.prototype.initialize = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        var width = this.windowWidth();
        var height = this.windowHeight();
        var x = Graphics_1.Graphics.boxWidth - width;
        var y = Graphics_1.Graphics.boxHeight - height;
        _super.prototype.initialize.call(this, x, y, width, height);
        this.refresh();
        this.openness = 0;
    };
    Window_BattleStatus.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth - 192;
    };
    Window_BattleStatus.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_BattleStatus.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_BattleStatus.prototype.maxItems = function () {
        return globals_1.$gameParty.battleMembers().length;
    };
    Window_BattleStatus.prototype.refresh = function () {
        this.contents.clear();
        this.drawAllItems();
    };
    Window_BattleStatus.prototype.drawItem = function (index) {
        var actor = globals_1.$gameParty.battleMembers()[index];
        this.drawBasicArea(this.basicAreaRect(index), actor);
        this.drawGaugeArea(this.gaugeAreaRect(index), actor);
    };
    Window_BattleStatus.prototype.basicAreaRect = function (index) {
        var rect = this.itemRectForText(index);
        rect.width -= this.gaugeAreaWidth() + 15;
        return rect;
    };
    Window_BattleStatus.prototype.gaugeAreaRect = function (index) {
        var rect = this.itemRectForText(index);
        rect.x += rect.width - this.gaugeAreaWidth();
        rect.width = this.gaugeAreaWidth();
        return rect;
    };
    Window_BattleStatus.prototype.gaugeAreaWidth = function () {
        return 330;
    };
    Window_BattleStatus.prototype.drawBasicArea = function (rect, actor) {
        this.drawActorName(actor, rect.x + 0, rect.y, 150);
        this.drawActorIcons(actor, rect.x + 156, rect.y, rect.width - 156);
    };
    Window_BattleStatus.prototype.drawGaugeArea = function (rect, actor) {
        if (globals_1.$dataSystem.optDisplayTp) {
            this.drawGaugeAreaWithTp(rect, actor);
        }
        else {
            this.drawGaugeAreaWithoutTp(rect, actor);
        }
    };
    Window_BattleStatus.prototype.drawGaugeAreaWithTp = function (rect, actor) {
        this.drawActorHp(actor, rect.x + 0, rect.y, 108);
        this.drawActorMp(actor, rect.x + 123, rect.y, 96);
        this.drawActorTp(actor, rect.x + 234, rect.y, 96);
    };
    Window_BattleStatus.prototype.drawGaugeAreaWithoutTp = function (rect, actor) {
        this.drawActorHp(actor, rect.x + 0, rect.y, 201);
        this.drawActorMp(actor, rect.x + 216, rect.y, 114);
    };
    return Window_BattleStatus;
}(WindowSelectable_1.Window_Selectable));
exports.Window_BattleStatus = Window_BattleStatus;

},{"../core/Graphics":14,"../managers/globals":43,"./WindowSelectable":142}],119:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ChoiceList = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var WindowCommand_1 = require("./WindowCommand");
var Window_ChoiceList = /** @class */ (function (_super) {
    __extends(Window_ChoiceList, _super);
    function Window_ChoiceList(messageWindow) {
        return _super.call(this, messageWindow) || this;
    }
    Window_ChoiceList.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._messageWindow = args[0];
        _super.prototype.initialize.call(this, 0, 0);
        this.openness = 0;
        this.deactivate();
        this._background = 0;
    };
    Window_ChoiceList.prototype.start = function () {
        this.updatePlacement();
        this.updateBackground();
        this.refresh();
        this.selectDefault();
        this.open();
        this.activate();
    };
    Window_ChoiceList.prototype.selectDefault = function () {
        this.select(globals_1.$gameMessage.choiceDefaultType());
    };
    Window_ChoiceList.prototype.updatePlacement = function () {
        var positionType = globals_1.$gameMessage.choicePositionType();
        var messageY = this._messageWindow.y;
        this.width = this.windowWidth();
        this.height = this.windowHeight();
        switch (positionType) {
            case 0:
                this.x = 0;
                break;
            case 1:
                this.x = (Graphics_1.Graphics.boxWidth - this.width) / 2;
                break;
            case 2:
                this.x = Graphics_1.Graphics.boxWidth - this.width;
                break;
        }
        if (messageY >= Graphics_1.Graphics.boxHeight / 2) {
            this.y = messageY - this.height;
        }
        else {
            this.y = messageY + this._messageWindow.height;
        }
    };
    Window_ChoiceList.prototype.updateBackground = function () {
        this._background = globals_1.$gameMessage.choiceBackground();
        this.setBackgroundType(this._background);
    };
    Window_ChoiceList.prototype.windowWidth = function () {
        var width = this.maxChoiceWidth() + this.padding * 2;
        return Math.min(width, Graphics_1.Graphics.boxWidth);
    };
    Window_ChoiceList.prototype.numVisibleRows = function () {
        var messageY = this._messageWindow.y;
        var messageHeight = this._messageWindow.height;
        var centerY = Graphics_1.Graphics.boxHeight / 2;
        var choices = globals_1.$gameMessage.choices();
        var numLines = choices.length;
        var maxLines = 8;
        if (messageY < centerY && messageY + messageHeight > centerY) {
            maxLines = 4;
        }
        if (numLines > maxLines) {
            numLines = maxLines;
        }
        return numLines;
    };
    Window_ChoiceList.prototype.maxChoiceWidth = function () {
        var maxWidth = 96;
        var choices = globals_1.$gameMessage.choices();
        for (var i = 0; i < choices.length; i++) {
            var choiceWidth = this.textWidthEx(choices[i]) + this.textPadding() * 2;
            if (maxWidth < choiceWidth) {
                maxWidth = choiceWidth;
            }
        }
        return Math.ceil(maxWidth);
    };
    Window_ChoiceList.prototype.textWidthEx = function (text) {
        return this.drawTextEx(text, 0, this.contents.height);
    };
    Window_ChoiceList.prototype.contentsHeight = function () {
        return this.maxItems() * this.itemHeight();
    };
    Window_ChoiceList.prototype.makeCommandList = function () {
        var choices = globals_1.$gameMessage.choices();
        for (var i = 0; i < choices.length; i++) {
            this.addCommand(choices[i], "choice");
        }
    };
    Window_ChoiceList.prototype.drawItem = function (index) {
        var rect = this.itemRectForText(index);
        this.drawTextEx(this.commandName(index), rect.x, rect.y);
    };
    Window_ChoiceList.prototype.isCancelEnabled = function () {
        return globals_1.$gameMessage.choiceCancelType() !== -1;
    };
    Window_ChoiceList.prototype.isOkTriggered = function () {
        // TODO: impl
        // return Input.isTriggered("ok");
        return false;
    };
    Window_ChoiceList.prototype.callOkHandler = function () {
        globals_1.$gameMessage.onChoice(this.index());
        this._messageWindow.terminateMessage();
        this.close();
    };
    Window_ChoiceList.prototype.callCancelHandler = function () {
        globals_1.$gameMessage.onChoice(globals_1.$gameMessage.choiceCancelType());
        this._messageWindow.terminateMessage();
        this.close();
    };
    return Window_ChoiceList;
}(WindowCommand_1.Window_Command));
exports.Window_ChoiceList = Window_ChoiceList;

},{"../core/Graphics":14,"../managers/globals":43,"./WindowCommand":120}],120:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Command = void 0;
var WindowSelectable_1 = require("./WindowSelectable");
var Window_Command = /** @class */ (function (_super) {
    __extends(Window_Command, _super);
    function Window_Command() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
        // if (Object.getPrototypeOf(this) === Window_Command.prototype) {
        // 	this.initialize(this.x, this.y);
        // }
    }
    Window_Command.prototype.initialize = function (x, y) {
        this.clearCommandList();
        this.makeCommandList();
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, x, y, width, height);
        this.refresh();
        this.select(0);
        this.activate();
    };
    Window_Command.prototype.windowWidth = function () {
        return 240;
    };
    Window_Command.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_Command.prototype.numVisibleRows = function () {
        return Math.ceil(this.maxItems() / this.maxCols());
    };
    Window_Command.prototype.maxItems = function () {
        return this._list.length;
    };
    Window_Command.prototype.clearCommandList = function () {
        this._list = [];
    };
    Window_Command.prototype.makeCommandList = function () {
        // nothing to do.
    };
    Window_Command.prototype.addCommand = function (name, symbol, enabled, ext) {
        if (enabled === undefined) {
            enabled = true;
        }
        if (ext === undefined) {
            ext = null;
        }
        this._list.push({ name: name, symbol: symbol, enabled: enabled, ext: ext });
    };
    Window_Command.prototype.commandName = function (index) {
        return this._list[index].name;
    };
    Window_Command.prototype.commandSymbol = function (index) {
        return this._list[index].symbol;
    };
    Window_Command.prototype.isCommandEnabled = function (index) {
        return this._list[index].enabled;
    };
    Window_Command.prototype.currentData = function () {
        return this.index() >= 0 ? this._list[this.index()] : null;
    };
    Window_Command.prototype.isCurrentItemEnabled = function () {
        return this.currentData() ? this.currentData().enabled : false;
    };
    Window_Command.prototype.currentSymbol = function () {
        return this.currentData() ? this.currentData().symbol : null;
    };
    Window_Command.prototype.currentExt = function () {
        return this.currentData() ? this.currentData().ext : null;
    };
    Window_Command.prototype.findSymbol = function (symbol) {
        for (var i = 0; i < this._list.length; i++) {
            if (this._list[i].symbol === symbol) {
                return i;
            }
        }
        return -1;
    };
    Window_Command.prototype.selectSymbol = function (symbol) {
        var index = this.findSymbol(symbol);
        if (index >= 0) {
            this.select(index);
        }
        else {
            this.select(0);
        }
    };
    Window_Command.prototype.findExt = function (ext) {
        for (var i = 0; i < this._list.length; i++) {
            if (this._list[i].ext === ext) {
                return i;
            }
        }
        return -1;
    };
    Window_Command.prototype.selectExt = function (ext) {
        var index = this.findExt(ext);
        if (index >= 0) {
            this.select(index);
        }
        else {
            this.select(0);
        }
    };
    Window_Command.prototype.drawItem = function (index) {
        var rect = this.itemRectForText(index);
        var align = this.itemTextAlign();
        this.resetTextColor();
        this.changePaintOpacity(this.isCommandEnabled(index));
        this.drawText(this.commandName(index), rect.x, rect.y, rect.width, align);
    };
    Window_Command.prototype.itemTextAlign = function () {
        return "left";
    };
    Window_Command.prototype.isOkEnabled = function () {
        return true;
    };
    Window_Command.prototype.callOkHandler = function () {
        var symbol = this.currentSymbol();
        if (this.isHandled(symbol)) {
            this.callHandler(symbol);
        }
        else if (this.isHandled("ok")) {
            _super.prototype.callOkHandler.call(this);
        }
        else {
            this.activate();
        }
    };
    Window_Command.prototype.refresh = function () {
        this.clearCommandList();
        this.makeCommandList();
        this.createContents();
        _super.prototype.refresh.call(this);
    };
    return Window_Command;
}(WindowSelectable_1.Window_Selectable));
exports.Window_Command = Window_Command;

},{"./WindowSelectable":142}],121:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_EquipCommand = void 0;
var TextManager_1 = require("../managers/TextManager");
var WindowHorzCommand_1 = require("./WindowHorzCommand");
var Window_EquipCommand = /** @class */ (function (_super) {
    __extends(Window_EquipCommand, _super);
    function Window_EquipCommand(x, y, width) {
        return _super.call(this, x, y, width) || this;
    }
    Window_EquipCommand.prototype.initialize = function (x, y, width) {
        this._windowWidth = width;
        _super.prototype.initialize.call(this, x, y);
    };
    Window_EquipCommand.prototype.windowWidth = function () {
        return this._windowWidth;
    };
    Window_EquipCommand.prototype.maxCols = function () {
        return 3;
    };
    Window_EquipCommand.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.equip2, "equip");
        this.addCommand(TextManager_1.TextManager.optimize, "optimize");
        this.addCommand(TextManager_1.TextManager.clear, "clear");
    };
    return Window_EquipCommand;
}(WindowHorzCommand_1.Window_HorzCommand));
exports.Window_EquipCommand = Window_EquipCommand;

},{"../managers/TextManager":42,"./WindowHorzCommand":129}],122:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_EquipItem = void 0;
var JsonEx_1 = require("../core/JsonEx");
var WindowItemList_1 = require("./WindowItemList");
var Window_EquipItem = /** @class */ (function (_super) {
    __extends(Window_EquipItem, _super);
    function Window_EquipItem(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_EquipItem.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._actor = null;
        this._slotId = 0;
    };
    Window_EquipItem.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
            this.resetScroll();
        }
    };
    Window_EquipItem.prototype.setSlotId = function (slotId) {
        if (this._slotId !== slotId) {
            this._slotId = slotId;
            this.refresh();
            this.resetScroll();
        }
    };
    Window_EquipItem.prototype.includes = function (item) {
        if (item === null) {
            return true;
        }
        if (this._slotId < 0 || item.etypeId !== this._actor.equipSlots()[this._slotId]) {
            return false;
        }
        return this._actor.canEquip(item);
    };
    Window_EquipItem.prototype.isEnabled = function (_item) {
        return true;
    };
    Window_EquipItem.prototype.selectLast = function () {
        //
    };
    Window_EquipItem.prototype.setStatusWindow = function (statusWindow) {
        this._statusWindow = statusWindow;
        this.callUpdateHelp();
    };
    Window_EquipItem.prototype.updateHelp = function () {
        _super.prototype.updateHelp.call(this);
        if (this._actor && this._statusWindow) {
            var actor = JsonEx_1.JsonEx.makeDeepCopy(this._actor);
            actor.forceChangeEquip(this._slotId, this.item());
            this._statusWindow.setTempActor(actor);
        }
    };
    Window_EquipItem.prototype.playOkSound = function () {
        //
    };
    return Window_EquipItem;
}(WindowItemList_1.Window_ItemList));
exports.Window_EquipItem = Window_EquipItem;

},{"../core/JsonEx":17,"./WindowItemList":131}],123:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_EquipSlot = void 0;
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_EquipSlot = /** @class */ (function (_super) {
    __extends(Window_EquipSlot, _super);
    function Window_EquipSlot(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_EquipSlot.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._actor = null;
        this.refresh();
    };
    Window_EquipSlot.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
        }
    };
    Window_EquipSlot.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._itemWindow) {
            this._itemWindow.setSlotId(this.index());
        }
    };
    Window_EquipSlot.prototype.maxItems = function () {
        return this._actor ? this._actor.equipSlots().length : 0;
    };
    Window_EquipSlot.prototype.item = function () {
        return this._actor ? this._actor.equips()[this.index()] : null;
    };
    Window_EquipSlot.prototype.drawItem = function (index) {
        if (this._actor) {
            var rect = this.itemRectForText(index);
            this.changeTextColor(this.systemColor());
            this.changePaintOpacity(this.isEnabled(index));
            this.drawText(this.slotName(index), rect.x, rect.y, 138, this.lineHeight());
            this.drawItemName(this._actor.equips()[index], rect.x + 138, rect.y);
            this.changePaintOpacity(true);
        }
    };
    Window_EquipSlot.prototype.slotName = function (index) {
        var slots = this._actor.equipSlots();
        return this._actor ? globals_1.$dataSystem.equipTypes[slots[index]] : "";
    };
    Window_EquipSlot.prototype.isEnabled = function (index) {
        return this._actor ? this._actor.isEquipChangeOk(index) : false;
    };
    Window_EquipSlot.prototype.isCurrentItemEnabled = function () {
        return this.isEnabled(this.index());
    };
    Window_EquipSlot.prototype.setStatusWindow = function (statusWindow) {
        this._statusWindow = statusWindow;
        this.callUpdateHelp();
    };
    Window_EquipSlot.prototype.setItemWindow = function (itemWindow) {
        this._itemWindow = itemWindow;
    };
    Window_EquipSlot.prototype.updateHelp = function () {
        _super.prototype.updateHelp.call(this);
        this.setHelpWindowItem(this.item());
        if (this._statusWindow) {
            this._statusWindow.setTempActor(null);
        }
    };
    return Window_EquipSlot;
}(WindowSelectable_1.Window_Selectable));
exports.Window_EquipSlot = Window_EquipSlot;

},{"../managers/globals":43,"./WindowSelectable":142}],124:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_EquipStatus = void 0;
var TextManager_1 = require("../managers/TextManager");
var WindowBase_1 = require("./WindowBase");
var Window_EquipStatus = /** @class */ (function (_super) {
    __extends(Window_EquipStatus, _super);
    function Window_EquipStatus(x, y) {
        return _super.call(this, x, y) || this;
    }
    Window_EquipStatus.prototype.initialize = function (x, y) {
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, x, y, width, height);
        this._actor = null;
        this._tempActor = null;
        this.refresh();
    };
    Window_EquipStatus.prototype.windowWidth = function () {
        return 312;
    };
    Window_EquipStatus.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_EquipStatus.prototype.numVisibleRows = function () {
        return 7;
    };
    Window_EquipStatus.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
        }
    };
    Window_EquipStatus.prototype.refresh = function () {
        this.contents.clear();
        if (this._actor) {
            this.drawActorName(this._actor, this.textPadding(), 0);
            for (var i = 0; i < 6; i++) {
                this.drawItem(0, this.lineHeight() * (1 + i), 2 + i);
            }
        }
    };
    Window_EquipStatus.prototype.setTempActor = function (tempActor) {
        if (this._tempActor !== tempActor) {
            this._tempActor = tempActor;
            this.refresh();
        }
    };
    Window_EquipStatus.prototype.drawItem = function (x, y, paramId) {
        this.drawParamName(x + this.textPadding(), y, paramId);
        if (this._actor) {
            this.drawCurrentParam(x + 140, y, paramId);
        }
        this.drawRightArrow(x + 188, y);
        if (this._tempActor) {
            this.drawNewParam(x + 222, y, paramId);
        }
    };
    Window_EquipStatus.prototype.drawParamName = function (x, y, paramId) {
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.param(paramId), x, y, 120);
    };
    Window_EquipStatus.prototype.drawCurrentParam = function (x, y, paramId) {
        this.resetTextColor();
        this.drawText(this._actor.param(paramId), x, y, 48, "right");
    };
    Window_EquipStatus.prototype.drawRightArrow = function (x, y) {
        this.changeTextColor(this.systemColor());
        this.drawText("\u2192", x, y, 32, "center");
    };
    Window_EquipStatus.prototype.drawNewParam = function (x, y, paramId) {
        var newValue = this._tempActor.param(paramId);
        var diffvalue = newValue - this._actor.param(paramId);
        this.changeTextColor(this.paramchangeTextColor(diffvalue));
        this.drawText(newValue, x, y, 48, "right");
    };
    return Window_EquipStatus;
}(WindowBase_1.Window_Base));
exports.Window_EquipStatus = Window_EquipStatus;

},{"../managers/TextManager":42,"./WindowBase":112}],125:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_EventItem = void 0;
var Graphics_1 = require("../core/Graphics");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var WindowItemList_1 = require("./WindowItemList");
var Window_EventItem = /** @class */ (function (_super) {
    __extends(Window_EventItem, _super);
    function Window_EventItem(messageWindow) {
        return _super.call(this, messageWindow) || this;
        // if (Object.getPrototypeOf(this) === Window_EventItem.prototype) {
        // 	this.initialize(param.messageWindow);
        // }
    }
    Window_EventItem.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._messageWindow = args[0];
        var width = Graphics_1.Graphics.boxWidth;
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, 0, 0, width, height);
        this.openness = 0;
        this.deactivate();
        this.setHandler("ok", this.onOk.bind(this));
        this.setHandler("cancel", this.onCancel.bind(this));
    };
    Window_EventItem.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_EventItem.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_EventItem.prototype.start = function () {
        this.refresh();
        this.updatePlacement();
        this.select(0);
        this.open();
        this.activate();
    };
    Window_EventItem.prototype.updatePlacement = function () {
        if (this._messageWindow.y >= Graphics_1.Graphics.boxHeight / 2) {
            this.y = 0;
        }
        else {
            this.y = Graphics_1.Graphics.boxHeight - this.height;
        }
    };
    Window_EventItem.prototype.includes = function (item) {
        var itypeId = globals_1.$gameMessage.itemChoiceItypeId();
        return DataManager_1.DataManager.isItem(item) && item.itypeId === itypeId;
    };
    Window_EventItem.prototype.isEnabled = function (_item) {
        return true;
    };
    Window_EventItem.prototype.onOk = function () {
        var item = this.item();
        var itemId = item ? item.id : 0;
        globals_1.$gameVariables.setValue(globals_1.$gameMessage.itemChoiceVariableId(), itemId);
        this._messageWindow.terminateMessage();
        this.close();
    };
    Window_EventItem.prototype.onCancel = function () {
        globals_1.$gameVariables.setValue(globals_1.$gameMessage.itemChoiceVariableId(), 0);
        this._messageWindow.terminateMessage();
        this.close();
    };
    return Window_EventItem;
}(WindowItemList_1.Window_ItemList));
exports.Window_EventItem = Window_EventItem;

},{"../core/Graphics":14,"../managers/DataManager":36,"../managers/globals":43,"./WindowItemList":131}],126:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_GameEnd = void 0;
var Graphics_1 = require("../core/Graphics");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_GameEnd = /** @class */ (function (_super) {
    __extends(Window_GameEnd, _super);
    function Window_GameEnd() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_GameEnd.prototype.initialize = function () {
        _super.prototype.initialize.call(this, 0, 0);
        this.updatePlacement();
        this.openness = 0;
        this.open();
    };
    Window_GameEnd.prototype.windowWidth = function () {
        return 240;
    };
    Window_GameEnd.prototype.updatePlacement = function () {
        this.x = (Graphics_1.Graphics.boxWidth - this.width) / 2;
        this.y = (Graphics_1.Graphics.boxHeight - this.height) / 2;
    };
    Window_GameEnd.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.toTitle, "toTitle");
        this.addCommand(TextManager_1.TextManager.cancel, "cancel");
    };
    return Window_GameEnd;
}(WindowCommand_1.Window_Command));
exports.Window_GameEnd = Window_GameEnd;

},{"../core/Graphics":14,"../managers/TextManager":42,"./WindowCommand":120}],127:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Gold = void 0;
var globals_1 = require("../managers/globals");
var TextManager_1 = require("../managers/TextManager");
var WindowBase_1 = require("./WindowBase");
var Window_Gold = /** @class */ (function (_super) {
    __extends(Window_Gold, _super);
    function Window_Gold(x, y) {
        return _super.call(this, x, y) || this;
        // if (Object.getPrototypeOf(this) === Window_Gold.prototype) {
        // 	this.initialize(param.x, param.y);
        // }
    }
    Window_Gold.prototype.initialize = function (x, y) {
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, x, y, width, height);
        this.refresh();
    };
    Window_Gold.prototype.windowWidth = function () {
        return 240;
    };
    Window_Gold.prototype.windowHeight = function () {
        return this.fittingHeight(1);
    };
    Window_Gold.prototype.refresh = function () {
        var x = this.textPadding();
        var width = this.contents.width - this.textPadding() * 2;
        this.contents.clear();
        this.drawCurrencyValue(this.value(), this.currencyUnit(), x, 0, width);
    };
    Window_Gold.prototype.value = function () {
        return globals_1.$gameParty.gold();
    };
    Window_Gold.prototype.currencyUnit = function () {
        return TextManager_1.TextManager.currencyUnit;
    };
    Window_Gold.prototype.open = function () {
        this.refresh();
        _super.prototype.open.call(this);
    };
    return Window_Gold;
}(WindowBase_1.Window_Base));
exports.Window_Gold = Window_Gold;

},{"../managers/TextManager":42,"../managers/globals":43,"./WindowBase":112}],128:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Help = void 0;
var Graphics_1 = require("../core/Graphics");
var WindowBase_1 = require("./WindowBase");
var Window_Help = /** @class */ (function (_super) {
    __extends(Window_Help, _super);
    function Window_Help(numLines) {
        return _super.call(this, numLines) || this;
    }
    Window_Help.prototype.initialize = function (numLines) {
        var width = Graphics_1.Graphics.boxWidth;
        var height = this.fittingHeight(numLines || 2);
        _super.prototype.initialize.call(this, 0, 0, width, height);
        this._text = "";
    };
    Window_Help.prototype.setText = function (text) {
        if (this._text !== text) {
            this._text = text;
            this.refresh();
        }
    };
    Window_Help.prototype.clear = function () {
        this.setText("");
    };
    Window_Help.prototype.setItem = function (item) {
        this.setText(item ? item.description : "");
    };
    Window_Help.prototype.refresh = function () {
        this.contents.clear();
        this.drawTextEx(this._text, this.textPadding(), 0);
    };
    return Window_Help;
}(WindowBase_1.Window_Base));
exports.Window_Help = Window_Help;

},{"../core/Graphics":14,"./WindowBase":112}],129:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_HorzCommand = void 0;
var WindowCommand_1 = require("./WindowCommand");
var Window_HorzCommand = /** @class */ (function (_super) {
    __extends(Window_HorzCommand, _super);
    function Window_HorzCommand() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_HorzCommand.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var x = args[0];
        var y = args[1];
        _super.prototype.initialize.call(this, x, y);
    };
    Window_HorzCommand.prototype.numVisibleRows = function () {
        return 1;
    };
    Window_HorzCommand.prototype.maxCols = function () {
        return 4;
    };
    Window_HorzCommand.prototype.itemTextAlign = function () {
        return "center";
    };
    return Window_HorzCommand;
}(WindowCommand_1.Window_Command));
exports.Window_HorzCommand = Window_HorzCommand;

},{"./WindowCommand":120}],130:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ItemCategory = void 0;
var Graphics_1 = require("../core/Graphics");
var TextManager_1 = require("../managers/TextManager");
var WindowHorzCommand_1 = require("./WindowHorzCommand");
var Window_ItemCategory = /** @class */ (function (_super) {
    __extends(Window_ItemCategory, _super);
    function Window_ItemCategory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_ItemCategory.prototype.initialize = function () {
        _super.prototype.initialize.call(this, 0, 0);
    };
    Window_ItemCategory.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth;
    };
    Window_ItemCategory.prototype.maxCols = function () {
        return 4;
    };
    Window_ItemCategory.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._itemWindow) {
            this._itemWindow.setCategory(this.currentSymbol());
        }
    };
    Window_ItemCategory.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.item, "item");
        this.addCommand(TextManager_1.TextManager.weapon, "weapon");
        this.addCommand(TextManager_1.TextManager.armor, "armor");
        this.addCommand(TextManager_1.TextManager.keyItem, "keyItem");
    };
    Window_ItemCategory.prototype.setItemWindow = function (itemWindow) {
        this._itemWindow = itemWindow;
    };
    return Window_ItemCategory;
}(WindowHorzCommand_1.Window_HorzCommand));
exports.Window_ItemCategory = Window_ItemCategory;

},{"../core/Graphics":14,"../managers/TextManager":42,"./WindowHorzCommand":129}],131:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ItemList = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_ItemList = /** @class */ (function (_super) {
    __extends(Window_ItemList, _super);
    function Window_ItemList() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_ItemList.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._category = "none";
        this._data = [];
    };
    Window_ItemList.prototype.setCategory = function (category) {
        if (this._category !== category) {
            this._category = category;
            this.refresh();
            this.resetScroll();
        }
    };
    Window_ItemList.prototype.maxCols = function () {
        return 2;
    };
    Window_ItemList.prototype.spacing = function () {
        return 48;
    };
    Window_ItemList.prototype.maxItems = function () {
        return this._data ? this._data.length : 1;
    };
    Window_ItemList.prototype.item = function () {
        var index = this.index();
        return this._data && index >= 0 ? this._data[index] : null;
    };
    Window_ItemList.prototype.isCurrentItemEnabled = function () {
        return this.isEnabled(this.item());
    };
    Window_ItemList.prototype.includes = function (item) {
        switch (this._category) {
            case "item":
                return DataManager_1.DataManager.isItem(item) && item.itypeId === 1;
            case "weapon":
                return DataManager_1.DataManager.isWeapon(item);
            case "armor":
                return DataManager_1.DataManager.isArmor(item);
            case "keyItem":
                return DataManager_1.DataManager.isItem(item) && item.itypeId === 2;
            default:
                return false;
        }
    };
    Window_ItemList.prototype.needsNumber = function () {
        return true;
    };
    Window_ItemList.prototype.isEnabled = function (item) {
        return globals_1.$gameParty.canUse(item);
    };
    Window_ItemList.prototype.makeItemList = function () {
        var _this = this;
        this._data = globals_1.$gameParty.allItems().filter(function (item) {
            return _this.includes(item);
        });
        if (this.includes(null)) {
            this._data.push(null);
        }
    };
    Window_ItemList.prototype.selectLast = function () {
        var index = this._data.indexOf(globals_1.$gameParty.lastItem());
        this.select(index >= 0 ? index : 0);
    };
    Window_ItemList.prototype.drawItem = function (index) {
        var item = this._data[index];
        if (item) {
            var numberWidth = this.numberWidth();
            var rect = this.itemRect(index);
            rect.width -= this.textPadding();
            this.changePaintOpacity(this.isEnabled(item));
            this.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);
            this.drawItemNumber(item, rect.x, rect.y, rect.width);
            this.changePaintOpacity(/* 1*/ true);
        }
    };
    Window_ItemList.prototype.numberWidth = function () {
        return this.textWidth("000");
    };
    Window_ItemList.prototype.drawItemNumber = function (item, x, y, width) {
        if (this.needsNumber()) {
            this.drawText(":", x, y, width - this.textWidth("00"), "right");
            this.drawText(globals_1.$gameParty.numItems(item), x, y, width, "right");
        }
    };
    Window_ItemList.prototype.updateHelp = function () {
        this.setHelpWindowItem(this.item());
    };
    Window_ItemList.prototype.refresh = function () {
        this.makeItemList();
        this.createContents();
        this.drawAllItems();
    };
    return Window_ItemList;
}(WindowSelectable_1.Window_Selectable));
exports.Window_ItemList = Window_ItemList;

},{"../managers/DataManager":36,"../managers/globals":43,"./WindowSelectable":142}],132:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_MapName = void 0;
var globals_1 = require("../managers/globals");
var WindowBase_1 = require("./WindowBase");
var Window_MapName = /** @class */ (function (_super) {
    __extends(Window_MapName, _super);
    function Window_MapName() {
        return _super.call(this) || this;
        // if (Object.getPrototypeOf(this) === Window_MapName.prototype) {
        // 	this.initialize();
        // }
    }
    Window_MapName.prototype.initialize = function () {
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, 0, 0, width, height);
        this.opacity = 0;
        this.contentsOpacity = 0;
        this._showCount = 0;
        this.refresh();
    };
    Window_MapName.prototype.windowWidth = function () {
        return 360;
    };
    Window_MapName.prototype.windowHeight = function () {
        return this.fittingHeight(1);
    };
    Window_MapName.prototype.update = function () {
        _super.prototype.update.call(this);
        if (this._showCount > 0 && globals_1.$gameMap.isNameDisplayEnabled()) {
            this.updateFadeIn();
            this._showCount--;
        }
        else {
            this.updateFadeOut();
        }
    };
    Window_MapName.prototype.updateFadeIn = function () {
        this.contentsOpacity += 16;
    };
    Window_MapName.prototype.updateFadeOut = function () {
        this.contentsOpacity -= 16;
    };
    Window_MapName.prototype.open = function () {
        this.refresh();
        this._showCount = 150;
    };
    Window_MapName.prototype.close = function () {
        this._showCount = 0;
    };
    Window_MapName.prototype.refresh = function () {
        this.contents.clear();
        if (globals_1.$gameMap.displayName()) {
            var width = this.contentsWidth();
            this.drawBackground(0, 0, width, this.lineHeight());
            this.drawText(globals_1.$gameMap.displayName(), 0, 0, width, "center");
        }
    };
    Window_MapName.prototype.drawBackground = function (x, y, width, height) {
        var color1 = this.dimColor1();
        var color2 = this.dimColor2();
        this.contents.gradientFillRect(x, y, width / 2, height, color2, color1);
        this.contents.gradientFillRect(x + width / 2, y, width / 2, height, color1, color2);
    };
    return Window_MapName;
}(WindowBase_1.Window_Base));
exports.Window_MapName = Window_MapName;

},{"../managers/globals":43,"./WindowBase":112}],133:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_MenuActor = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var GameAction_1 = require("../objects/GameAction");
var WindowMenuStatus_1 = require("./WindowMenuStatus");
var Window_MenuActor = /** @class */ (function (_super) {
    __extends(Window_MenuActor, _super);
    function Window_MenuActor() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_MenuActor.prototype.initialize = function () {
        _super.prototype.initialize.call(this, 0, 0);
        this.hide();
    };
    Window_MenuActor.prototype.processOk = function () {
        if (!this.cursorAll()) {
            globals_1.$gameParty.setTargetActor(globals_1.$gameParty.members()[this.index()]);
        }
        this.callOkHandler();
    };
    Window_MenuActor.prototype.selectLast = function () {
        this.select(globals_1.$gameParty.targetActor().index() || 0);
    };
    Window_MenuActor.prototype.selectForItem = function (item) {
        var actor = globals_1.$gameParty.menuActor();
        var action = new GameAction_1.Game_Action(actor);
        action.setItemObject(item);
        this.setCursorFixed(false);
        this.setCursorAll(false);
        if (action.isForUser()) {
            if (DataManager_1.DataManager.isSkill(item)) {
                this.setCursorFixed(true);
                this.select(actor.index());
            }
            else {
                this.selectLast();
            }
        }
        else if (action.isForAll()) {
            this.setCursorAll(true);
            this.select(0);
        }
        else {
            this.selectLast();
        }
    };
    return Window_MenuActor;
}(WindowMenuStatus_1.Window_MenuStatus));
exports.Window_MenuActor = Window_MenuActor;

},{"../managers/DataManager":36,"../managers/globals":43,"../objects/GameAction":44,"./WindowMenuStatus":135}],134:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_MenuCommand = void 0;
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_MenuCommand = /** @class */ (function (_super) {
    __extends(Window_MenuCommand, _super);
    function Window_MenuCommand() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_MenuCommand.initCommandPosition = function () {
        this._lastCommandSymbol = null;
    };
    Window_MenuCommand.prototype.initialize = function (x, y) {
        _super.prototype.initialize.call(this, x, y);
        this.selectLast();
    };
    Window_MenuCommand.prototype.windowWidth = function () {
        return 240;
    };
    Window_MenuCommand.prototype.numVisibleRows = function () {
        return this.maxItems();
    };
    Window_MenuCommand.prototype.makeCommandList = function () {
        this.addMainCommands();
        this.addFormationCommand();
        this.addOriginalCommands();
        // オプション機能とセーブ機能は非サポート要件なので、コメントアウト
        // this.addOptionsCommand();
        // this.addSaveCommand();
        this.addGameEndCommand();
    };
    Window_MenuCommand.prototype.addMainCommands = function () {
        var enabled = this.areMainCommandsEnabled();
        if (this.needsCommand("item")) {
            this.addCommand(TextManager_1.TextManager.item, "item", enabled);
        }
        if (this.needsCommand("skill")) {
            this.addCommand(TextManager_1.TextManager.skill, "skill", enabled);
        }
        if (this.needsCommand("equip")) {
            this.addCommand(TextManager_1.TextManager.equip, "equip", enabled);
        }
        if (this.needsCommand("status")) {
            this.addCommand(TextManager_1.TextManager.status, "status", enabled);
        }
    };
    Window_MenuCommand.prototype.addFormationCommand = function () {
        if (this.needsCommand("formation")) {
            var enabled = this.isFormationEnabled();
            this.addCommand(TextManager_1.TextManager.formation, "formation", enabled);
        }
    };
    Window_MenuCommand.prototype.addOriginalCommands = function () {
        //
    };
    // オプション機能は非サポート要件なので、コメントアウト
    // addOptionsCommand() {
    // 	if (this.needsCommand("options")) {
    // 		const enabled = this.isOptionsEnabled();
    // 		this.addCommand(TextManager.options, "options", enabled);
    // 	}
    // }
    // セーブ機能は非サポート要件なので、コメントアウト
    // addSaveCommand() {
    // 	if (this.needsCommand("save")) {
    // 		const enabled = this.isSaveEnabled();
    // 		this.addCommand(TextManager.save, "save", enabled);
    // 	}
    // }
    Window_MenuCommand.prototype.addGameEndCommand = function () {
        var enabled = this.isGameEndEnabled();
        this.addCommand(TextManager_1.TextManager.gameEnd, "gameEnd", enabled);
    };
    Window_MenuCommand.prototype.needsCommand = function (name) {
        var flags = globals_1.$dataSystem.menuCommands;
        if (flags) {
            switch (name) {
                case "item":
                    return flags[0];
                case "skill":
                    return flags[1];
                case "equip":
                    return flags[2];
                case "status":
                    return flags[3];
                case "formation":
                    return flags[4];
                case "save":
                    return flags[5];
            }
        }
        return true;
    };
    Window_MenuCommand.prototype.areMainCommandsEnabled = function () {
        return globals_1.$gameParty.exists();
    };
    Window_MenuCommand.prototype.isFormationEnabled = function () {
        return globals_1.$gameParty.size() >= 2 && globals_1.$gameSystem.isFormationEnabled();
    };
    Window_MenuCommand.prototype.isOptionsEnabled = function () {
        return true;
    };
    Window_MenuCommand.prototype.isSaveEnabled = function () {
        return !DataManager_1.DataManager.isEventTest() && globals_1.$gameSystem.isSaveEnabled();
    };
    Window_MenuCommand.prototype.isGameEndEnabled = function () {
        return true;
    };
    Window_MenuCommand.prototype.processOk = function () {
        Window_MenuCommand._lastCommandSymbol = this.currentSymbol();
        WindowCommand_1.Window_Command.prototype.processOk.call(this);
    };
    Window_MenuCommand.prototype.selectLast = function () {
        this.selectSymbol(Window_MenuCommand._lastCommandSymbol);
    };
    Window_MenuCommand._lastCommandSymbol = null;
    return Window_MenuCommand;
}(WindowCommand_1.Window_Command));
exports.Window_MenuCommand = Window_MenuCommand;

},{"../managers/DataManager":36,"../managers/TextManager":42,"../managers/globals":43,"./WindowCommand":120}],135:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_MenuStatus = void 0;
var Graphics_1 = require("../core/Graphics");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var WindowBase_1 = require("./WindowBase");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_MenuStatus = /** @class */ (function (_super) {
    __extends(Window_MenuStatus, _super);
    function Window_MenuStatus() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_MenuStatus.prototype.initialize = function (x, y) {
        var width = this.windowWidth();
        var height = this.windowHeight();
        _super.prototype.initialize.call(this, x, y, width, height);
        this._formationMode = false;
        this._pendingIndex = -1;
        this.refresh();
    };
    Window_MenuStatus.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth - 240;
    };
    Window_MenuStatus.prototype.windowHeight = function () {
        return Graphics_1.Graphics.boxHeight;
    };
    Window_MenuStatus.prototype.maxItems = function () {
        return globals_1.$gameParty.size();
    };
    Window_MenuStatus.prototype.itemHeight = function () {
        var clientHeight = this.height - this.padding * 2;
        return Math.floor(clientHeight / this.numVisibleRows());
    };
    Window_MenuStatus.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_MenuStatus.prototype.loadImages = function () {
        globals_1.$gameParty.members().forEach(function (actor) {
            ImageManager_1.ImageManager.reserveFace(actor.faceName());
        });
    };
    Window_MenuStatus.prototype.drawItem = function (index) {
        this.drawItemBackground(index);
        this.drawItemImage(index);
        this.drawItemStatus(index);
    };
    Window_MenuStatus.prototype.drawItemBackground = function (index) {
        if (index === this._pendingIndex) {
            var rect = this.itemRect(index);
            var color = this.pendingColor();
            this.changePaintOpacity(false);
            this.contents.fillRect(rect.x, rect.y, rect.width, rect.height, color);
            this.changePaintOpacity(true);
        }
    };
    Window_MenuStatus.prototype.drawItemImage = function (index) {
        var actor = globals_1.$gameParty.members()[index];
        var rect = this.itemRect(index);
        this.changePaintOpacity(actor.isBattleMember());
        this.drawActorFace(actor, rect.x + 1, rect.y + 1, WindowBase_1.Window_Base._faceWidth, WindowBase_1.Window_Base._faceHeight);
        this.changePaintOpacity(true);
    };
    Window_MenuStatus.prototype.drawItemStatus = function (index) {
        var actor = globals_1.$gameParty.members()[index];
        var rect = this.itemRect(index);
        var x = rect.x + 162;
        var y = rect.y + rect.height / 2 - this.lineHeight() * 1.5;
        var width = rect.width - x - this.textPadding();
        this.drawActorSimpleStatus(actor, x, y, width);
    };
    Window_MenuStatus.prototype.processOk = function () {
        WindowSelectable_1.Window_Selectable.prototype.processOk.call(this);
        globals_1.$gameParty.setMenuActor(globals_1.$gameParty.members()[this.index()]);
    };
    Window_MenuStatus.prototype.isCurrentItemEnabled = function () {
        if (this._formationMode) {
            var actor = globals_1.$gameParty.members()[this.index()];
            return actor && actor.isFormationChangeOk();
        }
        else {
            return true;
        }
    };
    Window_MenuStatus.prototype.selectLast = function () {
        this.select(globals_1.$gameParty.menuActor().index() || 0);
    };
    Window_MenuStatus.prototype.formationMode = function () {
        return this._formationMode;
    };
    Window_MenuStatus.prototype.setFormationMode = function (formationMode) {
        this._formationMode = formationMode;
    };
    Window_MenuStatus.prototype.pendingIndex = function () {
        return this._pendingIndex;
    };
    Window_MenuStatus.prototype.setPendingIndex = function (index) {
        var lastPendingIndex = this._pendingIndex;
        this._pendingIndex = index;
        this.redrawItem(this._pendingIndex);
        this.redrawItem(lastPendingIndex);
    };
    return Window_MenuStatus;
}(WindowSelectable_1.Window_Selectable));
exports.Window_MenuStatus = Window_MenuStatus;

},{"../core/Graphics":14,"../managers/ImageManager":37,"../managers/globals":43,"./WindowBase":112,"./WindowSelectable":142}],136:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Message = void 0;
var Graphics_1 = require("../core/Graphics");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var WindowBase_1 = require("./WindowBase");
var WindowChoiceList_1 = require("./WindowChoiceList");
var WindowEventItem_1 = require("./WindowEventItem");
var WindowGold_1 = require("./WindowGold");
var WindowNumberInput_1 = require("./WindowNumberInput");
var Window_Message = /** @class */ (function (_super) {
    __extends(Window_Message, _super);
    function Window_Message() {
        return _super.call(this) || this;
        // if (Object.getPrototypeOf(this) === Window_Message.prototype) {
        // 	this.initialize();
        // }
    }
    Window_Message.prototype.initialize = function () {
        var width = this.windowWidth();
        var height = this.windowHeight();
        var x = (Graphics_1.Graphics.boxWidth - width) / 2;
        _super.prototype.initialize.call(this, x, 0, width, height);
        this.openness = 0;
        this.initMembers();
        this.createSubWindows();
        this.updatePlacement();
    };
    Window_Message.prototype.initMembers = function () {
        this._imageReservationId = Utils_1.Utils.generateRuntimeId();
        this._background = 0;
        this._positionType = 2;
        this._waitCount = 0;
        this._faceBitmap = null;
        this._textState = null;
        this.clearFlags();
    };
    Window_Message.prototype.subWindows = function () {
        return [this._goldWindow, this._choiceWindow, this._numberWindow, this._itemWindow];
    };
    Window_Message.prototype.createSubWindows = function () {
        this._goldWindow = new WindowGold_1.Window_Gold(0, 0);
        this._goldWindow.x = Graphics_1.Graphics.boxWidth - this._goldWindow.width;
        this._goldWindow.openness = 0;
        this._choiceWindow = new WindowChoiceList_1.Window_ChoiceList(this);
        this._numberWindow = new WindowNumberInput_1.Window_NumberInput(this);
        this._itemWindow = new WindowEventItem_1.Window_EventItem(this);
    };
    Window_Message.prototype.windowWidth = function () {
        return Graphics_1.Graphics.boxWidth;
    };
    Window_Message.prototype.windowHeight = function () {
        return this.fittingHeight(this.numVisibleRows());
    };
    Window_Message.prototype.clearFlags = function () {
        this._showFast = false;
        this._lineShowFast = false;
        this._pauseSkip = false;
    };
    Window_Message.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_Message.prototype.update = function () {
        this.checkToNotClose();
        _super.prototype.update.call(this);
        while (!this.isOpening() && !this.isClosing()) {
            if (this.updateWait()) {
                return;
            }
            else if (this.updateLoading()) {
                return;
            }
            else if (this.updateInput()) {
                return;
            }
            else if (this.updateMessage()) {
                return;
            }
            else if (this.canStart()) {
                this.startMessage();
            }
            else {
                this.startInput();
                return;
            }
        }
    };
    Window_Message.prototype.checkToNotClose = function () {
        if (this.isClosing() && this.isOpen()) {
            if (this.doesContinue()) {
                this.open();
            }
        }
    };
    Window_Message.prototype.canStart = function () {
        return globals_1.$gameMessage.hasText() && !globals_1.$gameMessage.scrollMode();
    };
    Window_Message.prototype.startMessage = function () {
        this._textState = {};
        this._textState.index = 0;
        this._textState.text = this.convertEscapeCharacters(globals_1.$gameMessage.allText());
        this.newPage(this._textState);
        this.updatePlacement();
        this.updateBackground();
        this.open();
    };
    Window_Message.prototype.updatePlacement = function () {
        this._positionType = globals_1.$gameMessage.positionType();
        this.y = (this._positionType * (Graphics_1.Graphics.boxHeight - this.height)) / 2;
        this._goldWindow.y = this.y > 0 ? 0 : Graphics_1.Graphics.boxHeight - this._goldWindow.height;
    };
    Window_Message.prototype.updateBackground = function () {
        this._background = globals_1.$gameMessage.background();
        this.setBackgroundType(this._background);
    };
    Window_Message.prototype.terminateMessage = function () {
        this.close();
        this._goldWindow.close();
        globals_1.$gameMessage.clear();
    };
    Window_Message.prototype.updateWait = function () {
        if (this._waitCount > 0) {
            this._waitCount--;
            return true;
        }
        else {
            return false;
        }
    };
    Window_Message.prototype.updateLoading = function () {
        if (this._faceBitmap) {
            if (this._faceBitmap.isReady()) {
                this.drawMessageFace();
                this._faceBitmap = null;
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    };
    Window_Message.prototype.updateInput = function () {
        if (this.isAnySubWindowActive()) {
            return true;
        }
        if (this.pause) {
            if (this.isTriggered()) {
                // Input.update();
                this.pause = false;
                if (!this._textState) {
                    this.terminateMessage();
                }
            }
            return true;
        }
        return false;
    };
    Window_Message.prototype.isAnySubWindowActive = function () {
        return this._choiceWindow.active || this._numberWindow.active || this._itemWindow.active;
    };
    Window_Message.prototype.updateMessage = function () {
        if (this._textState) {
            while (!this.isEndOfText(this._textState)) {
                if (this.needsNewPage(this._textState)) {
                    this.newPage(this._textState);
                }
                this.updateShowFast();
                this.processCharacter(this._textState);
                if (!this._showFast && !this._lineShowFast) {
                    break;
                }
                if (this.pause || this._waitCount > 0) {
                    break;
                }
            }
            if (this.isEndOfText(this._textState)) {
                this.onEndOfText();
            }
            return true;
        }
        else {
            return false;
        }
    };
    Window_Message.prototype.onEndOfText = function () {
        if (!this.startInput()) {
            if (!this._pauseSkip) {
                this.startPause();
            }
            else {
                this.terminateMessage();
            }
        }
        this._textState = null;
    };
    Window_Message.prototype.startInput = function () {
        if (globals_1.$gameMessage.isChoice()) {
            this._choiceWindow.start();
            return true;
        }
        else if (globals_1.$gameMessage.isNumberInput()) {
            this._numberWindow.start();
            return true;
        }
        else if (globals_1.$gameMessage.isItemChoice()) {
            this._itemWindow.start();
            return true;
        }
        else {
            return false;
        }
    };
    Window_Message.prototype.isTriggered = function () {
        return (
        /* Input.isRepeated("ok") || Input.isRepeated("cancel") ||*/
        TouchInput_1.TouchInput.isRepeated());
    };
    Window_Message.prototype.doesContinue = function () {
        return globals_1.$gameMessage.hasText() && !globals_1.$gameMessage.scrollMode() && !this.areSettingsChanged();
    };
    Window_Message.prototype.areSettingsChanged = function () {
        return this._background !== globals_1.$gameMessage.background() || this._positionType !== globals_1.$gameMessage.positionType();
    };
    Window_Message.prototype.updateShowFast = function () {
        if (this.isTriggered()) {
            this._showFast = true;
        }
    };
    Window_Message.prototype.newPage = function (textState) {
        this.contents.clear();
        this.resetFontSettings();
        this.clearFlags();
        this.loadMessageFace();
        textState.x = this.newLineX();
        textState.y = 0;
        textState.left = this.newLineX();
        textState.height = this.calcTextHeight(textState, false);
    };
    Window_Message.prototype.loadMessageFace = function () {
        this._faceBitmap = ImageManager_1.ImageManager.reserveFace(globals_1.$gameMessage.faceName(), 0, this._imageReservationId);
    };
    Window_Message.prototype.drawMessageFace = function () {
        this.drawFace(globals_1.$gameMessage.faceName(), globals_1.$gameMessage.faceIndex(), 0, 0);
        ImageManager_1.ImageManager.releaseReservation(this._imageReservationId);
    };
    Window_Message.prototype.newLineX = function () {
        return globals_1.$gameMessage.faceName() === "" ? 0 : 168;
    };
    Window_Message.prototype.processNewLine = function (textState) {
        this._lineShowFast = false;
        WindowBase_1.Window_Base.prototype.processNewLine.call(this, textState);
        if (this.needsNewPage(textState)) {
            this.startPause();
        }
    };
    Window_Message.prototype.processNewPage = function (textState) {
        WindowBase_1.Window_Base.prototype.processNewPage.call(this, textState);
        if (textState.text[textState.index] === "\n") {
            textState.index++;
        }
        textState.y = this.contents.height;
        this.startPause();
    };
    Window_Message.prototype.isEndOfText = function (textState) {
        return textState.index >= textState.text.length;
    };
    Window_Message.prototype.needsNewPage = function (textState) {
        return !this.isEndOfText(textState) && textState.y + textState.height > this.contents.height;
    };
    Window_Message.prototype.processEscapeCharacter = function (code, textState) {
        switch (code) {
            case "$":
                this._goldWindow.open();
                break;
            case ".":
                this.startWait(15);
                break;
            case "|":
                this.startWait(60);
                break;
            case "!":
                this.startPause();
                break;
            case ">":
                this._lineShowFast = true;
                break;
            case "<":
                this._lineShowFast = false;
                break;
            case "^":
                this._pauseSkip = true;
                break;
            default:
                WindowBase_1.Window_Base.prototype.processEscapeCharacter.call(this, code, textState);
                break;
        }
    };
    Window_Message.prototype.startWait = function (count) {
        this._waitCount = count;
    };
    Window_Message.prototype.startPause = function () {
        this.startWait(10);
        this.pause = true;
    };
    return Window_Message;
}(WindowBase_1.Window_Base));
exports.Window_Message = Window_Message;

},{"../core/Graphics":14,"../core/TouchInput":27,"../core/Utils":28,"../managers/ImageManager":37,"../managers/globals":43,"./WindowBase":112,"./WindowChoiceList":119,"./WindowEventItem":125,"./WindowGold":127,"./WindowNumberInput":137}],137:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_NumberInput = void 0;
var Graphics_1 = require("../core/Graphics");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var globals_1 = require("../managers/globals");
var ImageManager_1 = require("../managers/ImageManager");
var SoundManager_1 = require("../managers/SoundManager");
var SpriteButton_1 = require("../sprites/SpriteButton");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_NumberInput = /** @class */ (function (_super) {
    __extends(Window_NumberInput, _super);
    function Window_NumberInput(messageWindow) {
        return _super.call(this, messageWindow) || this;
        // if (Object.getPrototypeOf(this) === Window_NumberInput.prototype) {
        // 	this.initialize(param.messageWindow);
        // }
    }
    Window_NumberInput.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this._messageWindow = args[0];
        _super.prototype.initialize.call(this, 0, 0, 0, 0);
        this._number = 0;
        this._maxDigits = 1;
        this.openness = 0;
        this.createButtons();
        this.deactivate();
    };
    Window_NumberInput.prototype.start = function () {
        this._maxDigits = globals_1.$gameMessage.numInputMaxDigits();
        this._number = globals_1.$gameVariables.value(globals_1.$gameMessage.numInputVariableId());
        this._number = Utils_1.Utils.clamp(this._number, 0, Math.pow(10, this._maxDigits) - 1);
        this.updatePlacement();
        this.placeButtons();
        this.updateButtonsVisiblity();
        this.createContents();
        this.refresh();
        this.open();
        this.activate();
        this.select(0);
    };
    Window_NumberInput.prototype.updatePlacement = function () {
        var messageY = this._messageWindow.y;
        var spacing = 8;
        this.width = this.windowWidth();
        this.height = this.windowHeight();
        this.x = (Graphics_1.Graphics.boxWidth - this.width) / 2;
        if (messageY >= Graphics_1.Graphics.boxHeight / 2) {
            this.y = messageY - this.height - spacing;
        }
        else {
            this.y = messageY + this._messageWindow.height + spacing;
        }
    };
    Window_NumberInput.prototype.windowWidth = function () {
        return this.maxCols() * this.itemWidth() + this.padding * 2;
    };
    Window_NumberInput.prototype.windowHeight = function () {
        return this.fittingHeight(1);
    };
    Window_NumberInput.prototype.maxCols = function () {
        return this._maxDigits;
    };
    Window_NumberInput.prototype.maxItems = function () {
        return this._maxDigits;
    };
    Window_NumberInput.prototype.spacing = function () {
        return 0;
    };
    Window_NumberInput.prototype.itemWidth = function () {
        return 32;
    };
    Window_NumberInput.prototype.createButtons = function () {
        var bitmap = ImageManager_1.ImageManager.loadSystem("ButtonSet");
        var buttonWidth = 48;
        var buttonHeight = 48;
        this._buttons = [];
        for (var i = 0; i < 3; i++) {
            var button = new SpriteButton_1.Sprite_Button();
            var x = buttonWidth * [1, 2, 4][i];
            var w = buttonWidth * (i === 2 ? 2 : 1);
            button.bitmap = bitmap;
            button.setColdFrame(x, 0, w, buttonHeight);
            button.setHotFrame(x, buttonHeight, w, buttonHeight);
            button.visible = false;
            this._buttons.push(button);
            this.addChild(button);
        }
        this._buttons[0].setClickHandler(this.onButtonDown.bind(this));
        this._buttons[1].setClickHandler(this.onButtonUp.bind(this));
        this._buttons[2].setClickHandler(this.onButtonOk.bind(this));
    };
    Window_NumberInput.prototype.placeButtons = function () {
        var numButtons = this._buttons.length;
        var spacing = 16;
        var totalWidth = -spacing;
        for (var i = 0; i < numButtons; i++) {
            totalWidth += this._buttons[i].width + spacing;
        }
        var x = (this.width - totalWidth) / 2;
        for (var j = 0; j < numButtons; j++) {
            var button = this._buttons[j];
            button.x = x;
            button.y = this.buttonY();
            x += button.width + spacing;
        }
    };
    Window_NumberInput.prototype.updateButtonsVisiblity = function () {
        if (TouchInput_1.TouchInput.date > /* Input.date*/ 0) {
            this.showButtons();
        }
        else {
            this.hideButtons();
        }
    };
    Window_NumberInput.prototype.showButtons = function () {
        for (var i = 0; i < this._buttons.length; i++) {
            this._buttons[i].visible = true;
        }
    };
    Window_NumberInput.prototype.hideButtons = function () {
        for (var i = 0; i < this._buttons.length; i++) {
            this._buttons[i].visible = false;
        }
    };
    Window_NumberInput.prototype.buttonY = function () {
        var spacing = 8;
        if (this._messageWindow.y >= Graphics_1.Graphics.boxHeight / 2) {
            return 0 - this._buttons[0].height - spacing;
        }
        else {
            return this.height + spacing;
        }
    };
    Window_NumberInput.prototype.update = function () {
        _super.prototype.update.call(this);
        this.processDigitChange();
    };
    Window_NumberInput.prototype.processDigitChange = function () {
        if (this.isOpenAndActive()) {
            // if (Input.isRepeated("up")) {
            // 	this.changeDigit(true);
            // } else if (Input.isRepeated("down")) {
            // 	this.changeDigit(false);
            // }
        }
    };
    Window_NumberInput.prototype.changeDigit = function (up) {
        var index = this.index();
        var place = Math.pow(10, this._maxDigits - 1 - index);
        var n = Math.floor(this._number / place) % 10;
        this._number -= n * place;
        if (up) {
            n = (n + 1) % 10;
        }
        else {
            n = (n + 9) % 10;
        }
        this._number += n * place;
        this.refresh();
        SoundManager_1.SoundManager.playCursor();
    };
    Window_NumberInput.prototype.isTouchOkEnabled = function () {
        return false;
    };
    Window_NumberInput.prototype.isOkEnabled = function () {
        return true;
    };
    Window_NumberInput.prototype.isCancelEnabled = function () {
        return false;
    };
    Window_NumberInput.prototype.isOkTriggered = function () {
        // return Input.isTriggered("ok");
        return false;
    };
    Window_NumberInput.prototype.processOk = function () {
        SoundManager_1.SoundManager.playOk();
        globals_1.$gameVariables.setValue(globals_1.$gameMessage.numInputVariableId(), this._number);
        this._messageWindow.terminateMessage();
        this.updateInputData();
        this.deactivate();
        this.close();
    };
    Window_NumberInput.prototype.drawItem = function (index) {
        var rect = this.itemRect(index);
        var align = "center";
        var s = Utils_1.Utils.padZero(this._number, this._maxDigits);
        var c = s.slice(index, index + 1);
        this.resetTextColor();
        this.drawText(c, rect.x, rect.y, rect.width, align);
    };
    Window_NumberInput.prototype.onButtonUp = function () {
        this.changeDigit(true);
    };
    Window_NumberInput.prototype.onButtonDown = function () {
        this.changeDigit(false);
    };
    Window_NumberInput.prototype.onButtonOk = function () {
        this.processOk();
        this.hideButtons();
    };
    return Window_NumberInput;
}(WindowSelectable_1.Window_Selectable));
exports.Window_NumberInput = Window_NumberInput;

},{"../core/Graphics":14,"../core/TouchInput":27,"../core/Utils":28,"../managers/ImageManager":37,"../managers/SoundManager":40,"../managers/globals":43,"../sprites/SpriteButton":98,"./WindowSelectable":142}],138:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Options = void 0;
var Graphics_1 = require("../core/Graphics");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_Options = /** @class */ (function (_super) {
    __extends(Window_Options, _super);
    function Window_Options() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_Options.prototype.initialize = function () {
        _super.prototype.initialize.call(this, 0, 0);
        this.updatePlacement();
    };
    Window_Options.prototype.windowWidth = function () {
        return 400;
    };
    Window_Options.prototype.windowHeight = function () {
        return this.fittingHeight(Math.min(this.numVisibleRows(), 12));
    };
    Window_Options.prototype.updatePlacement = function () {
        this.x = (Graphics_1.Graphics.boxWidth - this.width) / 2;
        this.y = (Graphics_1.Graphics.boxHeight - this.height) / 2;
    };
    Window_Options.prototype.makeCommandList = function () {
        this.addGeneralOptions();
        this.addVolumeOptions();
    };
    Window_Options.prototype.addGeneralOptions = function () {
        this.addCommand(TextManager_1.TextManager.alwaysDash, "alwaysDash");
        this.addCommand(TextManager_1.TextManager.commandRemember, "commandRemember");
    };
    Window_Options.prototype.addVolumeOptions = function () {
        this.addCommand(TextManager_1.TextManager.bgmVolume, "bgmVolume");
        this.addCommand(TextManager_1.TextManager.bgsVolume, "bgsVolume");
        this.addCommand(TextManager_1.TextManager.meVolume, "meVolume");
        this.addCommand(TextManager_1.TextManager.seVolume, "seVolume");
    };
    Window_Options.prototype.drawItem = function (index) {
        var rect = this.itemRectForText(index);
        var statusWidth = this.statusWidth();
        var titleWidth = rect.width - statusWidth;
        this.resetTextColor();
        this.changePaintOpacity(this.isCommandEnabled(index));
        this.drawText(this.commandName(index), rect.x, rect.y, titleWidth, "left");
        this.drawText(this.statusText(index), titleWidth, rect.y, statusWidth, "right");
    };
    Window_Options.prototype.statusWidth = function () {
        return 120;
    };
    Window_Options.prototype.statusText = function (index) {
        var symbol = this.commandSymbol(index);
        var value = this.getConfigValue(symbol);
        if (this.isVolumeSymbol(symbol)) {
            return this.volumeStatusText(value);
        }
        else {
            return this.booleanStatusText(value);
        }
    };
    Window_Options.prototype.isVolumeSymbol = function (symbol) {
        return symbol.indexOf("Volume") !== -1;
    };
    Window_Options.prototype.booleanStatusText = function (value) {
        return value ? "ON" : "OFF";
    };
    Window_Options.prototype.volumeStatusText = function (value) {
        return value + "%";
    };
    Window_Options.prototype.processOk = function () {
        var index = this.index();
        var symbol = this.commandSymbol(index);
        var value = this.getConfigValue(symbol);
        if (this.isVolumeSymbol(symbol)) {
            value += this.volumeOffset();
            if (value > 100) {
                value = 0;
            }
            value = value.clamp(0, 100);
            this.changeValue(symbol, value);
        }
        else {
            this.changeValue(symbol, !value);
        }
    };
    Window_Options.prototype.cursorRight = function (_wrap) {
        var index = this.index();
        var symbol = this.commandSymbol(index);
        var value = this.getConfigValue(symbol);
        if (this.isVolumeSymbol(symbol)) {
            value += this.volumeOffset();
            value = value.clamp(0, 100);
            this.changeValue(symbol, value);
        }
        else {
            this.changeValue(symbol, true);
        }
    };
    Window_Options.prototype.cursorLeft = function (_wrap) {
        var index = this.index();
        var symbol = this.commandSymbol(index);
        var value = this.getConfigValue(symbol);
        if (this.isVolumeSymbol(symbol)) {
            value -= this.volumeOffset();
            value = value.clamp(0, 100);
            this.changeValue(symbol, value);
        }
        else {
            this.changeValue(symbol, false);
        }
    };
    Window_Options.prototype.volumeOffset = function () {
        return 20;
    };
    Window_Options.prototype.changeValue = function (symbol, value) {
        var lastValue = this.getConfigValue(symbol);
        if (lastValue !== value) {
            this.setConfigValue(symbol, value);
            this.redrawItem(this.findSymbol(symbol));
            SoundManager_1.SoundManager.playCursor();
        }
    };
    Window_Options.prototype.getConfigValue = function (_symbol) {
        // オプション設定を保存する手段がないためConfigManagerは未実装なので、一旦0だけ返す
        // return ConfigManager[symbol];
        return 0;
    };
    Window_Options.prototype.setConfigValue = function (_symbol, _volume) {
        // オプション設定を保存する手段がないためConfigManagerは未実装なので、コメントアウト
        // ConfigManager[symbol] = volume;
    };
    return Window_Options;
}(WindowCommand_1.Window_Command));
exports.Window_Options = Window_Options;

},{"../core/Graphics":14,"../managers/SoundManager":40,"../managers/TextManager":42,"./WindowCommand":120}],139:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_PartyCommand = void 0;
var Graphics_1 = require("../core/Graphics");
var BattleManager_1 = require("../managers/BattleManager");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_PartyCommand = /** @class */ (function (_super) {
    __extends(Window_PartyCommand, _super);
    function Window_PartyCommand() {
        return _super.call(this) || this;
    }
    Window_PartyCommand.prototype.initialize = function () {
        var y = Graphics_1.Graphics.boxHeight - this.windowHeight();
        _super.prototype.initialize.call(this, 0, y);
        this.openness = 0;
        this.deactivate();
    };
    Window_PartyCommand.prototype.windowWidth = function () {
        return 192;
    };
    Window_PartyCommand.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_PartyCommand.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.fight, "fight");
        this.addCommand(TextManager_1.TextManager.escape, "escape", BattleManager_1.BattleManager.canEscape());
    };
    Window_PartyCommand.prototype.setup = function () {
        this.clearCommandList();
        this.makeCommandList();
        this.refresh();
        this.select(0);
        this.activate();
        this.open();
    };
    return Window_PartyCommand;
}(WindowCommand_1.Window_Command));
exports.Window_PartyCommand = Window_PartyCommand;

},{"../core/Graphics":14,"../managers/BattleManager":34,"../managers/TextManager":42,"./WindowCommand":120}],140:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_SavefileList = void 0;
var DataManager_1 = require("../managers/DataManager");
var TextManager_1 = require("../managers/TextManager");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_SavefileList = /** @class */ (function (_super) {
    __extends(Window_SavefileList, _super);
    function Window_SavefileList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_SavefileList.prototype.initialize = function (x, y, width, height) {
        WindowSelectable_1.Window_Selectable.prototype.initialize.call(this, x, y, width, height);
        this.activate();
        this._mode = null;
    };
    Window_SavefileList.prototype.setMode = function (mode) {
        this._mode = mode;
    };
    Window_SavefileList.prototype.maxItems = function () {
        return DataManager_1.DataManager.maxSavefiles();
    };
    Window_SavefileList.prototype.maxVisibleItems = function () {
        return 5;
    };
    Window_SavefileList.prototype.itemHeight = function () {
        var innerHeight = this.height - this.padding * 2;
        return Math.floor(innerHeight / this.maxVisibleItems());
    };
    Window_SavefileList.prototype.drawItem = function (index) {
        var id = index + 1;
        var valid = DataManager_1.DataManager.isThisGameFile(id);
        var info = DataManager_1.DataManager.loadSavefileInfo(id);
        var rect = this.itemRectForText(index);
        this.resetTextColor();
        if (this._mode === "load") {
            this.changePaintOpacity(valid);
        }
        this.drawFileId(id, rect.x, rect.y);
        if (info) {
            this.changePaintOpacity(valid);
            this.drawContents(info, rect, valid);
            this.changePaintOpacity(true);
        }
    };
    Window_SavefileList.prototype.drawFileId = function (id, x, y) {
        this.drawText(TextManager_1.TextManager.file + " " + id, x, y, 180);
    };
    Window_SavefileList.prototype.drawContents = function (info, rect, valid) {
        var bottom = rect.y + rect.height;
        if (rect.width >= 420) {
            this.drawGameTitle(info, rect.x + 192, rect.y, rect.width - 192);
            if (valid) {
                this.drawPartyCharacters(info, rect.x + 220, bottom - 4);
            }
        }
        var lineHeight = this.lineHeight();
        var y2 = bottom - lineHeight;
        if (y2 >= lineHeight) {
            this.drawPlaytime(info, rect.x, y2, rect.width);
        }
    };
    Window_SavefileList.prototype.drawGameTitle = function (info, x, y, width) {
        if (info.title) {
            this.drawText(info.title, x, y, width);
        }
    };
    Window_SavefileList.prototype.drawPartyCharacters = function (info, x, y) {
        if (info.characters) {
            for (var i = 0; i < info.characters.length; i++) {
                var data = info.characters[i];
                this.drawCharacter(data[0], data[1], x + i * 48, y);
            }
        }
    };
    Window_SavefileList.prototype.drawPlaytime = function (info, x, y, width) {
        if (info.playtime) {
            this.drawText(info.playtime, x, y, width, "right");
        }
    };
    Window_SavefileList.prototype.playOkSound = function () {
        //
    };
    return Window_SavefileList;
}(WindowSelectable_1.Window_Selectable));
exports.Window_SavefileList = Window_SavefileList;

},{"../managers/DataManager":36,"../managers/TextManager":42,"./WindowSelectable":142}],141:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ScrollText = void 0;
var Graphics_1 = require("../core/Graphics");
var TouchInput_1 = require("../core/TouchInput");
var globals_1 = require("../managers/globals");
var WindowBase_1 = require("./WindowBase");
var Window_ScrollText = /** @class */ (function (_super) {
    __extends(Window_ScrollText, _super);
    function Window_ScrollText() {
        return _super.call(this) || this;
        // if (Object.getPrototypeOf(this) === Window_ScrollText.prototype) {
        // 	this.initialize();
        // }
    }
    Window_ScrollText.prototype.initialize = function () {
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight;
        _super.prototype.initialize.call(this, 0, 0, width, height);
        this.opacity = 0;
        this.hide();
        this._text = "";
        this._allTextHeight = 0;
    };
    Window_ScrollText.prototype.update = function () {
        _super.prototype.update.call(this);
        if (globals_1.$gameMessage.scrollMode()) {
            if (this._text) {
                this.updateMessage();
            }
            if (!this._text && globals_1.$gameMessage.hasText()) {
                this.startMessage();
            }
        }
    };
    Window_ScrollText.prototype.startMessage = function () {
        this._text = globals_1.$gameMessage.allText();
        this.refresh();
        this.show();
    };
    Window_ScrollText.prototype.refresh = function () {
        // const textState = { index: 0 };
        var textState = {
            index: 0,
            text: this.convertEscapeCharacters(this._text)
        };
        this.resetFontSettings();
        this._allTextHeight = this.calcTextHeight(textState, true);
        this.createContents();
        this.origin.y = -this.height;
        this.drawTextEx(this._text, this.textPadding(), 1);
    };
    Window_ScrollText.prototype.contentsHeight = function () {
        return Math.max(this._allTextHeight, 1);
    };
    Window_ScrollText.prototype.updateMessage = function () {
        this.origin.y += this.scrollSpeed();
        if (this.origin.y >= this.contents.height) {
            this.terminateMessage();
        }
    };
    Window_ScrollText.prototype.scrollSpeed = function () {
        var speed = globals_1.$gameMessage.scrollSpeed() / 2;
        if (this.isFastForward()) {
            speed *= this.fastForwardRate();
        }
        return speed;
    };
    Window_ScrollText.prototype.isFastForward = function () {
        if (globals_1.$gameMessage.scrollNoFast()) {
            return false;
        }
        else {
            return (
            /* Input.isPressed("ok") || Input.isPressed("shift") ||*/
            TouchInput_1.TouchInput.isPressed());
        }
    };
    Window_ScrollText.prototype.fastForwardRate = function () {
        return 3;
    };
    Window_ScrollText.prototype.terminateMessage = function () {
        this._text = null;
        globals_1.$gameMessage.clear();
        this.hide();
    };
    return Window_ScrollText;
}(WindowBase_1.Window_Base));
exports.Window_ScrollText = Window_ScrollText;

},{"../core/Graphics":14,"../core/TouchInput":27,"../managers/globals":43,"./WindowBase":112}],142:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Selectable = void 0;
var Rectangle_1 = require("../core/Rectangle");
var TouchInput_1 = require("../core/TouchInput");
var Utils_1 = require("../core/Utils");
var SoundManager_1 = require("../managers/SoundManager");
var WindowBase_1 = require("./WindowBase");
var Window_Selectable = /** @class */ (function (_super) {
    __extends(Window_Selectable, _super);
    function Window_Selectable() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_Selectable.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        _super.prototype.initialize.apply(this, args);
        this._index = -1;
        this._cursorFixed = false;
        this._cursorAll = false;
        this._stayCount = 0;
        this._helpWindow = null;
        this._handlers = {};
        this._touching = false;
        this._scrollX = 0;
        this._scrollY = 0;
        this.deactivate();
    };
    Window_Selectable.prototype.index = function () {
        return this._index;
    };
    Window_Selectable.prototype.cursorFixed = function () {
        return this._cursorFixed;
    };
    Window_Selectable.prototype.setCursorFixed = function (cursorFixed) {
        this._cursorFixed = cursorFixed;
    };
    Window_Selectable.prototype.cursorAll = function () {
        return this._cursorAll;
    };
    Window_Selectable.prototype.setCursorAll = function (cursorAll) {
        this._cursorAll = cursorAll;
    };
    Window_Selectable.prototype.maxCols = function () {
        return 1;
    };
    Window_Selectable.prototype.maxItems = function () {
        return 0;
    };
    Window_Selectable.prototype.spacing = function () {
        return 12;
    };
    Window_Selectable.prototype.itemWidth = function () {
        return Math.floor((this.width - this.padding * 2 + this.spacing()) / this.maxCols() - this.spacing());
    };
    Window_Selectable.prototype.itemHeight = function () {
        return this.lineHeight();
    };
    Window_Selectable.prototype.maxRows = function () {
        return Math.max(Math.ceil(this.maxItems() / this.maxCols()), 1);
    };
    Window_Selectable.prototype.activate = function () {
        _super.prototype.activate.call(this);
        this.reselect();
    };
    Window_Selectable.prototype.deactivate = function () {
        _super.prototype.deactivate.call(this);
        this.reselect();
    };
    Window_Selectable.prototype.select = function (index) {
        this._index = index;
        this._stayCount = 0;
        this.ensureCursorVisible();
        this.updateCursor();
        this.callUpdateHelp();
    };
    Window_Selectable.prototype.deselect = function () {
        this.select(-1);
    };
    Window_Selectable.prototype.reselect = function () {
        this.select(this._index);
    };
    Window_Selectable.prototype.row = function () {
        return Math.floor(this.index() / this.maxCols());
    };
    Window_Selectable.prototype.topRow = function () {
        return Math.floor(this._scrollY / this.itemHeight());
    };
    Window_Selectable.prototype.maxTopRow = function () {
        return Math.max(0, this.maxRows() - this.maxPageRows());
    };
    Window_Selectable.prototype.setTopRow = function (row) {
        var scrollY = Utils_1.Utils.clamp(row, 0, this.maxTopRow()) * this.itemHeight();
        if (this._scrollY !== scrollY) {
            this._scrollY = scrollY;
            this.refresh();
            this.updateCursor();
        }
    };
    Window_Selectable.prototype.resetScroll = function () {
        this.setTopRow(0);
    };
    Window_Selectable.prototype.maxPageRows = function () {
        var pageHeight = this.height - this.padding * 2;
        return Math.floor(pageHeight / this.itemHeight());
    };
    Window_Selectable.prototype.maxPageItems = function () {
        return this.maxPageRows() * this.maxCols();
    };
    Window_Selectable.prototype.isHorizontal = function () {
        return this.maxPageRows() === 1;
    };
    Window_Selectable.prototype.bottomRow = function () {
        return Math.max(0, this.topRow() + this.maxPageRows() - 1);
    };
    Window_Selectable.prototype.setBottomRow = function (row) {
        this.setTopRow(row - (this.maxPageRows() - 1));
    };
    Window_Selectable.prototype.topIndex = function () {
        return this.topRow() * this.maxCols();
    };
    Window_Selectable.prototype.itemRect = function (index) {
        var rect = new Rectangle_1.Rectangle();
        var maxCols = this.maxCols();
        rect.width = this.itemWidth();
        rect.height = this.itemHeight();
        rect.x = (index % maxCols) * (rect.width + this.spacing()) - this._scrollX;
        rect.y = Math.floor(index / maxCols) * rect.height - this._scrollY;
        return rect;
    };
    Window_Selectable.prototype.itemRectForText = function (index) {
        var rect = this.itemRect(index);
        rect.x += this.textPadding();
        rect.width -= this.textPadding() * 2;
        return rect;
    };
    Window_Selectable.prototype.setHelpWindow = function (helpWindow) {
        this._helpWindow = helpWindow;
        this.callUpdateHelp();
    };
    Window_Selectable.prototype.showHelpWindow = function () {
        if (this._helpWindow) {
            this._helpWindow.show();
        }
    };
    Window_Selectable.prototype.hideHelpWindow = function () {
        if (this._helpWindow) {
            this._helpWindow.hide();
        }
    };
    Window_Selectable.prototype.setHandler = function (symbol, method) {
        this._handlers[symbol] = method;
    };
    Window_Selectable.prototype.isHandled = function (symbol) {
        return !!this._handlers[symbol];
    };
    Window_Selectable.prototype.callHandler = function (symbol) {
        if (this.isHandled(symbol)) {
            this._handlers[symbol]();
        }
    };
    Window_Selectable.prototype.isOpenAndActive = function () {
        return this.isOpen() && this.active;
    };
    Window_Selectable.prototype.isCursorMovable = function () {
        return this.isOpenAndActive() && !this._cursorFixed && !this._cursorAll && this.maxItems() > 0;
    };
    Window_Selectable.prototype.cursorDown = function (wrap) {
        var index = this.index();
        var maxItems = this.maxItems();
        var maxCols = this.maxCols();
        if (index < maxItems - maxCols || (wrap && maxCols === 1)) {
            this.select((index + maxCols) % maxItems);
        }
    };
    Window_Selectable.prototype.cursorUp = function (wrap) {
        var index = this.index();
        var maxItems = this.maxItems();
        var maxCols = this.maxCols();
        if (index >= maxCols || (wrap && maxCols === 1)) {
            this.select((index - maxCols + maxItems) % maxItems);
        }
    };
    Window_Selectable.prototype.cursorRight = function (wrap) {
        var index = this.index();
        var maxItems = this.maxItems();
        var maxCols = this.maxCols();
        if (maxCols >= 2 && (index < maxItems - 1 || (wrap && this.isHorizontal()))) {
            this.select((index + 1) % maxItems);
        }
    };
    Window_Selectable.prototype.cursorLeft = function (wrap) {
        var index = this.index();
        var maxItems = this.maxItems();
        var maxCols = this.maxCols();
        if (maxCols >= 2 && (index > 0 || (wrap && this.isHorizontal()))) {
            this.select((index - 1 + maxItems) % maxItems);
        }
    };
    Window_Selectable.prototype.cursorPagedown = function () {
        var index = this.index();
        var maxItems = this.maxItems();
        if (this.topRow() + this.maxPageRows() < this.maxRows()) {
            this.setTopRow(this.topRow() + this.maxPageRows());
            this.select(Math.min(index + this.maxPageItems(), maxItems - 1));
        }
    };
    Window_Selectable.prototype.cursorPageup = function () {
        var index = this.index();
        if (this.topRow() > 0) {
            this.setTopRow(this.topRow() - this.maxPageRows());
            this.select(Math.max(index - this.maxPageItems(), 0));
        }
    };
    Window_Selectable.prototype.scrollDown = function () {
        if (this.topRow() + 1 < this.maxRows()) {
            this.setTopRow(this.topRow() + 1);
        }
    };
    Window_Selectable.prototype.scrollUp = function () {
        if (this.topRow() > 0) {
            this.setTopRow(this.topRow() - 1);
        }
    };
    Window_Selectable.prototype.update = function () {
        // Window_Base.prototype.update.call(this);
        _super.prototype.update.call(this);
        this.updateArrows();
        this.processCursorMove();
        this.processHandling();
        this.processWheel();
        this.processTouch();
        this._stayCount++;
    };
    Window_Selectable.prototype.updateArrows = function () {
        var topRow = this.topRow();
        var maxTopRow = this.maxTopRow();
        this.downArrowVisible = maxTopRow > 0 && topRow < maxTopRow;
        this.upArrowVisible = topRow > 0;
    };
    Window_Selectable.prototype.processCursorMove = function () {
        if (this.isCursorMovable()) {
            // const lastIndex = this.index();
            // if (Input.isRepeated('down')) {
            // 	this.cursorDown(Input.isTriggered('down'));
            // }
            // if (Input.isRepeated('up')) {
            // 	this.cursorUp(Input.isTriggered('up'));
            // }
            // if (Input.isRepeated('right')) {
            // 	this.cursorRight(Input.isTriggered('right'));
            // }
            // if (Input.isRepeated('left')) {
            // 	this.cursorLeft(Input.isTriggered('left'));
            // }
            // if (!this.isHandled('pagedown') && Input.isTriggered('pagedown')) {
            // 	this.cursorPagedown();
            // }
            // if (!this.isHandled('pageup') && Input.isTriggered('pageup')) {
            // 	this.cursorPageup();
            // }
            // if (this.index() !== lastIndex) {
            // 	SoundManager.playCursor();
            // }
        }
    };
    Window_Selectable.prototype.processHandling = function () {
        if (this.isOpenAndActive()) {
            if (this.isOkEnabled() && this.isOkTriggered()) {
                this.processOk();
            }
            else if (this.isCancelEnabled() && this.isCancelTriggered()) {
                this.processCancel();
                // } else if (this.isHandled("pagedown") && Input.isTriggered("pagedown")) {
                // 	this.processPagedown();
                // } else if (this.isHandled("pageup") && Input.isTriggered("pageup")) {
                // 	this.processPageup();
            }
        }
    };
    Window_Selectable.prototype.processWheel = function () {
        if (this.isOpenAndActive()) {
            var threshold = 20;
            if (TouchInput_1.TouchInput.wheelY >= threshold) {
                this.scrollDown();
            }
            if (TouchInput_1.TouchInput.wheelY <= -threshold) {
                this.scrollUp();
            }
        }
    };
    Window_Selectable.prototype.processTouch = function () {
        if (this.isOpenAndActive()) {
            if (TouchInput_1.TouchInput.isTriggered() && this.isTouchedInsideFrame()) {
                this._touching = true;
                this.onTouch(true);
            }
            else if (TouchInput_1.TouchInput.isCancelled()) {
                if (this.isCancelEnabled()) {
                    this.processCancel();
                }
            }
            if (this._touching) {
                if (TouchInput_1.TouchInput.isPressed()) {
                    this.onTouch(false);
                }
                else {
                    this._touching = false;
                }
            }
        }
        else {
            this._touching = false;
        }
    };
    Window_Selectable.prototype.isTouchedInsideFrame = function () {
        var x = this.canvasToLocalX(TouchInput_1.TouchInput.x);
        var y = this.canvasToLocalY(TouchInput_1.TouchInput.y);
        return x >= 0 && y >= 0 && x < this.width && y < this.height;
    };
    Window_Selectable.prototype.onTouch = function (triggered) {
        var lastIndex = this.index();
        var x = this.canvasToLocalX(TouchInput_1.TouchInput.x);
        var y = this.canvasToLocalY(TouchInput_1.TouchInput.y);
        var hitIndex = this.hitTest(x, y);
        if (hitIndex >= 0) {
            if (hitIndex === this.index()) {
                if (triggered && this.isTouchOkEnabled()) {
                    this.processOk();
                }
            }
            else if (this.isCursorMovable()) {
                this.select(hitIndex);
            }
        }
        else if (this._stayCount >= 10) {
            if (y < this.padding) {
                this.cursorUp();
            }
            else if (y >= this.height - this.padding) {
                this.cursorDown();
            }
        }
        if (this.index() !== lastIndex) {
            SoundManager_1.SoundManager.playCursor();
        }
    };
    Window_Selectable.prototype.hitTest = function (x, y) {
        if (this.isContentsArea(x, y)) {
            var cx = x - this.padding;
            var cy = y - this.padding;
            var topIndex = this.topIndex();
            for (var i = 0; i < this.maxPageItems(); i++) {
                var index = topIndex + i;
                if (index < this.maxItems()) {
                    var rect = this.itemRect(index);
                    var right = rect.x + rect.width;
                    var bottom = rect.y + rect.height;
                    if (cx >= rect.x && cy >= rect.y && cx < right && cy < bottom) {
                        return index;
                    }
                }
            }
        }
        return -1;
    };
    Window_Selectable.prototype.isContentsArea = function (x, y) {
        var left = this.padding;
        var top = this.padding;
        var right = this.width - this.padding;
        var bottom = this.height - this.padding;
        return x >= left && y >= top && x < right && y < bottom;
    };
    Window_Selectable.prototype.isTouchOkEnabled = function () {
        return this.isOkEnabled();
    };
    Window_Selectable.prototype.isOkEnabled = function () {
        return this.isHandled("ok");
    };
    Window_Selectable.prototype.isCancelEnabled = function () {
        return this.isHandled("cancel");
    };
    Window_Selectable.prototype.isOkTriggered = function () {
        // return Input.isRepeated("ok");
        return false;
    };
    Window_Selectable.prototype.isCancelTriggered = function () {
        // return Input.isRepeated("cancel");
        return false;
    };
    Window_Selectable.prototype.processOk = function () {
        if (this.isCurrentItemEnabled()) {
            this.playOkSound();
            this.updateInputData();
            this.deactivate();
            this.callOkHandler();
        }
        else {
            this.playBuzzerSound();
        }
    };
    Window_Selectable.prototype.playOkSound = function () {
        SoundManager_1.SoundManager.playOk();
    };
    Window_Selectable.prototype.playBuzzerSound = function () {
        SoundManager_1.SoundManager.playBuzzer();
    };
    Window_Selectable.prototype.callOkHandler = function () {
        this.callHandler("ok");
    };
    Window_Selectable.prototype.processCancel = function () {
        SoundManager_1.SoundManager.playCancel();
        this.updateInputData();
        this.deactivate();
        this.callCancelHandler();
    };
    Window_Selectable.prototype.callCancelHandler = function () {
        this.callHandler("cancel");
    };
    Window_Selectable.prototype.processPageup = function () {
        SoundManager_1.SoundManager.playCursor();
        this.updateInputData();
        this.deactivate();
        this.callHandler("pageup");
    };
    Window_Selectable.prototype.processPagedown = function () {
        SoundManager_1.SoundManager.playCursor();
        this.updateInputData();
        this.deactivate();
        this.callHandler("pagedown");
    };
    Window_Selectable.prototype.updateInputData = function () {
        // Input.update();
        TouchInput_1.TouchInput.update();
    };
    Window_Selectable.prototype.updateCursor = function () {
        if (this._cursorAll) {
            var allRowsHeight = this.maxRows() * this.itemHeight();
            this.setCursorRect(0, 0, this.contents.width, allRowsHeight);
            this.setTopRow(0);
        }
        else if (this.isCursorVisible()) {
            var rect = this.itemRect(this.index());
            this.setCursorRect(rect.x, rect.y, rect.width, rect.height);
        }
        else {
            this.setCursorRect(0, 0, 0, 0);
        }
    };
    Window_Selectable.prototype.isCursorVisible = function () {
        var row = this.row();
        return row >= this.topRow() && row <= this.bottomRow();
    };
    Window_Selectable.prototype.ensureCursorVisible = function () {
        var row = this.row();
        if (row < this.topRow()) {
            this.setTopRow(row);
        }
        else if (row > this.bottomRow()) {
            this.setBottomRow(row);
        }
    };
    Window_Selectable.prototype.callUpdateHelp = function () {
        if (this.active && this._helpWindow) {
            this.updateHelp();
        }
    };
    Window_Selectable.prototype.updateHelp = function () {
        this._helpWindow.clear();
    };
    Window_Selectable.prototype.setHelpWindowItem = function (item) {
        if (this._helpWindow) {
            this._helpWindow.setItem(item);
        }
    };
    Window_Selectable.prototype.isCurrentItemEnabled = function () {
        return true;
    };
    Window_Selectable.prototype.drawAllItems = function () {
        var topIndex = this.topIndex();
        for (var i = 0; i < this.maxPageItems(); i++) {
            var index = topIndex + i;
            if (index < this.maxItems()) {
                this.drawItem(index);
            }
        }
    };
    Window_Selectable.prototype.drawItem = function (_index) {
        // nothing to do
    };
    Window_Selectable.prototype.clearItem = function (index) {
        var rect = this.itemRect(index);
        this.contents.clearRect(rect.x, rect.y, rect.width, rect.height);
    };
    Window_Selectable.prototype.redrawItem = function (index) {
        if (index >= 0) {
            this.clearItem(index);
            this.drawItem(index);
        }
    };
    Window_Selectable.prototype.redrawCurrentItem = function () {
        this.redrawItem(this.index());
    };
    Window_Selectable.prototype.refresh = function () {
        if (this.contents) {
            this.contents.clear();
            this.drawAllItems();
        }
    };
    return Window_Selectable;
}(WindowBase_1.Window_Base));
exports.Window_Selectable = Window_Selectable;

},{"../core/Rectangle":18,"../core/TouchInput":27,"../core/Utils":28,"../managers/SoundManager":40,"./WindowBase":112}],143:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ShopBuy = void 0;
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_ShopBuy = /** @class */ (function (_super) {
    __extends(Window_ShopBuy, _super);
    function Window_ShopBuy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_ShopBuy.prototype.initialize = function (x, y, height, shopGoods) {
        var width = this.windowWidth();
        _super.prototype.initialize.call(this, x, y, width, height);
        this._shopGoods = shopGoods;
        this._money = 0;
        this.refresh();
        this.select(0);
    };
    Window_ShopBuy.prototype.windowWidth = function () {
        return 456;
    };
    Window_ShopBuy.prototype.maxItems = function () {
        return this._data ? this._data.length : 1;
    };
    Window_ShopBuy.prototype.item = function () {
        return this._data[this.index()];
    };
    Window_ShopBuy.prototype.setMoney = function (money) {
        this._money = money;
        this.refresh();
    };
    Window_ShopBuy.prototype.isCurrentItemEnabled = function () {
        return this.isEnabled(this._data[this.index()]);
    };
    Window_ShopBuy.prototype.price = function (item) {
        return this._price[this._data.indexOf(item)] || 0;
    };
    Window_ShopBuy.prototype.isEnabled = function (item) {
        return item && this.price(item) <= this._money && !globals_1.$gameParty.hasMaxItems(item);
    };
    Window_ShopBuy.prototype.refresh = function () {
        this.makeItemList();
        this.createContents();
        this.drawAllItems();
    };
    Window_ShopBuy.prototype.makeItemList = function () {
        this._data = [];
        this._price = [];
        this._shopGoods.forEach(function (goods) {
            var item = null;
            switch (goods[0]) {
                case 0:
                    item = globals_1.$dataItems[goods[1]];
                    break;
                case 1:
                    item = globals_1.$dataWeapons[goods[1]];
                    break;
                case 2:
                    item = globals_1.$dataArmors[goods[1]];
                    break;
            }
            if (item) {
                this._data.push(item);
                this._price.push(goods[2] === 0 ? item.price : goods[3]);
            }
        }, this);
    };
    Window_ShopBuy.prototype.drawItem = function (index) {
        var item = this._data[index];
        var rect = this.itemRect(index);
        var priceWidth = 96;
        rect.width -= this.textPadding();
        this.changePaintOpacity(this.isEnabled(item));
        this.drawItemName(item, rect.x, rect.y, rect.width - priceWidth);
        this.drawText(this.price(item), rect.x + rect.width - priceWidth, rect.y, priceWidth, "right");
        this.changePaintOpacity(true);
    };
    Window_ShopBuy.prototype.setStatusWindow = function (statusWindow) {
        this._statusWindow = statusWindow;
        this.callUpdateHelp();
    };
    Window_ShopBuy.prototype.updateHelp = function () {
        this.setHelpWindowItem(this.item());
        if (this._statusWindow) {
            this._statusWindow.setItem(this.item());
        }
    };
    return Window_ShopBuy;
}(WindowSelectable_1.Window_Selectable));
exports.Window_ShopBuy = Window_ShopBuy;

},{"../managers/globals":43,"./WindowSelectable":142}],144:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ShopCommand = void 0;
var TextManager_1 = require("../managers/TextManager");
var WindowHorzCommand_1 = require("./WindowHorzCommand");
var Window_ShopCommand = /** @class */ (function (_super) {
    __extends(Window_ShopCommand, _super);
    function Window_ShopCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_ShopCommand.prototype.initialize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var width = args[0];
        var purchaseOnly = args[1];
        this._windowWidth = width;
        this._purchaseOnly = purchaseOnly;
        _super.prototype.initialize.call(this, 0, 0);
    };
    Window_ShopCommand.prototype.windowWidth = function () {
        return this._windowWidth;
    };
    Window_ShopCommand.prototype.maxCols = function () {
        return 3;
    };
    Window_ShopCommand.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.buy, "buy");
        this.addCommand(TextManager_1.TextManager.sell, "sell", !this._purchaseOnly);
        this.addCommand(TextManager_1.TextManager.cancel, "cancel");
    };
    return Window_ShopCommand;
}(WindowHorzCommand_1.Window_HorzCommand));
exports.Window_ShopCommand = Window_ShopCommand;

},{"../managers/TextManager":42,"./WindowHorzCommand":129}],145:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ShopNumber = void 0;
var TouchInput_1 = require("../core/TouchInput");
var ImageManager_1 = require("../managers/ImageManager");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var SpriteButton_1 = require("../sprites/SpriteButton");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_ShopNumber = /** @class */ (function (_super) {
    __extends(Window_ShopNumber, _super);
    function Window_ShopNumber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_ShopNumber.prototype.initialize = function (x, y, height) {
        var width = this.windowWidth();
        _super.prototype.initialize.call(this, x, y, width, height);
        this._item = null;
        this._max = 1;
        this._price = 0;
        this._number = 1;
        this._currencyUnit = TextManager_1.TextManager.currencyUnit;
        this.createButtons();
    };
    Window_ShopNumber.prototype.windowWidth = function () {
        return 456;
    };
    Window_ShopNumber.prototype.number = function () {
        return this._number;
    };
    Window_ShopNumber.prototype.setup = function (item, max, price) {
        this._item = item;
        this._max = Math.floor(max);
        this._price = price;
        this._number = 1;
        this.placeButtons();
        this.updateButtonsVisiblity();
        this.refresh();
    };
    Window_ShopNumber.prototype.setCurrencyUnit = function (currencyUnit) {
        this._currencyUnit = currencyUnit;
        this.refresh();
    };
    Window_ShopNumber.prototype.createButtons = function () {
        var bitmap = ImageManager_1.ImageManager.loadSystem("ButtonSet");
        var buttonWidth = 48;
        var buttonHeight = 48;
        this._buttons = [];
        for (var i = 0; i < 5; i++) {
            var button = new SpriteButton_1.Sprite_Button();
            var x = buttonWidth * i;
            var w = buttonWidth * (i === 4 ? 2 : 1);
            button.bitmap = bitmap;
            button.setColdFrame(x, 0, w, buttonHeight);
            button.setHotFrame(x, buttonHeight, w, buttonHeight);
            button.visible = false;
            this._buttons.push(button);
            this.addChild(button);
        }
        this._buttons[0].setClickHandler(this.onButtonDown2.bind(this));
        this._buttons[1].setClickHandler(this.onButtonDown.bind(this));
        this._buttons[2].setClickHandler(this.onButtonUp.bind(this));
        this._buttons[3].setClickHandler(this.onButtonUp2.bind(this));
        this._buttons[4].setClickHandler(this.onButtonOk.bind(this));
    };
    Window_ShopNumber.prototype.placeButtons = function () {
        var numButtons = this._buttons.length;
        var spacing = 16;
        var totalWidth = -spacing;
        for (var i = 0; i < numButtons; i++) {
            totalWidth += this._buttons[i].width + spacing;
        }
        var x = (this.width - totalWidth) / 2;
        for (var j = 0; j < numButtons; j++) {
            var button = this._buttons[j];
            button.x = x;
            button.y = this.buttonY();
            x += button.width + spacing;
        }
    };
    Window_ShopNumber.prototype.updateButtonsVisiblity = function () {
        if (TouchInput_1.TouchInput.date > /* Input.date*/ 0) {
            this.showButtons();
        }
        else {
            this.hideButtons();
        }
    };
    Window_ShopNumber.prototype.showButtons = function () {
        for (var i = 0; i < this._buttons.length; i++) {
            this._buttons[i].visible = true;
        }
    };
    Window_ShopNumber.prototype.hideButtons = function () {
        for (var i = 0; i < this._buttons.length; i++) {
            this._buttons[i].visible = false;
        }
    };
    Window_ShopNumber.prototype.refresh = function () {
        this.contents.clear();
        this.drawItemName(this._item, 0, this.itemY());
        this.drawMultiplicationSign();
        this.drawNumber();
        this.drawTotalPrice();
    };
    Window_ShopNumber.prototype.drawMultiplicationSign = function () {
        var sign = "\u00d7";
        var width = this.textWidth(sign);
        var x = this.cursorX() - width * 2;
        var y = this.itemY();
        this.resetTextColor();
        this.drawText(sign, x, y, width);
    };
    Window_ShopNumber.prototype.drawNumber = function () {
        var x = this.cursorX();
        var y = this.itemY();
        var width = this.cursorWidth() - this.textPadding();
        this.resetTextColor();
        this.drawText(this._number, x, y, width, "right");
    };
    Window_ShopNumber.prototype.drawTotalPrice = function () {
        var total = this._price * this._number;
        var width = this.contentsWidth() - this.textPadding();
        this.drawCurrencyValue(total, this._currencyUnit, 0, this.priceY(), width);
    };
    Window_ShopNumber.prototype.itemY = function () {
        return Math.round(this.contentsHeight() / 2 - this.lineHeight() * 1.5);
    };
    Window_ShopNumber.prototype.priceY = function () {
        return Math.round(this.contentsHeight() / 2 + this.lineHeight() / 2);
    };
    Window_ShopNumber.prototype.buttonY = function () {
        return Math.round(this.priceY() + this.lineHeight() * 2.5);
    };
    Window_ShopNumber.prototype.cursorWidth = function () {
        var digitWidth = this.textWidth("0");
        return this.maxDigits() * digitWidth + this.textPadding() * 2;
    };
    Window_ShopNumber.prototype.cursorX = function () {
        return this.contentsWidth() - this.cursorWidth() - this.textPadding();
    };
    Window_ShopNumber.prototype.maxDigits = function () {
        return 2;
    };
    Window_ShopNumber.prototype.update = function () {
        _super.prototype.update.call(this);
        this.processNumberChange();
    };
    Window_ShopNumber.prototype.isOkTriggered = function () {
        // return Input.isTriggered("ok");
        return false;
    };
    Window_ShopNumber.prototype.playOkSound = function () {
        //
    };
    Window_ShopNumber.prototype.processNumberChange = function () {
        if (this.isOpenAndActive()) {
            // NOTE: キーボード非対応なのでコメントアウト
            // if (Input.isRepeated('right')) {
            //     this.changeNumber(1);
            // }
            // if (Input.isRepeated('left')) {
            //     this.changeNumber(-1);
            // }
            // if (Input.isRepeated('up')) {
            //     this.changeNumber(10);
            // }
            // if (Input.isRepeated('down')) {
            //     this.changeNumber(-10);
            // }
        }
    };
    Window_ShopNumber.prototype.changeNumber = function (amount) {
        var lastNumber = this._number;
        // this._number = (this._number + amount).clamp(1, this._max);
        this._number = Math.min(this._max, Math.max(this._number + amount, 1));
        if (this._number !== lastNumber) {
            SoundManager_1.SoundManager.playCursor();
            this.refresh();
        }
    };
    Window_ShopNumber.prototype.updateCursor = function () {
        this.setCursorRect(this.cursorX(), this.itemY(), this.cursorWidth(), this.lineHeight());
    };
    Window_ShopNumber.prototype.onButtonUp = function () {
        this.changeNumber(1);
    };
    Window_ShopNumber.prototype.onButtonUp2 = function () {
        this.changeNumber(10);
    };
    Window_ShopNumber.prototype.onButtonDown = function () {
        this.changeNumber(-1);
    };
    Window_ShopNumber.prototype.onButtonDown2 = function () {
        this.changeNumber(-10);
    };
    Window_ShopNumber.prototype.onButtonOk = function () {
        this.processOk();
    };
    return Window_ShopNumber;
}(WindowSelectable_1.Window_Selectable));
exports.Window_ShopNumber = Window_ShopNumber;

},{"../core/TouchInput":27,"../managers/ImageManager":37,"../managers/SoundManager":40,"../managers/TextManager":42,"../sprites/SpriteButton":98,"./WindowSelectable":142}],146:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ShopSell = void 0;
var WindowItemList_1 = require("./WindowItemList");
var Window_ShopSell = /** @class */ (function (_super) {
    __extends(Window_ShopSell, _super);
    function Window_ShopSell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_ShopSell.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
    };
    Window_ShopSell.prototype.isEnabled = function (item) {
        return item && item.price > 0;
    };
    return Window_ShopSell;
}(WindowItemList_1.Window_ItemList));
exports.Window_ShopSell = Window_ShopSell;

},{"./WindowItemList":131}],147:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_ShopStatus = void 0;
var TouchInput_1 = require("../core/TouchInput");
var DataManager_1 = require("../managers/DataManager");
var globals_1 = require("../managers/globals");
var SoundManager_1 = require("../managers/SoundManager");
var TextManager_1 = require("../managers/TextManager");
var WindowBase_1 = require("./WindowBase");
var Window_ShopStatus = /** @class */ (function (_super) {
    __extends(Window_ShopStatus, _super);
    function Window_ShopStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Window_ShopStatus.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._item = null;
        this._pageIndex = 0;
        this.refresh();
    };
    Window_ShopStatus.prototype.refresh = function () {
        this.contents.clear();
        if (this._item) {
            var x = this.textPadding();
            this.drawPossession(x, 0);
            if (this.isEquipItem()) {
                this.drawEquipInfo(x, this.lineHeight() * 2);
            }
        }
    };
    Window_ShopStatus.prototype.setItem = function (item) {
        this._item = item;
        this.refresh();
    };
    Window_ShopStatus.prototype.isEquipItem = function () {
        return DataManager_1.DataManager.isWeapon(this._item) || DataManager_1.DataManager.isArmor(this._item);
    };
    Window_ShopStatus.prototype.drawPossession = function (x, y) {
        var width = this.contents.width - this.textPadding() - x;
        var possessionWidth = this.textWidth("0000");
        this.changeTextColor(this.systemColor());
        this.drawText(TextManager_1.TextManager.possession, x, y, width - possessionWidth);
        this.resetTextColor();
        this.drawText(globals_1.$gameParty.numItems(this._item), x, y, width, "right");
    };
    Window_ShopStatus.prototype.drawEquipInfo = function (x, y) {
        var members = this.statusMembers();
        for (var i = 0; i < members.length; i++) {
            this.drawActorEquipInfo(x, y + this.lineHeight() * (i * 2.4), members[i]);
        }
    };
    Window_ShopStatus.prototype.statusMembers = function () {
        var start = this._pageIndex * this.pageSize();
        var end = start + this.pageSize();
        return globals_1.$gameParty.members().slice(start, end);
    };
    Window_ShopStatus.prototype.pageSize = function () {
        return 4;
    };
    Window_ShopStatus.prototype.maxPages = function () {
        return Math.floor((globals_1.$gameParty.size() + this.pageSize() - 1) / this.pageSize());
    };
    Window_ShopStatus.prototype.drawActorEquipInfo = function (x, y, actor) {
        var enabled = actor.canEquip(this._item);
        this.changePaintOpacity(enabled);
        this.resetTextColor();
        this.drawText(actor.name(), x, y, 168);
        var item1 = this.currentEquippedItem(actor, this._item.etypeId);
        if (enabled) {
            this.drawActorParamChange(x, y, actor, item1);
        }
        this.drawItemName(item1, x, y + this.lineHeight());
        this.changePaintOpacity(true);
    };
    Window_ShopStatus.prototype.drawActorParamChange = function (x, y, _actor, item1) {
        var width = this.contents.width - this.textPadding() - x;
        var paramId = this.paramId();
        var change = this._item.params[paramId] - (item1 ? item1.params[paramId] : 0);
        this.changeTextColor(this.paramchangeTextColor(change));
        this.drawText((change > 0 ? "+" : "") + change, x, y, width, "right");
    };
    Window_ShopStatus.prototype.paramId = function () {
        return DataManager_1.DataManager.isWeapon(this._item) ? 2 : 3;
    };
    Window_ShopStatus.prototype.currentEquippedItem = function (actor, etypeId) {
        var list = [];
        var equips = actor.equips();
        var slots = actor.equipSlots();
        for (var i = 0; i < slots.length; i++) {
            if (slots[i] === etypeId) {
                list.push(equips[i]);
            }
        }
        var paramId = this.paramId();
        var worstParam = Number.MAX_VALUE;
        var worstItem = null;
        for (var j = 0; j < list.length; j++) {
            if (list[j] && list[j].params[paramId] < worstParam) {
                worstParam = list[j].params[paramId];
                worstItem = list[j];
            }
        }
        return worstItem;
    };
    Window_ShopStatus.prototype.update = function () {
        _super.prototype.update.call(this);
        this.updatePage();
    };
    Window_ShopStatus.prototype.updatePage = function () {
        if (this.isPageChangeEnabled() && this.isPageChangeRequested()) {
            this.changePage();
        }
    };
    Window_ShopStatus.prototype.isPageChangeEnabled = function () {
        return this.visible && this.maxPages() >= 2;
    };
    Window_ShopStatus.prototype.isPageChangeRequested = function () {
        // if (Input.isTriggered('shift')) {
        // 	return true;
        // }
        // if (TouchInput.isTriggered() && this.isTouchedInsideFrame()) {
        // 	return true;
        // }
        return false;
    };
    Window_ShopStatus.prototype.isTouchedInsideFrame = function () {
        var x = this.canvasToLocalX(TouchInput_1.TouchInput.x);
        var y = this.canvasToLocalY(TouchInput_1.TouchInput.y);
        return x >= 0 && y >= 0 && x < this.width && y < this.height;
    };
    Window_ShopStatus.prototype.changePage = function () {
        this._pageIndex = (this._pageIndex + 1) % this.maxPages();
        this.refresh();
        SoundManager_1.SoundManager.playCursor();
    };
    return Window_ShopStatus;
}(WindowBase_1.Window_Base));
exports.Window_ShopStatus = Window_ShopStatus;

},{"../core/TouchInput":27,"../managers/DataManager":36,"../managers/SoundManager":40,"../managers/TextManager":42,"../managers/globals":43,"./WindowBase":112}],148:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_SkillList = void 0;
var globals_1 = require("../managers/globals");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_SkillList = /** @class */ (function (_super) {
    __extends(Window_SkillList, _super);
    function Window_SkillList(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_SkillList.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._actor = null;
        this._stypeId = 0;
        this._data = [];
    };
    Window_SkillList.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
            this.resetScroll();
        }
    };
    Window_SkillList.prototype.setStypeId = function (stypeId) {
        if (this._stypeId !== stypeId) {
            this._stypeId = stypeId;
            this.refresh();
            this.resetScroll();
        }
    };
    Window_SkillList.prototype.maxCols = function () {
        return 2;
    };
    Window_SkillList.prototype.spacing = function () {
        return 48;
    };
    Window_SkillList.prototype.maxItems = function () {
        return this._data ? this._data.length : 1;
    };
    Window_SkillList.prototype.item = function () {
        return this._data && this.index() >= 0 ? this._data[this.index()] : null;
    };
    Window_SkillList.prototype.isCurrentItemEnabled = function () {
        return this.isEnabled(this._data[this.index()]);
    };
    Window_SkillList.prototype.includes = function (item) {
        return item && item.stypeId === this._stypeId;
    };
    Window_SkillList.prototype.isEnabled = function (item) {
        return this._actor && this._actor.canUse(item);
    };
    Window_SkillList.prototype.makeItemList = function () {
        var _this = this;
        if (this._actor) {
            this._data = this._actor.skills().filter(function (item) {
                return _this.includes(item);
            });
        }
        else {
            this._data = [];
        }
    };
    Window_SkillList.prototype.selectLast = function () {
        var skill;
        if (globals_1.$gameParty.inBattle()) {
            skill = this._actor.lastBattleSkill();
        }
        else {
            skill = this._actor.lastMenuSkill();
        }
        var index = this._data.indexOf(skill);
        this.select(index >= 0 ? index : 0);
    };
    Window_SkillList.prototype.drawItem = function (index) {
        var skill = this._data[index];
        if (skill) {
            var costWidth = this.costWidth();
            var rect = this.itemRect(index);
            rect.width -= this.textPadding();
            this.changePaintOpacity(this.isEnabled(skill));
            this.drawItemName(skill, rect.x, rect.y, rect.width - costWidth);
            this.drawSkillCost(skill, rect.x, rect.y, rect.width);
            this.changePaintOpacity(/* 1*/ true);
        }
    };
    Window_SkillList.prototype.costWidth = function () {
        return this.textWidth("000");
    };
    Window_SkillList.prototype.drawSkillCost = function (skill, x, y, width) {
        if (this._actor.skillTpCost(skill) > 0) {
            this.changeTextColor(this.tpCostColor());
            this.drawText(this._actor.skillTpCost(skill), x, y, width, "right");
        }
        else if (this._actor.skillMpCost(skill) > 0) {
            this.changeTextColor(this.mpCostColor());
            this.drawText(this._actor.skillMpCost(skill), x, y, width, "right");
        }
    };
    Window_SkillList.prototype.updateHelp = function () {
        this.setHelpWindowItem(this.item());
    };
    Window_SkillList.prototype.refresh = function () {
        this.makeItemList();
        this.createContents();
        this.drawAllItems();
    };
    return Window_SkillList;
}(WindowSelectable_1.Window_Selectable));
exports.Window_SkillList = Window_SkillList;

},{"../managers/globals":43,"./WindowSelectable":142}],149:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_SkillStatus = void 0;
var WindowBase_1 = require("./WindowBase");
var Window_SkillStatus = /** @class */ (function (_super) {
    __extends(Window_SkillStatus, _super);
    function Window_SkillStatus(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    Window_SkillStatus.prototype.initialize = function (x, y, width, height) {
        _super.prototype.initialize.call(this, x, y, width, height);
        this._actor = null;
    };
    Window_SkillStatus.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
        }
    };
    Window_SkillStatus.prototype.refresh = function () {
        this.contents.clear();
        if (this._actor) {
            var w = this.width - this.padding * 2;
            var h = this.height - this.padding * 2;
            var y = h / 2 - this.lineHeight() * 1.5;
            var width = w - 162 - this.textPadding();
            this.drawActorFace(this._actor, 0, 0, 144, h);
            this.drawActorSimpleStatus(this._actor, 162, y, width);
        }
    };
    return Window_SkillStatus;
}(WindowBase_1.Window_Base));
exports.Window_SkillStatus = Window_SkillStatus;

},{"./WindowBase":112}],150:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_SkillType = void 0;
var globals_1 = require("../managers/globals");
var WindowCommand_1 = require("./WindowCommand");
var Window_SkillType = /** @class */ (function (_super) {
    __extends(Window_SkillType, _super);
    function Window_SkillType(x, y) {
        return _super.call(this, x, y) || this;
    }
    Window_SkillType.prototype.initialize = function (x, y) {
        _super.prototype.initialize.call(this, x, y);
        this._actor = null;
    };
    Window_SkillType.prototype.windowWidth = function () {
        return 240;
    };
    Window_SkillType.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
            this.selectLast();
        }
    };
    Window_SkillType.prototype.numVisibleRows = function () {
        return 4;
    };
    Window_SkillType.prototype.makeCommandList = function () {
        if (this._actor) {
            var skillTypes = this._actor.addedSkillTypes();
            skillTypes.sort(function (a, b) {
                return a - b;
            });
            skillTypes.forEach(function (stypeId) {
                var name = globals_1.$dataSystem.skillTypes[stypeId];
                this.addCommand(name, "skill", true, stypeId);
            }, this);
        }
    };
    Window_SkillType.prototype.update = function () {
        WindowCommand_1.Window_Command.prototype.update.call(this);
        if (this._skillWindow) {
            this._skillWindow.setStypeId(this.currentExt());
        }
    };
    Window_SkillType.prototype.setSkillWindow = function (skillWindow) {
        this._skillWindow = skillWindow;
    };
    Window_SkillType.prototype.selectLast = function () {
        var skill = this._actor.lastMenuSkill();
        if (skill) {
            this.selectExt(skill.stypeId);
        }
        else {
            this.select(0);
        }
    };
    return Window_SkillType;
}(WindowCommand_1.Window_Command));
exports.Window_SkillType = Window_SkillType;

},{"../managers/globals":43,"./WindowCommand":120}],151:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_Status = void 0;
var Graphics_1 = require("../core/Graphics");
var Utils_1 = require("../core/Utils");
var TextManager_1 = require("../managers/TextManager");
var WindowSelectable_1 = require("./WindowSelectable");
var Window_Status = /** @class */ (function (_super) {
    __extends(Window_Status, _super);
    function Window_Status() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.apply(this, args) || this;
    }
    Window_Status.prototype.initialize = function () {
        var width = Graphics_1.Graphics.boxWidth;
        var height = Graphics_1.Graphics.boxHeight;
        _super.prototype.initialize.call(this, 0, 0, width, height);
        this._actor = null;
        this.refresh();
        this.activate();
    };
    Window_Status.prototype.setActor = function (actor) {
        if (this._actor !== actor) {
            this._actor = actor;
            this.refresh();
        }
    };
    Window_Status.prototype.refresh = function () {
        this.contents.clear();
        if (this._actor) {
            var lineHeight = this.lineHeight();
            this.drawBlock1(lineHeight * 0);
            this.drawHorzLine(lineHeight * 1);
            this.drawBlock2(lineHeight * 2);
            this.drawHorzLine(lineHeight * 6);
            this.drawBlock3(lineHeight * 7);
            this.drawHorzLine(lineHeight * 13);
            this.drawBlock4(lineHeight * 14);
        }
    };
    Window_Status.prototype.drawBlock1 = function (y) {
        this.drawActorName(this._actor, 6, y);
        this.drawActorClass(this._actor, 192, y);
        this.drawActorNickname(this._actor, 432, y);
    };
    Window_Status.prototype.drawBlock2 = function (y) {
        this.drawActorFace(this._actor, 12, y);
        this.drawBasicInfo(204, y);
        this.drawExpInfo(456, y);
    };
    Window_Status.prototype.drawBlock3 = function (y) {
        this.drawParameters(48, y);
        this.drawEquipments(432, y);
    };
    Window_Status.prototype.drawBlock4 = function (y) {
        this.drawProfile(6, y);
    };
    Window_Status.prototype.drawHorzLine = function (y) {
        var lineY = y + this.lineHeight() / 2 - 1;
        this.contents.paintOpacity = 48;
        this.contents.fillRect(0, lineY, this.contentsWidth(), 2, this.lineColor());
        this.contents.paintOpacity = 255;
    };
    Window_Status.prototype.lineColor = function () {
        return this.normalColor();
    };
    Window_Status.prototype.drawBasicInfo = function (x, y) {
        var lineHeight = this.lineHeight();
        this.drawActorLevel(this._actor, x, y + lineHeight * 0);
        this.drawActorIcons(this._actor, x, y + lineHeight * 1);
        this.drawActorHp(this._actor, x, y + lineHeight * 2);
        this.drawActorMp(this._actor, x, y + lineHeight * 3);
    };
    Window_Status.prototype.drawParameters = function (x, y) {
        var lineHeight = this.lineHeight();
        for (var i = 0; i < 6; i++) {
            var paramId = i + 2;
            var y2 = y + lineHeight * i;
            this.changeTextColor(this.systemColor());
            this.drawText(TextManager_1.TextManager.param(paramId), x, y2, 160);
            this.resetTextColor();
            this.drawText(this._actor.param(paramId), x + 160, y2, 60, "right");
        }
    };
    Window_Status.prototype.drawExpInfo = function (x, y) {
        var lineHeight = this.lineHeight();
        var expTotal = Utils_1.Utils.format(TextManager_1.TextManager.expTotal, TextManager_1.TextManager.exp);
        var expNext = Utils_1.Utils.format(TextManager_1.TextManager.expNext, TextManager_1.TextManager.level);
        var value1 = this._actor.currentExp();
        var value2 = this._actor.nextRequiredExp();
        if (this._actor.isMaxLevel()) {
            value1 = "-------";
            value2 = "-------";
        }
        this.changeTextColor(this.systemColor());
        this.drawText(expTotal, x, y + lineHeight * 0, 270);
        this.drawText(expNext, x, y + lineHeight * 2, 270);
        this.resetTextColor();
        this.drawText(value1, x, y + lineHeight * 1, 270, "right");
        this.drawText(value2, x, y + lineHeight * 3, 270, "right");
    };
    Window_Status.prototype.drawEquipments = function (x, y) {
        var equips = this._actor.equips();
        var count = Math.min(equips.length, this.maxEquipmentLines());
        for (var i = 0; i < count; i++) {
            this.drawItemName(equips[i], x, y + this.lineHeight() * i);
        }
    };
    Window_Status.prototype.drawProfile = function (x, y) {
        this.drawTextEx(this._actor.profile(), x, y);
    };
    Window_Status.prototype.maxEquipmentLines = function () {
        return 6;
    };
    return Window_Status;
}(WindowSelectable_1.Window_Selectable));
exports.Window_Status = Window_Status;

},{"../core/Graphics":14,"../core/Utils":28,"../managers/TextManager":42,"./WindowSelectable":142}],152:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Window_TitleCommand = void 0;
var Graphics_1 = require("../core/Graphics");
var DataManager_1 = require("../managers/DataManager");
var TextManager_1 = require("../managers/TextManager");
var WindowCommand_1 = require("./WindowCommand");
var Window_TitleCommand = /** @class */ (function (_super) {
    __extends(Window_TitleCommand, _super);
    function Window_TitleCommand() {
        return _super.call(this) || this;
        // if (Object.getPrototypeOf(this) === Window_TitleCommand.prototype) {
        // 	this.initialize(this.x, this.y);
        // }
    }
    Window_TitleCommand.initCommandPosition = function () {
        this._lastCommandSymbol = null;
    };
    Window_TitleCommand.prototype.initialize = function () {
        _super.prototype.initialize.call(this, 0, 0);
        this.updatePlacement();
        this.openness = 0;
        this.selectLast();
    };
    Window_TitleCommand.prototype.windowWidth = function () {
        return 240;
    };
    Window_TitleCommand.prototype.updatePlacement = function () {
        this.x = (Graphics_1.Graphics.boxWidth - this.width) / 2;
        this.y = Graphics_1.Graphics.boxHeight - this.height - 96;
    };
    Window_TitleCommand.prototype.makeCommandList = function () {
        this.addCommand(TextManager_1.TextManager.newGame, "newGame");
        this.addCommand(TextManager_1.TextManager.continue_, "continue", this.isContinueEnabled());
        this.addCommand(TextManager_1.TextManager.options, "options", false); // TODO: オプション機能未実装のため選択不可とするが、実装したら false を外す
    };
    Window_TitleCommand.prototype.isContinueEnabled = function () {
        return DataManager_1.DataManager.isAnySavefileExists();
    };
    Window_TitleCommand.prototype.processOk = function () {
        Window_TitleCommand._lastCommandSymbol = this.currentSymbol();
        _super.prototype.processOk.call(this);
    };
    Window_TitleCommand.prototype.selectLast = function () {
        if (Window_TitleCommand._lastCommandSymbol) {
            this.selectSymbol(Window_TitleCommand._lastCommandSymbol);
        }
        else if (this.isContinueEnabled()) {
            this.selectSymbol("continue");
        }
    };
    Window_TitleCommand._lastCommandSymbol = null;
    return Window_TitleCommand;
}(WindowCommand_1.Window_Command));
exports.Window_TitleCommand = Window_TitleCommand;

},{"../core/Graphics":14,"../managers/DataManager":36,"../managers/TextManager":42,"./WindowCommand":120}]},{},[32])(32)
});
